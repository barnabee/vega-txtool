{
  "type": "object",
  "properties": {
    "orderSubmission": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "description": "Market ID to submit the order to."
        },
        "price": {
          "type": "string",
          "description": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places,\nrequired field for limit orders, however it is not required for market orders.\nThis field is an unsigned integer scaled to the market's decimal places."
        },
        "size": {
          "type": "string",
          "pattern": "^[0-9]{0,19}$",
          "description": "Size for the order, for example, in a futures market the size equals the number of units."
        },
        "side": {
          "description": "Which side of the order book the order is for, e.g. buy or sell.",
          "type": "string",
          "enum": [
            "SIDE_UNSPECIFIED",
            "SIDE_BUY",
            "SIDE_SELL"
          ],
          "default": "SIDE_UNSPECIFIED",
          "title": "Side relates to the direction of an order, to Buy, or Sell"
        },
        "timeInForce": {
          "description": "Time in force indicates how long an order will remain active before it is executed or expires..",
          "type": "string",
          "enum": [
            "TIME_IN_FORCE_UNSPECIFIED",
            "TIME_IN_FORCE_GTC",
            "TIME_IN_FORCE_GTT",
            "TIME_IN_FORCE_IOC",
            "TIME_IN_FORCE_FOK",
            "TIME_IN_FORCE_GFA",
            "TIME_IN_FORCE_GFN"
          ],
          "default": "TIME_IN_FORCE_UNSPECIFIED",
          "title": "Time In Force for an order"
        },
        "expiresAt": {
          "type": "string",
          "pattern": "^[0-9]{0,19}$",
          "description": "Timestamp, in Unix nanoseconds, for when the order will expire. Can only be set when the order's time-in-force is GTT.",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "type": {
          "description": "Type of the order.",
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "TYPE_LIMIT",
            "TYPE_MARKET",
            "TYPE_NETWORK"
          ],
          "default": "TYPE_UNSPECIFIED",
          "title": "Type values for an order"
        },
        "reference": {
          "type": "string",
          "description": "Arbitrary optional reference for the order, to be used as a human-readable non-unique identifier for the order."
        },
        "peggedOrder": {
          "description": "Pegged order details. If set, the order's price will be offset from a particular reference price of the order book at all times.",
          "type": "object",
          "properties": {
            "reference": {
              "description": "Price point the order is linked to.",
              "type": "string",
              "enum": [
                "PEGGED_REFERENCE_UNSPECIFIED",
                "PEGGED_REFERENCE_MID",
                "PEGGED_REFERENCE_BEST_BID",
                "PEGGED_REFERENCE_BEST_ASK"
              ],
              "default": "PEGGED_REFERENCE_UNSPECIFIED",
              "title": "Pegged reference defines which price point a pegged order is linked to - meaning\nthe price for a pegged order is calculated from the value of the reference price point"
            },
            "offset": {
              "type": "string",
              "description": "Offset from the price reference."
            }
          },
          "title": "Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET\nThey can be used for any limit order that is valid during continuous trading"
        },
        "postOnly": {
          "type": "boolean",
          "description": "If set, the order will only be executed if it would not trade on entry to the order book. Only valid for limit orders."
        },
        "reduceOnly": {
          "type": "boolean",
          "description": "If set, the order will only be executed if the outcome of the trade moves the trader's position closer to 0.\nOnly valid for non-persistent orders."
        },
        "icebergOpts": {
          "description": "Iceberg order details. If set, the order will exist on the order book in chunks.",
          "type": "object",
          "properties": {
            "peakSize": {
              "type": "string",
              "pattern": "^[0-9]{0,19}$",
              "description": "Size of the order that is made visible and can be traded with during the execution of a single order."
            },
            "minimumVisibleSize": {
              "type": "string",
              "pattern": "^[0-9]{0,19}$",
              "description": "Minimum allowed remaining size of the order before it is replenished back to its peak size."
            }
          },
          "title": "Iceberg order options"
        }
      },
      "description": "A command that submits an order to the Vega network for a given market."
    },
    "orderAmendment": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string",
          "description": "ID of the order to amend."
        },
        "marketId": {
          "type": "string",
          "description": "Market ID that the order was originally submitted to."
        },
        "price": {
          "type": "string",
          "description": "New price for the order. This field is an unsigned integer scaled to the market's decimal places."
        },
        "sizeDelta": {
          "type": "string",
          "pattern": "^[0-9]{0,19}$",
          "description": "Amend the size for the order by the delta specified:\n- To reduce the size from the current value set a negative integer value\n- To increase the size from the current value, set a positive integer value\n- To leave the size unchanged set a value of zero\nThis field needs to be scaled using the market's position decimal places.\nIf specified, size must not be set.",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "expiresAt": {
          "type": "string",
          "pattern": "^[0-9]{0,19}$",
          "description": "Timestamp, in Unix nanoseconds, for the new expiry time for the order.",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "timeInForce": {
          "description": "New time in force for the order.",
          "type": "string",
          "enum": [
            "TIME_IN_FORCE_UNSPECIFIED",
            "TIME_IN_FORCE_GTC",
            "TIME_IN_FORCE_GTT",
            "TIME_IN_FORCE_IOC",
            "TIME_IN_FORCE_FOK",
            "TIME_IN_FORCE_GFA",
            "TIME_IN_FORCE_GFN"
          ],
          "default": "TIME_IN_FORCE_UNSPECIFIED",
          "title": "Time In Force for an order"
        },
        "peggedOffset": {
          "type": "string",
          "description": "New pegged offset for the order.\nThis field is an unsigned integer scaled to the market's decimal places."
        },
        "peggedReference": {
          "description": "New pegged reference for the order.",
          "type": "string",
          "enum": [
            "PEGGED_REFERENCE_UNSPECIFIED",
            "PEGGED_REFERENCE_MID",
            "PEGGED_REFERENCE_BEST_BID",
            "PEGGED_REFERENCE_BEST_ASK"
          ],
          "default": "PEGGED_REFERENCE_UNSPECIFIED",
          "title": "Pegged reference defines which price point a pegged order is linked to - meaning\nthe price for a pegged order is calculated from the value of the reference price point"
        },
        "size": {
          "type": "string",
          "pattern": "^[0-9]{0,19}$",
          "description": "New size for the order.\nAmending the size causes the size and remaining part of the order to be changed by the difference between the original and amended size.\n- Specifying a size smaller than the current size leaves the order at its current order book position.\n- Specifying a size larger than the current size removes and reinserts the order at the back of the price level.\n- Specifying a size that results in the remaining part of the order being reduced to zero cancels the order.\nThis field is an unsigned integer scaled to the market's decimal places.\nIf specified, size_delta must be set to 0."
        }
      },
      "description": "A command that allows a party to update the details of an existing order.\nAny field that is left unset or as a default value indicates that this field on the original order will be left unchanged.\nIt is not possible to change an order's type through this command."
    },
    "orderCancellation": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string",
          "description": "Restrict cancellations to an order with the given ID. If set, then a market ID must also be provided."
        },
        "marketId": {
          "type": "string",
          "description": "Restrict cancellations to those submitted to the given market. If not set, all stop orders across all markets will be cancelled."
        }
      },
      "description": "A command that instructs the network to cancel orders, active or partially filled, that were previously submitted by the sender of this transaction.\nIt is not possible to cancel another party's order with this command."
    },
    "proposalSubmission": {
      "type": "object",
      "properties": {
        "reference": {
          "type": "string",
          "description": "Arbitrary human-readable reference identifying the proposal."
        },
        "terms": {
          "description": "Proposal terms containing the type and details of the proposal, as well as time spans for voting and enactment.",
          "type": "object",
          "properties": {
            "closingTimestamp": {
              "type": "string",
              "pattern": "^[0-9]{0,19}$",
              "description": "Timestamp as Unix time in seconds when voting closes for this proposal,\nconstrained by `minClose` and `maxClose` network parameters.",
              "minimum": -9223372036854776000,
              "maximum": 9223372036854776000
            },
            "enactmentTimestamp": {
              "type": "string",
              "pattern": "^[0-9]{0,19}$",
              "description": "Timestamp as Unix time in seconds when proposal gets enacted if passed,\nconstrained by `minEnact` and `maxEnact` network parameters.",
              "minimum": -9223372036854776000,
              "maximum": 9223372036854776000
            },
            "validationTimestamp": {
              "type": "string",
              "pattern": "^[0-9]{0,19}$",
              "description": "Validation timestamp as Unix time in seconds.",
              "minimum": -9223372036854776000,
              "maximum": 9223372036854776000
            },
            "updateMarket": {
              "description": "Proposal change for modifying an existing futures market on Vega.",
              "type": "object",
              "properties": {
                "marketId": {
                  "type": "string",
                  "description": "Market ID the update is for."
                },
                "changes": {
                  "description": "Updated configuration of the futures market.",
                  "type": "object",
                  "properties": {
                    "instrument": {
                      "description": "Updated futures market instrument configuration.",
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Instrument code, human-readable shortcode used to describe the instrument."
                        },
                        "name": {
                          "type": "string",
                          "title": "Instrument name"
                        },
                        "future": {
                          "description": "Future.",
                          "type": "object",
                          "properties": {
                            "quoteName": {
                              "type": "string",
                              "description": "Human-readable name/abbreviation of the quote name."
                            },
                            "dataSourceSpecForSettlementData": {
                              "description": "The data source spec describing the data of settlement data.",
                              "type": "object",
                              "properties": {
                                "internal": {
                                  "type": "object",
                                  "properties": {
                                    "time": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps should meet in order to be considered."
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps."
                                    },
                                    "timeTrigger": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps need to meet in order to be considered."
                                        },
                                        "triggers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "initial": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              },
                                              "every": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              }
                                            },
                                            "description": "Trigger for an internal time data source."
                                          },
                                          "title": "An internal time trigger"
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                    }
                                  },
                                  "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                },
                                "external": {
                                  "type": "object",
                                  "properties": {
                                    "oracle": {
                                      "type": "object",
                                      "properties": {
                                        "signers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "pubKey": {
                                                "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "ethAddress": {
                                                "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                        }
                                      },
                                      "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                    },
                                    "ethOracle": {
                                      "description": "Contains the data specification that is received from Ethereum sources.",
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "Ethereum address of the contract to call."
                                        },
                                        "abi": {
                                          "type": "string",
                                          "description": "The ABI of that contract."
                                        },
                                        "method": {
                                          "type": "string",
                                          "description": "Name of the method on the contract to call."
                                        },
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                        },
                                        "trigger": {
                                          "description": "Conditions for determining when to call the contract method.",
                                          "type": "object",
                                          "properties": {
                                            "timeTrigger": {
                                              "type": "object",
                                              "properties": {
                                                "initial": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                },
                                                "every": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                },
                                                "until": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                }
                                              },
                                              "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                            }
                                          }
                                        },
                                        "requiredConfirmations": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "title": "Number of confirmations required before the query is considered verified"
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "title": "Filters the data returned from the contract method"
                                        },
                                        "normalisers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "expression": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                        },
                                        "sourceChainId": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                        }
                                      }
                                    }
                                  },
                                  "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                }
                              }
                            },
                            "dataSourceSpecForTradingTermination": {
                              "description": "The data source spec describing the data source for trading termination.",
                              "type": "object",
                              "properties": {
                                "internal": {
                                  "type": "object",
                                  "properties": {
                                    "time": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps should meet in order to be considered."
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps."
                                    },
                                    "timeTrigger": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps need to meet in order to be considered."
                                        },
                                        "triggers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "initial": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              },
                                              "every": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              }
                                            },
                                            "description": "Trigger for an internal time data source."
                                          },
                                          "title": "An internal time trigger"
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                    }
                                  },
                                  "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                },
                                "external": {
                                  "type": "object",
                                  "properties": {
                                    "oracle": {
                                      "type": "object",
                                      "properties": {
                                        "signers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "pubKey": {
                                                "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "ethAddress": {
                                                "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                        }
                                      },
                                      "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                    },
                                    "ethOracle": {
                                      "description": "Contains the data specification that is received from Ethereum sources.",
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "Ethereum address of the contract to call."
                                        },
                                        "abi": {
                                          "type": "string",
                                          "description": "The ABI of that contract."
                                        },
                                        "method": {
                                          "type": "string",
                                          "description": "Name of the method on the contract to call."
                                        },
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                        },
                                        "trigger": {
                                          "description": "Conditions for determining when to call the contract method.",
                                          "type": "object",
                                          "properties": {
                                            "timeTrigger": {
                                              "type": "object",
                                              "properties": {
                                                "initial": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                },
                                                "every": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                },
                                                "until": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                }
                                              },
                                              "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                            }
                                          }
                                        },
                                        "requiredConfirmations": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "title": "Number of confirmations required before the query is considered verified"
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "title": "Filters the data returned from the contract method"
                                        },
                                        "normalisers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "expression": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                        },
                                        "sourceChainId": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                        }
                                      }
                                    }
                                  },
                                  "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                }
                              }
                            },
                            "dataSourceSpecBinding": {
                              "description": "The binding between the data source spec and the settlement data.",
                              "type": "object",
                              "properties": {
                                "settlementDataProperty": {
                                  "type": "string",
                                  "description": "Name of the property in the source data that should be used as settlement data.\nIf it is set to \"prices.BTC.value\", then the Future will use the value of\nthis property as settlement data."
                                },
                                "tradingTerminationProperty": {
                                  "type": "string",
                                  "description": "Name of the property in the data source data that signals termination of trading."
                                }
                              },
                              "title": "DataSourceSpecToFutureBinding describes which property of the data source data is to be\nused as settlement data and which to use as the trading terminated trigger"
                            }
                          },
                          "title": "Future product configuration"
                        },
                        "perpetual": {
                          "description": "Perpetual.",
                          "type": "object",
                          "properties": {
                            "quoteName": {
                              "type": "string",
                              "description": "Human-readable name/abbreviation of the quote name."
                            },
                            "marginFundingFactor": {
                              "type": "string",
                              "description": "Controls how much the upcoming funding payment liability contributes to party's margin, in the range [0, 1]."
                            },
                            "interestRate": {
                              "type": "string",
                              "description": "Continuously compounded interest rate used in funding rate calculation, in the range [-1, 1]."
                            },
                            "clampLowerBound": {
                              "type": "string",
                              "description": "Lower bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1]."
                            },
                            "clampUpperBound": {
                              "type": "string",
                              "description": "Upper bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1]."
                            },
                            "dataSourceSpecForSettlementSchedule": {
                              "description": "Data source spec describing the data source for settlement schedule.",
                              "type": "object",
                              "properties": {
                                "internal": {
                                  "type": "object",
                                  "properties": {
                                    "time": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps should meet in order to be considered."
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps."
                                    },
                                    "timeTrigger": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps need to meet in order to be considered."
                                        },
                                        "triggers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "initial": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              },
                                              "every": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              }
                                            },
                                            "description": "Trigger for an internal time data source."
                                          },
                                          "title": "An internal time trigger"
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                    }
                                  },
                                  "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                },
                                "external": {
                                  "type": "object",
                                  "properties": {
                                    "oracle": {
                                      "type": "object",
                                      "properties": {
                                        "signers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "pubKey": {
                                                "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "ethAddress": {
                                                "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                        }
                                      },
                                      "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                    },
                                    "ethOracle": {
                                      "description": "Contains the data specification that is received from Ethereum sources.",
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "Ethereum address of the contract to call."
                                        },
                                        "abi": {
                                          "type": "string",
                                          "description": "The ABI of that contract."
                                        },
                                        "method": {
                                          "type": "string",
                                          "description": "Name of the method on the contract to call."
                                        },
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                        },
                                        "trigger": {
                                          "description": "Conditions for determining when to call the contract method.",
                                          "type": "object",
                                          "properties": {
                                            "timeTrigger": {
                                              "type": "object",
                                              "properties": {
                                                "initial": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                },
                                                "every": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                },
                                                "until": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                }
                                              },
                                              "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                            }
                                          }
                                        },
                                        "requiredConfirmations": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "title": "Number of confirmations required before the query is considered verified"
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "title": "Filters the data returned from the contract method"
                                        },
                                        "normalisers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "expression": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                        },
                                        "sourceChainId": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                        }
                                      }
                                    }
                                  },
                                  "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                }
                              }
                            },
                            "dataSourceSpecForSettlementData": {
                              "description": "Data source spec describing the data source for settlement.",
                              "type": "object",
                              "properties": {
                                "internal": {
                                  "type": "object",
                                  "properties": {
                                    "time": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps should meet in order to be considered."
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps."
                                    },
                                    "timeTrigger": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps need to meet in order to be considered."
                                        },
                                        "triggers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "initial": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              },
                                              "every": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              }
                                            },
                                            "description": "Trigger for an internal time data source."
                                          },
                                          "title": "An internal time trigger"
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                    }
                                  },
                                  "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                },
                                "external": {
                                  "type": "object",
                                  "properties": {
                                    "oracle": {
                                      "type": "object",
                                      "properties": {
                                        "signers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "pubKey": {
                                                "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "ethAddress": {
                                                "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                        }
                                      },
                                      "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                    },
                                    "ethOracle": {
                                      "description": "Contains the data specification that is received from Ethereum sources.",
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "Ethereum address of the contract to call."
                                        },
                                        "abi": {
                                          "type": "string",
                                          "description": "The ABI of that contract."
                                        },
                                        "method": {
                                          "type": "string",
                                          "description": "Name of the method on the contract to call."
                                        },
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                        },
                                        "trigger": {
                                          "description": "Conditions for determining when to call the contract method.",
                                          "type": "object",
                                          "properties": {
                                            "timeTrigger": {
                                              "type": "object",
                                              "properties": {
                                                "initial": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                },
                                                "every": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                },
                                                "until": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                }
                                              },
                                              "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                            }
                                          }
                                        },
                                        "requiredConfirmations": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "title": "Number of confirmations required before the query is considered verified"
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "title": "Filters the data returned from the contract method"
                                        },
                                        "normalisers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "expression": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                        },
                                        "sourceChainId": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                        }
                                      }
                                    }
                                  },
                                  "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                }
                              }
                            },
                            "dataSourceSpecBinding": {
                              "description": "Binding between the data source spec and the settlement data.",
                              "type": "object",
                              "properties": {
                                "settlementDataProperty": {
                                  "type": "string",
                                  "description": "Name of the property in the source data that should be used for settlement data.\nIf it is set to \"prices.BTC.value\" for example, then the perpetual market will use the value of\nthis property to get settlement data."
                                },
                                "settlementScheduleProperty": {
                                  "type": "string",
                                  "description": "Name of the property in the source data that should be used to determine the perpetual's settlement schedule."
                                }
                              }
                            },
                            "fundingRateScalingFactor": {
                              "type": "string",
                              "description": "Factor applied to funding-rates. This scales the impact that spot price deviations have on funding payments."
                            },
                            "fundingRateLowerBound": {
                              "type": "string",
                              "description": "Lower bound for the funding-rate such that the funding-rate will never be lower than this value."
                            },
                            "fundingRateUpperBound": {
                              "type": "string",
                              "description": "Upper bound for the funding-rate such that the funding-rate will never be higher than this value."
                            },
                            "internalCompositePriceConfiguration": {
                              "description": "Configuration for the internal composite price used in funding payment calculation.",
                              "type": "object",
                              "properties": {
                                "decayWeight": {
                                  "type": "string",
                                  "description": "Decay weight used for calculation of mark price."
                                },
                                "decayPower": {
                                  "type": "string",
                                  "pattern": "^[0-9]{0,19}$",
                                  "description": "Decay power used for the calculation of mark price."
                                },
                                "cashAmount": {
                                  "type": "string",
                                  "description": "Cash amount, in asset decimals, used for the calculation of the mark price from the order book."
                                },
                                "sourceWeights": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "Weights for each composite price data source."
                                },
                                "sourceStalenessTolerance": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "For how long a price source is considered valid. One entry for each data source\nsuch that the first is for the trade based mark price, the second is for the book based price\nthe third is for the first oracle, followed by more oracle data source staleness tolerance."
                                },
                                "compositePriceType": {
                                  "description": "Which method is used for the calculation of the composite price for the market.",
                                  "type": "string",
                                  "enum": [
                                    "COMPOSITE_PRICE_TYPE_UNSPECIFIED",
                                    "COMPOSITE_PRICE_TYPE_WEIGHTED",
                                    "COMPOSITE_PRICE_TYPE_MEDIAN",
                                    "COMPOSITE_PRICE_TYPE_LAST_TRADE"
                                  ],
                                  "default": "COMPOSITE_PRICE_TYPE_UNSPECIFIED"
                                },
                                "dataSourcesSpec": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    },
                                    "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                  },
                                  "description": "Additional price sources to be used for internal composite price calculation."
                                },
                                "dataSourcesSpecBinding": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "priceSourceProperty": {
                                        "type": "string",
                                        "description": "The property name of price."
                                      }
                                    },
                                    "description": "Describes which property of the data source data is to be\nused for price source."
                                  },
                                  "title": "List of each price source and its corresponding binding"
                                }
                              }
                            }
                          },
                          "title": "Perpetual product configuration"
                        }
                      },
                      "title": "Instrument configuration"
                    },
                    "metadata": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Optional futures market metadata, tags."
                    },
                    "priceMonitoringParameters": {
                      "description": "Price monitoring parameters.",
                      "type": "object",
                      "properties": {
                        "triggers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "horizon": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Price monitoring projection horizon τ in seconds.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              },
                              "probability": {
                                "type": "string",
                                "description": "Price monitoring probability level p."
                              },
                              "auctionExtension": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Price monitoring auction extension duration in seconds should the price\nbreach its theoretical level over the specified horizon at the specified\nprobability level.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              }
                            },
                            "title": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration"
                          }
                        }
                      },
                      "title": "PriceMonitoringParameters contains a collection of triggers to be used for a given market"
                    },
                    "liquidityMonitoringParameters": {
                      "description": "Liquidity monitoring parameters.",
                      "type": "object",
                      "properties": {
                        "targetStakeParameters": {
                          "description": "Specifies parameters related to target stake calculation.",
                          "type": "object",
                          "properties": {
                            "timeWindow": {
                              "type": "string",
                              "pattern": "^[0-9]{0,19}$",
                              "description": "Specifies length of time window expressed in seconds for target stake calculation.",
                              "minimum": -9223372036854776000,
                              "maximum": 9223372036854776000
                            },
                            "scalingFactor": {
                              "type": "number",
                              "pattern": "^[-]?+(.[0-9]+)?$",
                              "description": "Specifies scaling factors used in target stake calculation.",
                              "minimum": -1.7976931348623157e+308,
                              "maximum": 1.7976931348623157e+308
                            }
                          },
                          "title": "TargetStakeParameters contains parameters used in target stake calculation"
                        },
                        "triggeringRatio": {
                          "type": "string",
                          "description": "Specifies the triggering ratio for entering liquidity auction."
                        },
                        "auctionExtension": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction.",
                          "minimum": -9223372036854776000,
                          "maximum": 9223372036854776000
                        }
                      },
                      "title": "LiquidityMonitoringParameters contains settings used for liquidity monitoring"
                    },
                    "simple": {
                      "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected.",
                      "type": "object",
                      "properties": {
                        "factorLong": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined risk factor value for long.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "factorShort": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined risk factor value for short.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "maxMoveUp": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined maximum price move up that the model considers as valid.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "minMoveDown": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined minimum price move down that the model considers as valid.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "probabilityOfTrading": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined constant probability of trading.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        }
                      },
                      "title": "Risk model parameters for simple modelling"
                    },
                    "logNormal": {
                      "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.",
                      "type": "object",
                      "properties": {
                        "riskAversionParameter": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Risk Aversion Parameter.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "tau": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Tau parameter of the risk model, projection horizon measured as a year fraction used in the expected shortfall\ncalculation to obtain the maintenance margin, must be a strictly non-negative real number.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "params": {
                          "description": "Risk model parameters for log normal.",
                          "type": "object",
                          "properties": {
                            "mu": {
                              "type": "number",
                              "pattern": "^[-]?+(.[0-9]+)?$",
                              "description": "Mu parameter, annualised growth rate of the underlying asset.",
                              "minimum": -1.7976931348623157e+308,
                              "maximum": 1.7976931348623157e+308
                            },
                            "r": {
                              "type": "number",
                              "pattern": "^[-]?+(.[0-9]+)?$",
                              "description": "R parameter, annualised growth rate of the risk-free asset, used for discounting of future cash flows, can be any real number.",
                              "minimum": -1.7976931348623157e+308,
                              "maximum": 1.7976931348623157e+308
                            },
                            "sigma": {
                              "type": "number",
                              "pattern": "^[-]?+(.[0-9]+)?$",
                              "description": "Sigma parameter, annualised volatility of the underlying asset, must be a strictly non-negative real number.",
                              "minimum": -1.7976931348623157e+308,
                              "maximum": 1.7976931348623157e+308
                            }
                          },
                          "title": "Risk model parameters for log normal"
                        }
                      },
                      "title": "Risk model for log normal"
                    },
                    "lpPriceRange": {
                      "type": "string",
                      "description": "DEPRECATED: Use liquidity SLA parameters instead.\nPercentage move up and down from the mid price which specifies the range of\nprice levels over which automated liquidity provisions will be deployed."
                    },
                    "linearSlippageFactor": {
                      "type": "string",
                      "description": "Linear slippage factor is used to cap the slippage component of maintenance margin - it is applied to the slippage volume."
                    },
                    "quadraticSlippageFactor": {
                      "type": "string",
                      "description": "Quadratic slippage factor is used to cap the slippage component of maintenance margin - it is applied to the square of the slippage volume."
                    },
                    "liquiditySlaParameters": {
                      "title": "Liquidity SLA parameters",
                      "type": "object",
                      "properties": {
                        "priceRange": {
                          "type": "string"
                        },
                        "commitmentMinTimeFraction": {
                          "type": "string",
                          "description": "Specifies the minimum fraction of time LPs must spend \"on the book\" providing their committed liquidity."
                        },
                        "performanceHysteresisEpochs": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Specifies the number of liquidity epochs over which past performance will continue to affect rewards."
                        },
                        "slaCompetitionFactor": {
                          "type": "string",
                          "description": "Specifies the maximum fraction of their accrued fees an LP that meets the SLA implied by market.liquidity.commitmentMinTimeFraction will lose to liquidity providers\nthat achieved a higher SLA performance than them."
                        }
                      }
                    },
                    "liquidityFeeSettings": {
                      "description": "Specifies how the liquidity fee for the market will be calculated.",
                      "type": "object",
                      "properties": {
                        "method": {
                          "description": "Method used to calculate the market's liquidity fee.",
                          "type": "string",
                          "enum": [
                            "METHOD_UNSPECIFIED",
                            "METHOD_MARGINAL_COST",
                            "METHOD_WEIGHTED_AVERAGE",
                            "METHOD_CONSTANT"
                          ],
                          "default": "METHOD_UNSPECIFIED"
                        },
                        "feeConstant": {
                          "type": "string",
                          "description": "Constant liquidity fee used when using the constant fee method."
                        }
                      }
                    },
                    "liquidationStrategy": {
                      "title": "Liquidation strategy parameters",
                      "type": "object",
                      "properties": {
                        "disposalTimeStep": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Interval, in seconds, at which the network will attempt to close its position.",
                          "minimum": -9223372036854776000,
                          "maximum": 9223372036854776000
                        },
                        "disposalFraction": {
                          "type": "string",
                          "description": "Fraction of the open position the market will try to close in a single attempt; range 0 through 1."
                        },
                        "fullDisposalSize": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Size of the position that the network will try to close in a single attempt."
                        },
                        "maxFractionConsumed": {
                          "type": "string",
                          "description": "Max fraction of the total volume of the orderbook, within liquidity bounds, that the network can use to close its position; range 0 through 1."
                        }
                      },
                      "description": "Liquidation strategy used when the network holds a position resulting from position resolution."
                    },
                    "markPriceConfiguration": {
                      "description": "Mark price configuration.",
                      "type": "object",
                      "properties": {
                        "decayWeight": {
                          "type": "string",
                          "description": "Decay weight used for calculation of mark price."
                        },
                        "decayPower": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Decay power used for the calculation of mark price."
                        },
                        "cashAmount": {
                          "type": "string",
                          "description": "Cash amount, in asset decimals, used for the calculation of the mark price from the order book."
                        },
                        "sourceWeights": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Weights for each composite price data source."
                        },
                        "sourceStalenessTolerance": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "For how long a price source is considered valid. One entry for each data source\nsuch that the first is for the trade based mark price, the second is for the book based price\nthe third is for the first oracle, followed by more oracle data source staleness tolerance."
                        },
                        "compositePriceType": {
                          "description": "Which method is used for the calculation of the composite price for the market.",
                          "type": "string",
                          "enum": [
                            "COMPOSITE_PRICE_TYPE_UNSPECIFIED",
                            "COMPOSITE_PRICE_TYPE_WEIGHTED",
                            "COMPOSITE_PRICE_TYPE_MEDIAN",
                            "COMPOSITE_PRICE_TYPE_LAST_TRADE"
                          ],
                          "default": "COMPOSITE_PRICE_TYPE_UNSPECIFIED"
                        },
                        "dataSourcesSpec": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "internal": {
                                "type": "object",
                                "properties": {
                                  "time": {
                                    "type": "object",
                                    "properties": {
                                      "conditions": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "operator": {
                                              "description": "Type of comparison to make on the value.",
                                              "type": "string",
                                              "enum": [
                                                "OPERATOR_UNSPECIFIED",
                                                "OPERATOR_EQUALS",
                                                "OPERATOR_GREATER_THAN",
                                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                "OPERATOR_LESS_THAN",
                                                "OPERATOR_LESS_THAN_OR_EQUAL"
                                              ],
                                              "default": "OPERATOR_UNSPECIFIED"
                                            },
                                            "value": {
                                              "type": "string",
                                              "description": "Value to be compared with by the operator."
                                            }
                                          },
                                          "title": "Condition describes the condition that must be validated by the network"
                                        },
                                        "description": "Conditions that the timestamps should meet in order to be considered."
                                      }
                                    },
                                    "description": "Internal data source used for emitting timestamps."
                                  },
                                  "timeTrigger": {
                                    "type": "object",
                                    "properties": {
                                      "conditions": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "operator": {
                                              "description": "Type of comparison to make on the value.",
                                              "type": "string",
                                              "enum": [
                                                "OPERATOR_UNSPECIFIED",
                                                "OPERATOR_EQUALS",
                                                "OPERATOR_GREATER_THAN",
                                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                "OPERATOR_LESS_THAN",
                                                "OPERATOR_LESS_THAN_OR_EQUAL"
                                              ],
                                              "default": "OPERATOR_UNSPECIFIED"
                                            },
                                            "value": {
                                              "type": "string",
                                              "description": "Value to be compared with by the operator."
                                            }
                                          },
                                          "title": "Condition describes the condition that must be validated by the network"
                                        },
                                        "description": "Conditions that the timestamps need to meet in order to be considered."
                                      },
                                      "triggers": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "initial": {
                                              "type": "string",
                                              "pattern": "^[0-9]{0,19}$",
                                              "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                              "minimum": -9223372036854776000,
                                              "maximum": 9223372036854776000
                                            },
                                            "every": {
                                              "type": "string",
                                              "pattern": "^[0-9]{0,19}$",
                                              "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                              "minimum": -9223372036854776000,
                                              "maximum": 9223372036854776000
                                            }
                                          },
                                          "description": "Trigger for an internal time data source."
                                        },
                                        "title": "An internal time trigger"
                                      }
                                    },
                                    "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                  }
                                },
                                "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                              },
                              "external": {
                                "type": "object",
                                "properties": {
                                  "oracle": {
                                    "type": "object",
                                    "properties": {
                                      "signers": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "pubKey": {
                                              "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                              "type": "object",
                                              "properties": {
                                                "key": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "ethAddress": {
                                              "description": "In case of an open oracle - Ethereum address will be submitted.",
                                              "type": "object",
                                              "properties": {
                                                "address": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                      },
                                      "filters": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "key": {
                                              "description": "Data source's data property key targeted by the filter.",
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "description": "Name of the property."
                                                },
                                                "type": {
                                                  "description": "Data type of the property.",
                                                  "type": "string",
                                                  "enum": [
                                                    "TYPE_UNSPECIFIED",
                                                    "TYPE_EMPTY",
                                                    "TYPE_INTEGER",
                                                    "TYPE_STRING",
                                                    "TYPE_BOOLEAN",
                                                    "TYPE_DECIMAL",
                                                    "TYPE_TIMESTAMP"
                                                  ],
                                                  "default": "TYPE_UNSPECIFIED"
                                                },
                                                "numberDecimalPlaces": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                }
                                              }
                                            },
                                            "conditions": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "operator": {
                                                    "description": "Type of comparison to make on the value.",
                                                    "type": "string",
                                                    "enum": [
                                                      "OPERATOR_UNSPECIFIED",
                                                      "OPERATOR_EQUALS",
                                                      "OPERATOR_GREATER_THAN",
                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                      "OPERATOR_LESS_THAN",
                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                    ],
                                                    "default": "OPERATOR_UNSPECIFIED"
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "description": "Value to be compared with by the operator."
                                                  }
                                                },
                                                "title": "Condition describes the condition that must be validated by the network"
                                              },
                                              "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                            }
                                          },
                                          "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                        },
                                        "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                      }
                                    },
                                    "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                  },
                                  "ethOracle": {
                                    "description": "Contains the data specification that is received from Ethereum sources.",
                                    "type": "object",
                                    "properties": {
                                      "address": {
                                        "type": "string",
                                        "description": "Ethereum address of the contract to call."
                                      },
                                      "abi": {
                                        "type": "string",
                                        "description": "The ABI of that contract."
                                      },
                                      "method": {
                                        "type": "string",
                                        "description": "Name of the method on the contract to call."
                                      },
                                      "args": {
                                        "type": "array",
                                        "items": {
                                          "type": "object"
                                        },
                                        "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                      },
                                      "trigger": {
                                        "description": "Conditions for determining when to call the contract method.",
                                        "type": "object",
                                        "properties": {
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "initial": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                              },
                                              "every": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                              },
                                              "until": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                              }
                                            },
                                            "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                          }
                                        }
                                      },
                                      "requiredConfirmations": {
                                        "type": "string",
                                        "pattern": "^[0-9]{0,19}$",
                                        "title": "Number of confirmations required before the query is considered verified"
                                      },
                                      "filters": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "key": {
                                              "description": "Data source's data property key targeted by the filter.",
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "description": "Name of the property."
                                                },
                                                "type": {
                                                  "description": "Data type of the property.",
                                                  "type": "string",
                                                  "enum": [
                                                    "TYPE_UNSPECIFIED",
                                                    "TYPE_EMPTY",
                                                    "TYPE_INTEGER",
                                                    "TYPE_STRING",
                                                    "TYPE_BOOLEAN",
                                                    "TYPE_DECIMAL",
                                                    "TYPE_TIMESTAMP"
                                                  ],
                                                  "default": "TYPE_UNSPECIFIED"
                                                },
                                                "numberDecimalPlaces": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                }
                                              }
                                            },
                                            "conditions": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "operator": {
                                                    "description": "Type of comparison to make on the value.",
                                                    "type": "string",
                                                    "enum": [
                                                      "OPERATOR_UNSPECIFIED",
                                                      "OPERATOR_EQUALS",
                                                      "OPERATOR_GREATER_THAN",
                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                      "OPERATOR_LESS_THAN",
                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                    ],
                                                    "default": "OPERATOR_UNSPECIFIED"
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "description": "Value to be compared with by the operator."
                                                  }
                                                },
                                                "title": "Condition describes the condition that must be validated by the network"
                                              },
                                              "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                            }
                                          },
                                          "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                        },
                                        "title": "Filters the data returned from the contract method"
                                      },
                                      "normalisers": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "expression": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                      },
                                      "sourceChainId": {
                                        "type": "string",
                                        "pattern": "^[0-9]{0,19}$",
                                        "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                      }
                                    }
                                  }
                                },
                                "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                              }
                            },
                            "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                          },
                          "description": "Additional price sources to be used for internal composite price calculation."
                        },
                        "dataSourcesSpecBinding": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "priceSourceProperty": {
                                "type": "string",
                                "description": "The property name of price."
                              }
                            },
                            "description": "Describes which property of the data source data is to be\nused for price source."
                          },
                          "title": "List of each price source and its corresponding binding"
                        }
                      }
                    },
                    "tickSize": {
                      "type": "string",
                      "title": "The market tick size defines the minimum change in quote price for the market"
                    }
                  },
                  "title": "Configuration to update a futures market on Vega"
                }
              },
              "title": "Update an existing market on Vega"
            },
            "newMarket": {
              "description": "Proposal change for creating new futures market on Vega.",
              "type": "object",
              "properties": {
                "changes": {
                  "description": "Configuration of the new market.",
                  "type": "object",
                  "properties": {
                    "instrument": {
                      "description": "New futures market instrument configuration.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Instrument name."
                        },
                        "code": {
                          "type": "string",
                          "description": "Instrument code, human-readable shortcode used to describe the instrument."
                        },
                        "future": {
                          "description": "Future.",
                          "type": "object",
                          "properties": {
                            "settlementAsset": {
                              "type": "string",
                              "description": "Asset ID for the product's settlement asset."
                            },
                            "quoteName": {
                              "type": "string",
                              "description": "Product quote name."
                            },
                            "dataSourceSpecForSettlementData": {
                              "type": "object",
                              "properties": {
                                "internal": {
                                  "type": "object",
                                  "properties": {
                                    "time": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps should meet in order to be considered."
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps."
                                    },
                                    "timeTrigger": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps need to meet in order to be considered."
                                        },
                                        "triggers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "initial": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              },
                                              "every": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              }
                                            },
                                            "description": "Trigger for an internal time data source."
                                          },
                                          "title": "An internal time trigger"
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                    }
                                  },
                                  "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                },
                                "external": {
                                  "type": "object",
                                  "properties": {
                                    "oracle": {
                                      "type": "object",
                                      "properties": {
                                        "signers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "pubKey": {
                                                "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "ethAddress": {
                                                "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                        }
                                      },
                                      "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                    },
                                    "ethOracle": {
                                      "description": "Contains the data specification that is received from Ethereum sources.",
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "Ethereum address of the contract to call."
                                        },
                                        "abi": {
                                          "type": "string",
                                          "description": "The ABI of that contract."
                                        },
                                        "method": {
                                          "type": "string",
                                          "description": "Name of the method on the contract to call."
                                        },
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                        },
                                        "trigger": {
                                          "description": "Conditions for determining when to call the contract method.",
                                          "type": "object",
                                          "properties": {
                                            "timeTrigger": {
                                              "type": "object",
                                              "properties": {
                                                "initial": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                },
                                                "every": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                },
                                                "until": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                }
                                              },
                                              "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                            }
                                          }
                                        },
                                        "requiredConfirmations": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "title": "Number of confirmations required before the query is considered verified"
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "title": "Filters the data returned from the contract method"
                                        },
                                        "normalisers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "expression": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                        },
                                        "sourceChainId": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                        }
                                      }
                                    }
                                  },
                                  "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                }
                              },
                              "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                            },
                            "dataSourceSpecForTradingTermination": {
                              "type": "object",
                              "properties": {
                                "internal": {
                                  "type": "object",
                                  "properties": {
                                    "time": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps should meet in order to be considered."
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps."
                                    },
                                    "timeTrigger": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps need to meet in order to be considered."
                                        },
                                        "triggers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "initial": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              },
                                              "every": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              }
                                            },
                                            "description": "Trigger for an internal time data source."
                                          },
                                          "title": "An internal time trigger"
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                    }
                                  },
                                  "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                },
                                "external": {
                                  "type": "object",
                                  "properties": {
                                    "oracle": {
                                      "type": "object",
                                      "properties": {
                                        "signers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "pubKey": {
                                                "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "ethAddress": {
                                                "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                        }
                                      },
                                      "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                    },
                                    "ethOracle": {
                                      "description": "Contains the data specification that is received from Ethereum sources.",
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "Ethereum address of the contract to call."
                                        },
                                        "abi": {
                                          "type": "string",
                                          "description": "The ABI of that contract."
                                        },
                                        "method": {
                                          "type": "string",
                                          "description": "Name of the method on the contract to call."
                                        },
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                        },
                                        "trigger": {
                                          "description": "Conditions for determining when to call the contract method.",
                                          "type": "object",
                                          "properties": {
                                            "timeTrigger": {
                                              "type": "object",
                                              "properties": {
                                                "initial": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                },
                                                "every": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                },
                                                "until": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                }
                                              },
                                              "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                            }
                                          }
                                        },
                                        "requiredConfirmations": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "title": "Number of confirmations required before the query is considered verified"
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "title": "Filters the data returned from the contract method"
                                        },
                                        "normalisers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "expression": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                        },
                                        "sourceChainId": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                        }
                                      }
                                    }
                                  },
                                  "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                }
                              },
                              "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                            },
                            "dataSourceSpecBinding": {
                              "description": "Binding between the data source spec and the settlement data.",
                              "type": "object",
                              "properties": {
                                "settlementDataProperty": {
                                  "type": "string",
                                  "description": "Name of the property in the source data that should be used as settlement data.\nIf it is set to \"prices.BTC.value\", then the Future will use the value of\nthis property as settlement data."
                                },
                                "tradingTerminationProperty": {
                                  "type": "string",
                                  "description": "Name of the property in the data source data that signals termination of trading."
                                }
                              },
                              "title": "DataSourceSpecToFutureBinding describes which property of the data source data is to be\nused as settlement data and which to use as the trading terminated trigger"
                            }
                          },
                          "title": "Future product configuration"
                        },
                        "spot": {
                          "description": "Spot.",
                          "type": "object",
                          "properties": {
                            "baseAsset": {
                              "type": "string",
                              "description": "Base asset ID."
                            },
                            "quoteAsset": {
                              "type": "string",
                              "description": "Quote asset ID."
                            },
                            "name": {
                              "type": "string",
                              "description": "Product name."
                            }
                          },
                          "title": "Spot product configuration"
                        },
                        "perpetual": {
                          "description": "Perpetual.",
                          "type": "object",
                          "properties": {
                            "settlementAsset": {
                              "type": "string",
                              "description": "Asset ID for the product's settlement asset."
                            },
                            "quoteName": {
                              "type": "string",
                              "description": "Product quote name."
                            },
                            "marginFundingFactor": {
                              "type": "string",
                              "description": "Controls how much the upcoming funding payment liability contributes to party's margin, in the range [0, 1]."
                            },
                            "interestRate": {
                              "type": "string",
                              "description": "Continuously compounded interest rate used in funding rate calculation, in the range [-1, 1]."
                            },
                            "clampLowerBound": {
                              "type": "string",
                              "description": "Lower bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1]."
                            },
                            "clampUpperBound": {
                              "type": "string",
                              "description": "Upper bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1]."
                            },
                            "dataSourceSpecForSettlementSchedule": {
                              "type": "object",
                              "properties": {
                                "internal": {
                                  "type": "object",
                                  "properties": {
                                    "time": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps should meet in order to be considered."
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps."
                                    },
                                    "timeTrigger": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps need to meet in order to be considered."
                                        },
                                        "triggers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "initial": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              },
                                              "every": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              }
                                            },
                                            "description": "Trigger for an internal time data source."
                                          },
                                          "title": "An internal time trigger"
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                    }
                                  },
                                  "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                },
                                "external": {
                                  "type": "object",
                                  "properties": {
                                    "oracle": {
                                      "type": "object",
                                      "properties": {
                                        "signers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "pubKey": {
                                                "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "ethAddress": {
                                                "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                        }
                                      },
                                      "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                    },
                                    "ethOracle": {
                                      "description": "Contains the data specification that is received from Ethereum sources.",
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "Ethereum address of the contract to call."
                                        },
                                        "abi": {
                                          "type": "string",
                                          "description": "The ABI of that contract."
                                        },
                                        "method": {
                                          "type": "string",
                                          "description": "Name of the method on the contract to call."
                                        },
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                        },
                                        "trigger": {
                                          "description": "Conditions for determining when to call the contract method.",
                                          "type": "object",
                                          "properties": {
                                            "timeTrigger": {
                                              "type": "object",
                                              "properties": {
                                                "initial": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                },
                                                "every": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                },
                                                "until": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                }
                                              },
                                              "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                            }
                                          }
                                        },
                                        "requiredConfirmations": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "title": "Number of confirmations required before the query is considered verified"
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "title": "Filters the data returned from the contract method"
                                        },
                                        "normalisers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "expression": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                        },
                                        "sourceChainId": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                        }
                                      }
                                    }
                                  },
                                  "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                }
                              },
                              "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                            },
                            "dataSourceSpecForSettlementData": {
                              "type": "object",
                              "properties": {
                                "internal": {
                                  "type": "object",
                                  "properties": {
                                    "time": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps should meet in order to be considered."
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps."
                                    },
                                    "timeTrigger": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps need to meet in order to be considered."
                                        },
                                        "triggers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "initial": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              },
                                              "every": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              }
                                            },
                                            "description": "Trigger for an internal time data source."
                                          },
                                          "title": "An internal time trigger"
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                    }
                                  },
                                  "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                },
                                "external": {
                                  "type": "object",
                                  "properties": {
                                    "oracle": {
                                      "type": "object",
                                      "properties": {
                                        "signers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "pubKey": {
                                                "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "ethAddress": {
                                                "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                        }
                                      },
                                      "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                    },
                                    "ethOracle": {
                                      "description": "Contains the data specification that is received from Ethereum sources.",
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "Ethereum address of the contract to call."
                                        },
                                        "abi": {
                                          "type": "string",
                                          "description": "The ABI of that contract."
                                        },
                                        "method": {
                                          "type": "string",
                                          "description": "Name of the method on the contract to call."
                                        },
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                        },
                                        "trigger": {
                                          "description": "Conditions for determining when to call the contract method.",
                                          "type": "object",
                                          "properties": {
                                            "timeTrigger": {
                                              "type": "object",
                                              "properties": {
                                                "initial": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                },
                                                "every": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                },
                                                "until": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                }
                                              },
                                              "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                            }
                                          }
                                        },
                                        "requiredConfirmations": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "title": "Number of confirmations required before the query is considered verified"
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "title": "Filters the data returned from the contract method"
                                        },
                                        "normalisers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "expression": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                        },
                                        "sourceChainId": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                        }
                                      }
                                    }
                                  },
                                  "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                }
                              },
                              "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                            },
                            "dataSourceSpecBinding": {
                              "description": "Binding between the data source spec and the settlement data.",
                              "type": "object",
                              "properties": {
                                "settlementDataProperty": {
                                  "type": "string",
                                  "description": "Name of the property in the source data that should be used for settlement data.\nIf it is set to \"prices.BTC.value\" for example, then the perpetual market will use the value of\nthis property to get settlement data."
                                },
                                "settlementScheduleProperty": {
                                  "type": "string",
                                  "description": "Name of the property in the source data that should be used to determine the perpetual's settlement schedule."
                                }
                              }
                            },
                            "fundingRateScalingFactor": {
                              "type": "string",
                              "description": "Factor applied to funding-rates. This scales the impact that spot price deviations have on funding payments."
                            },
                            "fundingRateLowerBound": {
                              "type": "string",
                              "description": "Lower bound for the funding-rate such that the funding-rate will never be lower than this value."
                            },
                            "fundingRateUpperBound": {
                              "type": "string",
                              "description": "Upper bound for the funding-rate such that the funding-rate will never be higher than this value."
                            },
                            "internalCompositePriceConfiguration": {
                              "description": "Composite price configuration to drive the calculation of the internal composite price used for funding payments. If undefined the default mark price of the market is used.",
                              "type": "object",
                              "properties": {
                                "decayWeight": {
                                  "type": "string",
                                  "description": "Decay weight used for calculation of mark price."
                                },
                                "decayPower": {
                                  "type": "string",
                                  "pattern": "^[0-9]{0,19}$",
                                  "description": "Decay power used for the calculation of mark price."
                                },
                                "cashAmount": {
                                  "type": "string",
                                  "description": "Cash amount, in asset decimals, used for the calculation of the mark price from the order book."
                                },
                                "sourceWeights": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "Weights for each composite price data source."
                                },
                                "sourceStalenessTolerance": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "For how long a price source is considered valid. One entry for each data source\nsuch that the first is for the trade based mark price, the second is for the book based price\nthe third is for the first oracle, followed by more oracle data source staleness tolerance."
                                },
                                "compositePriceType": {
                                  "description": "Which method is used for the calculation of the composite price for the market.",
                                  "type": "string",
                                  "enum": [
                                    "COMPOSITE_PRICE_TYPE_UNSPECIFIED",
                                    "COMPOSITE_PRICE_TYPE_WEIGHTED",
                                    "COMPOSITE_PRICE_TYPE_MEDIAN",
                                    "COMPOSITE_PRICE_TYPE_LAST_TRADE"
                                  ],
                                  "default": "COMPOSITE_PRICE_TYPE_UNSPECIFIED"
                                },
                                "dataSourcesSpec": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    },
                                    "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                  },
                                  "description": "Additional price sources to be used for internal composite price calculation."
                                },
                                "dataSourcesSpecBinding": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "priceSourceProperty": {
                                        "type": "string",
                                        "description": "The property name of price."
                                      }
                                    },
                                    "description": "Describes which property of the data source data is to be\nused for price source."
                                  },
                                  "title": "List of each price source and its corresponding binding"
                                }
                              }
                            }
                          },
                          "title": "Perpetual product configuration"
                        }
                      },
                      "title": "Instrument configuration"
                    },
                    "decimalPlaces": {
                      "type": "string",
                      "pattern": "^[0-9]{0,19}$",
                      "description": "Decimal places used for the new futures market, sets the smallest price increment on the book."
                    },
                    "metadata": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Optional new futures market metadata, tags."
                    },
                    "priceMonitoringParameters": {
                      "description": "Price monitoring parameters.",
                      "type": "object",
                      "properties": {
                        "triggers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "horizon": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Price monitoring projection horizon τ in seconds.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              },
                              "probability": {
                                "type": "string",
                                "description": "Price monitoring probability level p."
                              },
                              "auctionExtension": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Price monitoring auction extension duration in seconds should the price\nbreach its theoretical level over the specified horizon at the specified\nprobability level.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              }
                            },
                            "title": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration"
                          }
                        }
                      },
                      "title": "PriceMonitoringParameters contains a collection of triggers to be used for a given market"
                    },
                    "liquidityMonitoringParameters": {
                      "description": "Liquidity monitoring parameters.",
                      "type": "object",
                      "properties": {
                        "targetStakeParameters": {
                          "description": "Specifies parameters related to target stake calculation.",
                          "type": "object",
                          "properties": {
                            "timeWindow": {
                              "type": "string",
                              "pattern": "^[0-9]{0,19}$",
                              "description": "Specifies length of time window expressed in seconds for target stake calculation.",
                              "minimum": -9223372036854776000,
                              "maximum": 9223372036854776000
                            },
                            "scalingFactor": {
                              "type": "number",
                              "pattern": "^[-]?+(.[0-9]+)?$",
                              "description": "Specifies scaling factors used in target stake calculation.",
                              "minimum": -1.7976931348623157e+308,
                              "maximum": 1.7976931348623157e+308
                            }
                          },
                          "title": "TargetStakeParameters contains parameters used in target stake calculation"
                        },
                        "triggeringRatio": {
                          "type": "string",
                          "description": "Specifies the triggering ratio for entering liquidity auction."
                        },
                        "auctionExtension": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction.",
                          "minimum": -9223372036854776000,
                          "maximum": 9223372036854776000
                        }
                      },
                      "title": "LiquidityMonitoringParameters contains settings used for liquidity monitoring"
                    },
                    "simple": {
                      "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected.",
                      "type": "object",
                      "properties": {
                        "factorLong": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined risk factor value for long.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "factorShort": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined risk factor value for short.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "maxMoveUp": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined maximum price move up that the model considers as valid.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "minMoveDown": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined minimum price move down that the model considers as valid.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "probabilityOfTrading": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined constant probability of trading.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        }
                      },
                      "title": "Risk model parameters for simple modelling"
                    },
                    "logNormal": {
                      "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.",
                      "type": "object",
                      "properties": {
                        "riskAversionParameter": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Risk Aversion Parameter.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "tau": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Tau parameter of the risk model, projection horizon measured as a year fraction used in the expected shortfall\ncalculation to obtain the maintenance margin, must be a strictly non-negative real number.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "params": {
                          "description": "Risk model parameters for log normal.",
                          "type": "object",
                          "properties": {
                            "mu": {
                              "type": "number",
                              "pattern": "^[-]?+(.[0-9]+)?$",
                              "description": "Mu parameter, annualised growth rate of the underlying asset.",
                              "minimum": -1.7976931348623157e+308,
                              "maximum": 1.7976931348623157e+308
                            },
                            "r": {
                              "type": "number",
                              "pattern": "^[-]?+(.[0-9]+)?$",
                              "description": "R parameter, annualised growth rate of the risk-free asset, used for discounting of future cash flows, can be any real number.",
                              "minimum": -1.7976931348623157e+308,
                              "maximum": 1.7976931348623157e+308
                            },
                            "sigma": {
                              "type": "number",
                              "pattern": "^[-]?+(.[0-9]+)?$",
                              "description": "Sigma parameter, annualised volatility of the underlying asset, must be a strictly non-negative real number.",
                              "minimum": -1.7976931348623157e+308,
                              "maximum": 1.7976931348623157e+308
                            }
                          },
                          "title": "Risk model parameters for log normal"
                        }
                      },
                      "title": "Risk model for log normal"
                    },
                    "positionDecimalPlaces": {
                      "type": "string",
                      "pattern": "^[0-9]{0,19}$",
                      "description": "Decimal places for order sizes, sets what size the smallest order / position on the futures market can be.",
                      "minimum": -9223372036854776000,
                      "maximum": 9223372036854776000
                    },
                    "lpPriceRange": {
                      "type": "string",
                      "description": "DEPRECATED: Use liquidity SLA parameters instead.\nPercentage move up and down from the mid price which specifies the range of\nprice levels over which automated liquidity provisions will be deployed."
                    },
                    "linearSlippageFactor": {
                      "type": "string",
                      "description": "Linear slippage factor is used to cap the slippage component of maintenance margin - it is applied to the slippage volume."
                    },
                    "quadraticSlippageFactor": {
                      "type": "string",
                      "description": "Quadratic slippage factor is used to cap the slippage component of maintenance margin - it is applied to the square of the slippage volume."
                    },
                    "successor": {
                      "description": "Successor configuration. If this proposal is meant to succeed a given market, then this should be set.",
                      "type": "object",
                      "properties": {
                        "parentMarketId": {
                          "type": "string",
                          "description": "ID of the market that the successor should take over from."
                        },
                        "insurancePoolFraction": {
                          "type": "string",
                          "description": "A decimal value between or equal to 0 and 1, specifying the fraction of the insurance pool balance that is carried over from the parent market to the successor."
                        }
                      }
                    },
                    "liquiditySlaParameters": {
                      "title": "Liquidity SLA parameters",
                      "type": "object",
                      "properties": {
                        "priceRange": {
                          "type": "string"
                        },
                        "commitmentMinTimeFraction": {
                          "type": "string",
                          "description": "Specifies the minimum fraction of time LPs must spend \"on the book\" providing their committed liquidity."
                        },
                        "performanceHysteresisEpochs": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Specifies the number of liquidity epochs over which past performance will continue to affect rewards."
                        },
                        "slaCompetitionFactor": {
                          "type": "string",
                          "description": "Specifies the maximum fraction of their accrued fees an LP that meets the SLA implied by market.liquidity.commitmentMinTimeFraction will lose to liquidity providers\nthat achieved a higher SLA performance than them."
                        }
                      }
                    },
                    "liquidityFeeSettings": {
                      "description": "Specifies how the liquidity fee for the market will be calculated.",
                      "type": "object",
                      "properties": {
                        "method": {
                          "description": "Method used to calculate the market's liquidity fee.",
                          "type": "string",
                          "enum": [
                            "METHOD_UNSPECIFIED",
                            "METHOD_MARGINAL_COST",
                            "METHOD_WEIGHTED_AVERAGE",
                            "METHOD_CONSTANT"
                          ],
                          "default": "METHOD_UNSPECIFIED"
                        },
                        "feeConstant": {
                          "type": "string",
                          "description": "Constant liquidity fee used when using the constant fee method."
                        }
                      }
                    },
                    "liquidationStrategy": {
                      "description": "Liquidation strategy for this market.",
                      "type": "object",
                      "properties": {
                        "disposalTimeStep": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Interval, in seconds, at which the network will attempt to close its position.",
                          "minimum": -9223372036854776000,
                          "maximum": 9223372036854776000
                        },
                        "disposalFraction": {
                          "type": "string",
                          "description": "Fraction of the open position the market will try to close in a single attempt; range 0 through 1."
                        },
                        "fullDisposalSize": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Size of the position that the network will try to close in a single attempt."
                        },
                        "maxFractionConsumed": {
                          "type": "string",
                          "description": "Max fraction of the total volume of the orderbook, within liquidity bounds, that the network can use to close its position; range 0 through 1."
                        }
                      }
                    },
                    "markPriceConfiguration": {
                      "description": "Mark price configuration.",
                      "type": "object",
                      "properties": {
                        "decayWeight": {
                          "type": "string",
                          "description": "Decay weight used for calculation of mark price."
                        },
                        "decayPower": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Decay power used for the calculation of mark price."
                        },
                        "cashAmount": {
                          "type": "string",
                          "description": "Cash amount, in asset decimals, used for the calculation of the mark price from the order book."
                        },
                        "sourceWeights": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Weights for each composite price data source."
                        },
                        "sourceStalenessTolerance": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "For how long a price source is considered valid. One entry for each data source\nsuch that the first is for the trade based mark price, the second is for the book based price\nthe third is for the first oracle, followed by more oracle data source staleness tolerance."
                        },
                        "compositePriceType": {
                          "description": "Which method is used for the calculation of the composite price for the market.",
                          "type": "string",
                          "enum": [
                            "COMPOSITE_PRICE_TYPE_UNSPECIFIED",
                            "COMPOSITE_PRICE_TYPE_WEIGHTED",
                            "COMPOSITE_PRICE_TYPE_MEDIAN",
                            "COMPOSITE_PRICE_TYPE_LAST_TRADE"
                          ],
                          "default": "COMPOSITE_PRICE_TYPE_UNSPECIFIED"
                        },
                        "dataSourcesSpec": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "internal": {
                                "type": "object",
                                "properties": {
                                  "time": {
                                    "type": "object",
                                    "properties": {
                                      "conditions": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "operator": {
                                              "description": "Type of comparison to make on the value.",
                                              "type": "string",
                                              "enum": [
                                                "OPERATOR_UNSPECIFIED",
                                                "OPERATOR_EQUALS",
                                                "OPERATOR_GREATER_THAN",
                                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                "OPERATOR_LESS_THAN",
                                                "OPERATOR_LESS_THAN_OR_EQUAL"
                                              ],
                                              "default": "OPERATOR_UNSPECIFIED"
                                            },
                                            "value": {
                                              "type": "string",
                                              "description": "Value to be compared with by the operator."
                                            }
                                          },
                                          "title": "Condition describes the condition that must be validated by the network"
                                        },
                                        "description": "Conditions that the timestamps should meet in order to be considered."
                                      }
                                    },
                                    "description": "Internal data source used for emitting timestamps."
                                  },
                                  "timeTrigger": {
                                    "type": "object",
                                    "properties": {
                                      "conditions": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "operator": {
                                              "description": "Type of comparison to make on the value.",
                                              "type": "string",
                                              "enum": [
                                                "OPERATOR_UNSPECIFIED",
                                                "OPERATOR_EQUALS",
                                                "OPERATOR_GREATER_THAN",
                                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                "OPERATOR_LESS_THAN",
                                                "OPERATOR_LESS_THAN_OR_EQUAL"
                                              ],
                                              "default": "OPERATOR_UNSPECIFIED"
                                            },
                                            "value": {
                                              "type": "string",
                                              "description": "Value to be compared with by the operator."
                                            }
                                          },
                                          "title": "Condition describes the condition that must be validated by the network"
                                        },
                                        "description": "Conditions that the timestamps need to meet in order to be considered."
                                      },
                                      "triggers": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "initial": {
                                              "type": "string",
                                              "pattern": "^[0-9]{0,19}$",
                                              "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                              "minimum": -9223372036854776000,
                                              "maximum": 9223372036854776000
                                            },
                                            "every": {
                                              "type": "string",
                                              "pattern": "^[0-9]{0,19}$",
                                              "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                              "minimum": -9223372036854776000,
                                              "maximum": 9223372036854776000
                                            }
                                          },
                                          "description": "Trigger for an internal time data source."
                                        },
                                        "title": "An internal time trigger"
                                      }
                                    },
                                    "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                  }
                                },
                                "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                              },
                              "external": {
                                "type": "object",
                                "properties": {
                                  "oracle": {
                                    "type": "object",
                                    "properties": {
                                      "signers": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "pubKey": {
                                              "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                              "type": "object",
                                              "properties": {
                                                "key": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "ethAddress": {
                                              "description": "In case of an open oracle - Ethereum address will be submitted.",
                                              "type": "object",
                                              "properties": {
                                                "address": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                      },
                                      "filters": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "key": {
                                              "description": "Data source's data property key targeted by the filter.",
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "description": "Name of the property."
                                                },
                                                "type": {
                                                  "description": "Data type of the property.",
                                                  "type": "string",
                                                  "enum": [
                                                    "TYPE_UNSPECIFIED",
                                                    "TYPE_EMPTY",
                                                    "TYPE_INTEGER",
                                                    "TYPE_STRING",
                                                    "TYPE_BOOLEAN",
                                                    "TYPE_DECIMAL",
                                                    "TYPE_TIMESTAMP"
                                                  ],
                                                  "default": "TYPE_UNSPECIFIED"
                                                },
                                                "numberDecimalPlaces": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                }
                                              }
                                            },
                                            "conditions": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "operator": {
                                                    "description": "Type of comparison to make on the value.",
                                                    "type": "string",
                                                    "enum": [
                                                      "OPERATOR_UNSPECIFIED",
                                                      "OPERATOR_EQUALS",
                                                      "OPERATOR_GREATER_THAN",
                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                      "OPERATOR_LESS_THAN",
                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                    ],
                                                    "default": "OPERATOR_UNSPECIFIED"
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "description": "Value to be compared with by the operator."
                                                  }
                                                },
                                                "title": "Condition describes the condition that must be validated by the network"
                                              },
                                              "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                            }
                                          },
                                          "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                        },
                                        "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                      }
                                    },
                                    "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                  },
                                  "ethOracle": {
                                    "description": "Contains the data specification that is received from Ethereum sources.",
                                    "type": "object",
                                    "properties": {
                                      "address": {
                                        "type": "string",
                                        "description": "Ethereum address of the contract to call."
                                      },
                                      "abi": {
                                        "type": "string",
                                        "description": "The ABI of that contract."
                                      },
                                      "method": {
                                        "type": "string",
                                        "description": "Name of the method on the contract to call."
                                      },
                                      "args": {
                                        "type": "array",
                                        "items": {
                                          "type": "object"
                                        },
                                        "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                      },
                                      "trigger": {
                                        "description": "Conditions for determining when to call the contract method.",
                                        "type": "object",
                                        "properties": {
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "initial": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                              },
                                              "every": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                              },
                                              "until": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                              }
                                            },
                                            "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                          }
                                        }
                                      },
                                      "requiredConfirmations": {
                                        "type": "string",
                                        "pattern": "^[0-9]{0,19}$",
                                        "title": "Number of confirmations required before the query is considered verified"
                                      },
                                      "filters": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "key": {
                                              "description": "Data source's data property key targeted by the filter.",
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "description": "Name of the property."
                                                },
                                                "type": {
                                                  "description": "Data type of the property.",
                                                  "type": "string",
                                                  "enum": [
                                                    "TYPE_UNSPECIFIED",
                                                    "TYPE_EMPTY",
                                                    "TYPE_INTEGER",
                                                    "TYPE_STRING",
                                                    "TYPE_BOOLEAN",
                                                    "TYPE_DECIMAL",
                                                    "TYPE_TIMESTAMP"
                                                  ],
                                                  "default": "TYPE_UNSPECIFIED"
                                                },
                                                "numberDecimalPlaces": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                }
                                              }
                                            },
                                            "conditions": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "operator": {
                                                    "description": "Type of comparison to make on the value.",
                                                    "type": "string",
                                                    "enum": [
                                                      "OPERATOR_UNSPECIFIED",
                                                      "OPERATOR_EQUALS",
                                                      "OPERATOR_GREATER_THAN",
                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                      "OPERATOR_LESS_THAN",
                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                    ],
                                                    "default": "OPERATOR_UNSPECIFIED"
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "description": "Value to be compared with by the operator."
                                                  }
                                                },
                                                "title": "Condition describes the condition that must be validated by the network"
                                              },
                                              "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                            }
                                          },
                                          "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                        },
                                        "title": "Filters the data returned from the contract method"
                                      },
                                      "normalisers": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "expression": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                      },
                                      "sourceChainId": {
                                        "type": "string",
                                        "pattern": "^[0-9]{0,19}$",
                                        "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                      }
                                    }
                                  }
                                },
                                "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                              }
                            },
                            "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                          },
                          "description": "Additional price sources to be used for internal composite price calculation."
                        },
                        "dataSourcesSpecBinding": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "priceSourceProperty": {
                                "type": "string",
                                "description": "The property name of price."
                              }
                            },
                            "description": "Describes which property of the data source data is to be\nused for price source."
                          },
                          "title": "List of each price source and its corresponding binding"
                        }
                      }
                    },
                    "tickSize": {
                      "type": "string",
                      "title": "The market tick size defines the minimum change in quote price for the market"
                    }
                  },
                  "title": "Configuration for a new futures market on Vega"
                }
              },
              "title": "New market on Vega"
            },
            "updateNetworkParameter": {
              "description": "Proposal change for updating Vega network parameters.",
              "type": "object",
              "properties": {
                "changes": {
                  "description": "The network parameter to update.",
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "Unique key of the network parameter."
                    },
                    "value": {
                      "type": "string",
                      "description": "Value for the network parameter."
                    }
                  },
                  "title": "Represents a network parameter on Vega"
                }
              },
              "title": "Update network configuration on Vega"
            },
            "newAsset": {
              "description": "Proposal change for creating new assets on Vega.",
              "type": "object",
              "properties": {
                "changes": {
                  "description": "Configuration of the new asset.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the asset (e.g: Great British Pound)."
                    },
                    "symbol": {
                      "type": "string",
                      "description": "Symbol of the asset (e.g: GBP)."
                    },
                    "decimals": {
                      "type": "string",
                      "pattern": "^[0-9]{0,19}$",
                      "description": "Number of decimal / precision handled by this asset."
                    },
                    "quantum": {
                      "type": "string",
                      "description": "Minimum economically meaningful amount in the asset."
                    },
                    "builtinAsset": {
                      "description": "Vega built-in asset.",
                      "type": "object",
                      "properties": {
                        "maxFaucetAmountMint": {
                          "type": "string",
                          "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time."
                        }
                      },
                      "title": "Vega internal asset"
                    },
                    "erc20": {
                      "description": "Ethereum ERC20 asset.",
                      "type": "object",
                      "properties": {
                        "contractAddress": {
                          "type": "string",
                          "description": "Address of the contract for the token, on the ethereum network."
                        },
                        "lifetimeLimit": {
                          "type": "string",
                          "description": "Lifetime limits deposit per address\nnote: this is a temporary measure that can be changed by governance."
                        },
                        "withdrawThreshold": {
                          "type": "string",
                          "description": "Maximum you can withdraw instantly. All withdrawals over the threshold will be delayed by the withdrawal delay.\nThere’s no limit on the size of a withdrawal\nnote: this is a temporary measure that can be changed by governance."
                        }
                      },
                      "title": "ERC20 token based asset, living on the ethereum network"
                    }
                  },
                  "title": "Vega representation of an external asset"
                }
              },
              "title": "New asset on Vega"
            },
            "newFreeform": {
              "description": "Proposal change for a freeform request, which can be voted on but does not change the behaviour of the system,\nand can be used to gauge community sentiment.",
              "type": "object"
            },
            "updateAsset": {
              "description": "Proposal change for updating an asset.",
              "type": "object",
              "properties": {
                "assetId": {
                  "type": "string",
                  "description": "Asset ID the update is for."
                },
                "changes": {
                  "description": "Changes to apply on an existing asset.",
                  "type": "object",
                  "properties": {
                    "quantum": {
                      "type": "string",
                      "description": "Minimum economically meaningful amount in the asset."
                    },
                    "erc20": {
                      "description": "Ethereum ERC20 asset update.",
                      "type": "object",
                      "properties": {
                        "lifetimeLimit": {
                          "type": "string",
                          "description": "Lifetime limits deposit per address.\nThis will be interpreted against the asset decimals.\nnote: this is a temporary measure that can be changed by governance."
                        },
                        "withdrawThreshold": {
                          "type": "string",
                          "description": "Maximum you can withdraw instantly. All withdrawals over the threshold will be delayed by the withdrawal delay.\nThere’s no limit on the size of a withdrawal\nnote: this is a temporary measure that can be changed by governance."
                        }
                      }
                    }
                  }
                }
              },
              "title": "Update an existing asset on Vega"
            },
            "newSpotMarket": {
              "description": "Proposal change for creating new spot market on Vega.",
              "type": "object",
              "properties": {
                "changes": {
                  "description": "Configuration of the new spot market.",
                  "type": "object",
                  "properties": {
                    "instrument": {
                      "description": "New spot market instrument configuration.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Instrument name."
                        },
                        "code": {
                          "type": "string",
                          "description": "Instrument code, human-readable shortcode used to describe the instrument."
                        },
                        "future": {
                          "description": "Future.",
                          "type": "object",
                          "properties": {
                            "settlementAsset": {
                              "type": "string",
                              "description": "Asset ID for the product's settlement asset."
                            },
                            "quoteName": {
                              "type": "string",
                              "description": "Product quote name."
                            },
                            "dataSourceSpecForSettlementData": {
                              "type": "object",
                              "properties": {
                                "internal": {
                                  "type": "object",
                                  "properties": {
                                    "time": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps should meet in order to be considered."
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps."
                                    },
                                    "timeTrigger": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps need to meet in order to be considered."
                                        },
                                        "triggers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "initial": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              },
                                              "every": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              }
                                            },
                                            "description": "Trigger for an internal time data source."
                                          },
                                          "title": "An internal time trigger"
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                    }
                                  },
                                  "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                },
                                "external": {
                                  "type": "object",
                                  "properties": {
                                    "oracle": {
                                      "type": "object",
                                      "properties": {
                                        "signers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "pubKey": {
                                                "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "ethAddress": {
                                                "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                        }
                                      },
                                      "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                    },
                                    "ethOracle": {
                                      "description": "Contains the data specification that is received from Ethereum sources.",
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "Ethereum address of the contract to call."
                                        },
                                        "abi": {
                                          "type": "string",
                                          "description": "The ABI of that contract."
                                        },
                                        "method": {
                                          "type": "string",
                                          "description": "Name of the method on the contract to call."
                                        },
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                        },
                                        "trigger": {
                                          "description": "Conditions for determining when to call the contract method.",
                                          "type": "object",
                                          "properties": {
                                            "timeTrigger": {
                                              "type": "object",
                                              "properties": {
                                                "initial": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                },
                                                "every": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                },
                                                "until": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                }
                                              },
                                              "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                            }
                                          }
                                        },
                                        "requiredConfirmations": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "title": "Number of confirmations required before the query is considered verified"
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "title": "Filters the data returned from the contract method"
                                        },
                                        "normalisers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "expression": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                        },
                                        "sourceChainId": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                        }
                                      }
                                    }
                                  },
                                  "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                }
                              },
                              "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                            },
                            "dataSourceSpecForTradingTermination": {
                              "type": "object",
                              "properties": {
                                "internal": {
                                  "type": "object",
                                  "properties": {
                                    "time": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps should meet in order to be considered."
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps."
                                    },
                                    "timeTrigger": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps need to meet in order to be considered."
                                        },
                                        "triggers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "initial": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              },
                                              "every": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              }
                                            },
                                            "description": "Trigger for an internal time data source."
                                          },
                                          "title": "An internal time trigger"
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                    }
                                  },
                                  "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                },
                                "external": {
                                  "type": "object",
                                  "properties": {
                                    "oracle": {
                                      "type": "object",
                                      "properties": {
                                        "signers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "pubKey": {
                                                "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "ethAddress": {
                                                "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                        }
                                      },
                                      "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                    },
                                    "ethOracle": {
                                      "description": "Contains the data specification that is received from Ethereum sources.",
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "Ethereum address of the contract to call."
                                        },
                                        "abi": {
                                          "type": "string",
                                          "description": "The ABI of that contract."
                                        },
                                        "method": {
                                          "type": "string",
                                          "description": "Name of the method on the contract to call."
                                        },
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                        },
                                        "trigger": {
                                          "description": "Conditions for determining when to call the contract method.",
                                          "type": "object",
                                          "properties": {
                                            "timeTrigger": {
                                              "type": "object",
                                              "properties": {
                                                "initial": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                },
                                                "every": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                },
                                                "until": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                }
                                              },
                                              "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                            }
                                          }
                                        },
                                        "requiredConfirmations": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "title": "Number of confirmations required before the query is considered verified"
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "title": "Filters the data returned from the contract method"
                                        },
                                        "normalisers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "expression": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                        },
                                        "sourceChainId": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                        }
                                      }
                                    }
                                  },
                                  "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                }
                              },
                              "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                            },
                            "dataSourceSpecBinding": {
                              "description": "Binding between the data source spec and the settlement data.",
                              "type": "object",
                              "properties": {
                                "settlementDataProperty": {
                                  "type": "string",
                                  "description": "Name of the property in the source data that should be used as settlement data.\nIf it is set to \"prices.BTC.value\", then the Future will use the value of\nthis property as settlement data."
                                },
                                "tradingTerminationProperty": {
                                  "type": "string",
                                  "description": "Name of the property in the data source data that signals termination of trading."
                                }
                              },
                              "title": "DataSourceSpecToFutureBinding describes which property of the data source data is to be\nused as settlement data and which to use as the trading terminated trigger"
                            }
                          },
                          "title": "Future product configuration"
                        },
                        "spot": {
                          "description": "Spot.",
                          "type": "object",
                          "properties": {
                            "baseAsset": {
                              "type": "string",
                              "description": "Base asset ID."
                            },
                            "quoteAsset": {
                              "type": "string",
                              "description": "Quote asset ID."
                            },
                            "name": {
                              "type": "string",
                              "description": "Product name."
                            }
                          },
                          "title": "Spot product configuration"
                        },
                        "perpetual": {
                          "description": "Perpetual.",
                          "type": "object",
                          "properties": {
                            "settlementAsset": {
                              "type": "string",
                              "description": "Asset ID for the product's settlement asset."
                            },
                            "quoteName": {
                              "type": "string",
                              "description": "Product quote name."
                            },
                            "marginFundingFactor": {
                              "type": "string",
                              "description": "Controls how much the upcoming funding payment liability contributes to party's margin, in the range [0, 1]."
                            },
                            "interestRate": {
                              "type": "string",
                              "description": "Continuously compounded interest rate used in funding rate calculation, in the range [-1, 1]."
                            },
                            "clampLowerBound": {
                              "type": "string",
                              "description": "Lower bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1]."
                            },
                            "clampUpperBound": {
                              "type": "string",
                              "description": "Upper bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1]."
                            },
                            "dataSourceSpecForSettlementSchedule": {
                              "type": "object",
                              "properties": {
                                "internal": {
                                  "type": "object",
                                  "properties": {
                                    "time": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps should meet in order to be considered."
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps."
                                    },
                                    "timeTrigger": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps need to meet in order to be considered."
                                        },
                                        "triggers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "initial": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              },
                                              "every": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              }
                                            },
                                            "description": "Trigger for an internal time data source."
                                          },
                                          "title": "An internal time trigger"
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                    }
                                  },
                                  "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                },
                                "external": {
                                  "type": "object",
                                  "properties": {
                                    "oracle": {
                                      "type": "object",
                                      "properties": {
                                        "signers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "pubKey": {
                                                "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "ethAddress": {
                                                "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                        }
                                      },
                                      "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                    },
                                    "ethOracle": {
                                      "description": "Contains the data specification that is received from Ethereum sources.",
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "Ethereum address of the contract to call."
                                        },
                                        "abi": {
                                          "type": "string",
                                          "description": "The ABI of that contract."
                                        },
                                        "method": {
                                          "type": "string",
                                          "description": "Name of the method on the contract to call."
                                        },
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                        },
                                        "trigger": {
                                          "description": "Conditions for determining when to call the contract method.",
                                          "type": "object",
                                          "properties": {
                                            "timeTrigger": {
                                              "type": "object",
                                              "properties": {
                                                "initial": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                },
                                                "every": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                },
                                                "until": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                }
                                              },
                                              "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                            }
                                          }
                                        },
                                        "requiredConfirmations": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "title": "Number of confirmations required before the query is considered verified"
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "title": "Filters the data returned from the contract method"
                                        },
                                        "normalisers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "expression": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                        },
                                        "sourceChainId": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                        }
                                      }
                                    }
                                  },
                                  "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                }
                              },
                              "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                            },
                            "dataSourceSpecForSettlementData": {
                              "type": "object",
                              "properties": {
                                "internal": {
                                  "type": "object",
                                  "properties": {
                                    "time": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps should meet in order to be considered."
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps."
                                    },
                                    "timeTrigger": {
                                      "type": "object",
                                      "properties": {
                                        "conditions": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "operator": {
                                                "description": "Type of comparison to make on the value.",
                                                "type": "string",
                                                "enum": [
                                                  "OPERATOR_UNSPECIFIED",
                                                  "OPERATOR_EQUALS",
                                                  "OPERATOR_GREATER_THAN",
                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                  "OPERATOR_LESS_THAN",
                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                ],
                                                "default": "OPERATOR_UNSPECIFIED"
                                              },
                                              "value": {
                                                "type": "string",
                                                "description": "Value to be compared with by the operator."
                                              }
                                            },
                                            "title": "Condition describes the condition that must be validated by the network"
                                          },
                                          "description": "Conditions that the timestamps need to meet in order to be considered."
                                        },
                                        "triggers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "initial": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              },
                                              "every": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                "minimum": -9223372036854776000,
                                                "maximum": 9223372036854776000
                                              }
                                            },
                                            "description": "Trigger for an internal time data source."
                                          },
                                          "title": "An internal time trigger"
                                        }
                                      },
                                      "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                    }
                                  },
                                  "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                },
                                "external": {
                                  "type": "object",
                                  "properties": {
                                    "oracle": {
                                      "type": "object",
                                      "properties": {
                                        "signers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "pubKey": {
                                                "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "ethAddress": {
                                                "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                        }
                                      },
                                      "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                    },
                                    "ethOracle": {
                                      "description": "Contains the data specification that is received from Ethereum sources.",
                                      "type": "object",
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "description": "Ethereum address of the contract to call."
                                        },
                                        "abi": {
                                          "type": "string",
                                          "description": "The ABI of that contract."
                                        },
                                        "method": {
                                          "type": "string",
                                          "description": "Name of the method on the contract to call."
                                        },
                                        "args": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                        },
                                        "trigger": {
                                          "description": "Conditions for determining when to call the contract method.",
                                          "type": "object",
                                          "properties": {
                                            "timeTrigger": {
                                              "type": "object",
                                              "properties": {
                                                "initial": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                },
                                                "every": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                },
                                                "until": {
                                                  "type": "string",
                                                  "pattern": "^[0-9]{0,19}$",
                                                  "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                }
                                              },
                                              "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                            }
                                          }
                                        },
                                        "requiredConfirmations": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "title": "Number of confirmations required before the query is considered verified"
                                        },
                                        "filters": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "key": {
                                                "description": "Data source's data property key targeted by the filter.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the property."
                                                  },
                                                  "type": {
                                                    "description": "Data type of the property.",
                                                    "type": "string",
                                                    "enum": [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ],
                                                    "default": "TYPE_UNSPECIFIED"
                                                  },
                                                  "numberDecimalPlaces": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                  }
                                                }
                                              },
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                              }
                                            },
                                            "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                          },
                                          "title": "Filters the data returned from the contract method"
                                        },
                                        "normalisers": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string"
                                              },
                                              "expression": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                        },
                                        "sourceChainId": {
                                          "type": "string",
                                          "pattern": "^[0-9]{0,19}$",
                                          "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                        }
                                      }
                                    }
                                  },
                                  "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                }
                              },
                              "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                            },
                            "dataSourceSpecBinding": {
                              "description": "Binding between the data source spec and the settlement data.",
                              "type": "object",
                              "properties": {
                                "settlementDataProperty": {
                                  "type": "string",
                                  "description": "Name of the property in the source data that should be used for settlement data.\nIf it is set to \"prices.BTC.value\" for example, then the perpetual market will use the value of\nthis property to get settlement data."
                                },
                                "settlementScheduleProperty": {
                                  "type": "string",
                                  "description": "Name of the property in the source data that should be used to determine the perpetual's settlement schedule."
                                }
                              }
                            },
                            "fundingRateScalingFactor": {
                              "type": "string",
                              "description": "Factor applied to funding-rates. This scales the impact that spot price deviations have on funding payments."
                            },
                            "fundingRateLowerBound": {
                              "type": "string",
                              "description": "Lower bound for the funding-rate such that the funding-rate will never be lower than this value."
                            },
                            "fundingRateUpperBound": {
                              "type": "string",
                              "description": "Upper bound for the funding-rate such that the funding-rate will never be higher than this value."
                            },
                            "internalCompositePriceConfiguration": {
                              "description": "Composite price configuration to drive the calculation of the internal composite price used for funding payments. If undefined the default mark price of the market is used.",
                              "type": "object",
                              "properties": {
                                "decayWeight": {
                                  "type": "string",
                                  "description": "Decay weight used for calculation of mark price."
                                },
                                "decayPower": {
                                  "type": "string",
                                  "pattern": "^[0-9]{0,19}$",
                                  "description": "Decay power used for the calculation of mark price."
                                },
                                "cashAmount": {
                                  "type": "string",
                                  "description": "Cash amount, in asset decimals, used for the calculation of the mark price from the order book."
                                },
                                "sourceWeights": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "Weights for each composite price data source."
                                },
                                "sourceStalenessTolerance": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "For how long a price source is considered valid. One entry for each data source\nsuch that the first is for the trade based mark price, the second is for the book based price\nthe third is for the first oracle, followed by more oracle data source staleness tolerance."
                                },
                                "compositePriceType": {
                                  "description": "Which method is used for the calculation of the composite price for the market.",
                                  "type": "string",
                                  "enum": [
                                    "COMPOSITE_PRICE_TYPE_UNSPECIFIED",
                                    "COMPOSITE_PRICE_TYPE_WEIGHTED",
                                    "COMPOSITE_PRICE_TYPE_MEDIAN",
                                    "COMPOSITE_PRICE_TYPE_LAST_TRADE"
                                  ],
                                  "default": "COMPOSITE_PRICE_TYPE_UNSPECIFIED"
                                },
                                "dataSourcesSpec": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    },
                                    "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                  },
                                  "description": "Additional price sources to be used for internal composite price calculation."
                                },
                                "dataSourcesSpecBinding": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "priceSourceProperty": {
                                        "type": "string",
                                        "description": "The property name of price."
                                      }
                                    },
                                    "description": "Describes which property of the data source data is to be\nused for price source."
                                  },
                                  "title": "List of each price source and its corresponding binding"
                                }
                              }
                            }
                          },
                          "title": "Perpetual product configuration"
                        }
                      },
                      "title": "Instrument configuration"
                    },
                    "decimalPlaces": {
                      "type": "string",
                      "pattern": "^[0-9]{0,19}$",
                      "description": "Decimal places used for the new spot market, sets the smallest price increment on the book."
                    },
                    "metadata": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Optional new spot market metadata, tags."
                    },
                    "priceMonitoringParameters": {
                      "description": "Price monitoring parameters.",
                      "type": "object",
                      "properties": {
                        "triggers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "horizon": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Price monitoring projection horizon τ in seconds.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              },
                              "probability": {
                                "type": "string",
                                "description": "Price monitoring probability level p."
                              },
                              "auctionExtension": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Price monitoring auction extension duration in seconds should the price\nbreach its theoretical level over the specified horizon at the specified\nprobability level.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              }
                            },
                            "title": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration"
                          }
                        }
                      },
                      "title": "PriceMonitoringParameters contains a collection of triggers to be used for a given market"
                    },
                    "targetStakeParameters": {
                      "description": "Specifies parameters related to target stake calculation.",
                      "type": "object",
                      "properties": {
                        "timeWindow": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Specifies length of time window expressed in seconds for target stake calculation.",
                          "minimum": -9223372036854776000,
                          "maximum": 9223372036854776000
                        },
                        "scalingFactor": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Specifies scaling factors used in target stake calculation.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        }
                      },
                      "title": "TargetStakeParameters contains parameters used in target stake calculation"
                    },
                    "simple": {
                      "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected.",
                      "type": "object",
                      "properties": {
                        "factorLong": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined risk factor value for long.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "factorShort": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined risk factor value for short.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "maxMoveUp": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined maximum price move up that the model considers as valid.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "minMoveDown": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined minimum price move down that the model considers as valid.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "probabilityOfTrading": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined constant probability of trading.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        }
                      },
                      "title": "Risk model parameters for simple modelling"
                    },
                    "logNormal": {
                      "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.",
                      "type": "object",
                      "properties": {
                        "riskAversionParameter": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Risk Aversion Parameter.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "tau": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Tau parameter of the risk model, projection horizon measured as a year fraction used in the expected shortfall\ncalculation to obtain the maintenance margin, must be a strictly non-negative real number.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "params": {
                          "description": "Risk model parameters for log normal.",
                          "type": "object",
                          "properties": {
                            "mu": {
                              "type": "number",
                              "pattern": "^[-]?+(.[0-9]+)?$",
                              "description": "Mu parameter, annualised growth rate of the underlying asset.",
                              "minimum": -1.7976931348623157e+308,
                              "maximum": 1.7976931348623157e+308
                            },
                            "r": {
                              "type": "number",
                              "pattern": "^[-]?+(.[0-9]+)?$",
                              "description": "R parameter, annualised growth rate of the risk-free asset, used for discounting of future cash flows, can be any real number.",
                              "minimum": -1.7976931348623157e+308,
                              "maximum": 1.7976931348623157e+308
                            },
                            "sigma": {
                              "type": "number",
                              "pattern": "^[-]?+(.[0-9]+)?$",
                              "description": "Sigma parameter, annualised volatility of the underlying asset, must be a strictly non-negative real number.",
                              "minimum": -1.7976931348623157e+308,
                              "maximum": 1.7976931348623157e+308
                            }
                          },
                          "title": "Risk model parameters for log normal"
                        }
                      },
                      "title": "Risk model for log normal"
                    },
                    "positionDecimalPlaces": {
                      "type": "string",
                      "pattern": "^[0-9]{0,19}$",
                      "description": "Decimal places for order sizes, sets what size the smallest order / position on the spot market can be.",
                      "minimum": -9223372036854776000,
                      "maximum": 9223372036854776000
                    },
                    "slaParams": {
                      "description": "Specifies the liquidity provision SLA parameters.",
                      "type": "object",
                      "properties": {
                        "priceRange": {
                          "type": "string"
                        },
                        "commitmentMinTimeFraction": {
                          "type": "string",
                          "description": "Specifies the minimum fraction of time LPs must spend \"on the book\" providing their committed liquidity."
                        },
                        "performanceHysteresisEpochs": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Specifies the number of liquidity epochs over which past performance will continue to affect rewards."
                        },
                        "slaCompetitionFactor": {
                          "type": "string",
                          "description": "Specifies the maximum fraction of their accrued fees an LP that meets the SLA implied by market.liquidity.commitmentMinTimeFraction will lose to liquidity providers\nthat achieved a higher SLA performance than them."
                        }
                      }
                    },
                    "liquidityFeeSettings": {
                      "description": "Specifies how the liquidity fee for the market will be calculated.",
                      "type": "object",
                      "properties": {
                        "method": {
                          "description": "Method used to calculate the market's liquidity fee.",
                          "type": "string",
                          "enum": [
                            "METHOD_UNSPECIFIED",
                            "METHOD_MARGINAL_COST",
                            "METHOD_WEIGHTED_AVERAGE",
                            "METHOD_CONSTANT"
                          ],
                          "default": "METHOD_UNSPECIFIED"
                        },
                        "feeConstant": {
                          "type": "string",
                          "description": "Constant liquidity fee used when using the constant fee method."
                        }
                      }
                    },
                    "tickSize": {
                      "type": "string",
                      "title": "The market tick size defines the minimum change in quote price for the market"
                    }
                  },
                  "title": "Configuration for a new spot market on Vega"
                }
              },
              "title": "New spot market on Vega"
            },
            "updateSpotMarket": {
              "description": "Proposal change for modifying an existing spot market on Vega.",
              "type": "object",
              "properties": {
                "marketId": {
                  "type": "string",
                  "description": "Market ID the update is for."
                },
                "changes": {
                  "description": "Updated configuration of the spot market.",
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Optional spot market metadata, tags."
                    },
                    "priceMonitoringParameters": {
                      "description": "Price monitoring parameters.",
                      "type": "object",
                      "properties": {
                        "triggers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "horizon": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Price monitoring projection horizon τ in seconds.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              },
                              "probability": {
                                "type": "string",
                                "description": "Price monitoring probability level p."
                              },
                              "auctionExtension": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Price monitoring auction extension duration in seconds should the price\nbreach its theoretical level over the specified horizon at the specified\nprobability level.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              }
                            },
                            "title": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration"
                          }
                        }
                      },
                      "title": "PriceMonitoringParameters contains a collection of triggers to be used for a given market"
                    },
                    "targetStakeParameters": {
                      "description": "Specifies parameters related to target stake calculation.",
                      "type": "object",
                      "properties": {
                        "timeWindow": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Specifies length of time window expressed in seconds for target stake calculation.",
                          "minimum": -9223372036854776000,
                          "maximum": 9223372036854776000
                        },
                        "scalingFactor": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Specifies scaling factors used in target stake calculation.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        }
                      },
                      "title": "TargetStakeParameters contains parameters used in target stake calculation"
                    },
                    "simple": {
                      "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected.",
                      "type": "object",
                      "properties": {
                        "factorLong": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined risk factor value for long.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "factorShort": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined risk factor value for short.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "maxMoveUp": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined maximum price move up that the model considers as valid.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "minMoveDown": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined minimum price move down that the model considers as valid.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "probabilityOfTrading": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Pre-defined constant probability of trading.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        }
                      },
                      "title": "Risk model parameters for simple modelling"
                    },
                    "logNormal": {
                      "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.",
                      "type": "object",
                      "properties": {
                        "riskAversionParameter": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Risk Aversion Parameter.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "tau": {
                          "type": "number",
                          "pattern": "^[-]?+(.[0-9]+)?$",
                          "description": "Tau parameter of the risk model, projection horizon measured as a year fraction used in the expected shortfall\ncalculation to obtain the maintenance margin, must be a strictly non-negative real number.",
                          "minimum": -1.7976931348623157e+308,
                          "maximum": 1.7976931348623157e+308
                        },
                        "params": {
                          "description": "Risk model parameters for log normal.",
                          "type": "object",
                          "properties": {
                            "mu": {
                              "type": "number",
                              "pattern": "^[-]?+(.[0-9]+)?$",
                              "description": "Mu parameter, annualised growth rate of the underlying asset.",
                              "minimum": -1.7976931348623157e+308,
                              "maximum": 1.7976931348623157e+308
                            },
                            "r": {
                              "type": "number",
                              "pattern": "^[-]?+(.[0-9]+)?$",
                              "description": "R parameter, annualised growth rate of the risk-free asset, used for discounting of future cash flows, can be any real number.",
                              "minimum": -1.7976931348623157e+308,
                              "maximum": 1.7976931348623157e+308
                            },
                            "sigma": {
                              "type": "number",
                              "pattern": "^[-]?+(.[0-9]+)?$",
                              "description": "Sigma parameter, annualised volatility of the underlying asset, must be a strictly non-negative real number.",
                              "minimum": -1.7976931348623157e+308,
                              "maximum": 1.7976931348623157e+308
                            }
                          },
                          "title": "Risk model parameters for log normal"
                        }
                      },
                      "title": "Risk model for log normal"
                    },
                    "slaParams": {
                      "description": "Specifies the liquidity provision SLA parameters.",
                      "type": "object",
                      "properties": {
                        "priceRange": {
                          "type": "string"
                        },
                        "commitmentMinTimeFraction": {
                          "type": "string",
                          "description": "Specifies the minimum fraction of time LPs must spend \"on the book\" providing their committed liquidity."
                        },
                        "performanceHysteresisEpochs": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Specifies the number of liquidity epochs over which past performance will continue to affect rewards."
                        },
                        "slaCompetitionFactor": {
                          "type": "string",
                          "description": "Specifies the maximum fraction of their accrued fees an LP that meets the SLA implied by market.liquidity.commitmentMinTimeFraction will lose to liquidity providers\nthat achieved a higher SLA performance than them."
                        }
                      }
                    },
                    "liquidityFeeSettings": {
                      "description": "Specifies how the liquidity fee for the market will be calculated.",
                      "type": "object",
                      "properties": {
                        "method": {
                          "description": "Method used to calculate the market's liquidity fee.",
                          "type": "string",
                          "enum": [
                            "METHOD_UNSPECIFIED",
                            "METHOD_MARGINAL_COST",
                            "METHOD_WEIGHTED_AVERAGE",
                            "METHOD_CONSTANT"
                          ],
                          "default": "METHOD_UNSPECIFIED"
                        },
                        "feeConstant": {
                          "type": "string",
                          "description": "Constant liquidity fee used when using the constant fee method."
                        }
                      }
                    },
                    "tickSize": {
                      "type": "string",
                      "title": "The market tick size defines the minimum change in quote price for the market"
                    }
                  },
                  "title": "Configuration to update a spot market on Vega"
                }
              },
              "title": "Update an existing spot market on Vega"
            },
            "newTransfer": {
              "description": "Proposal change for a governance transfer.",
              "type": "object",
              "properties": {
                "changes": {
                  "description": "Configuration for a new transfer.",
                  "type": "object",
                  "properties": {
                    "sourceType": {
                      "title": "Source account type, such as network treasury, market insurance pool",
                      "type": "string",
                      "enum": [
                        "ACCOUNT_TYPE_UNSPECIFIED",
                        "ACCOUNT_TYPE_INSURANCE",
                        "ACCOUNT_TYPE_SETTLEMENT",
                        "ACCOUNT_TYPE_MARGIN",
                        "ACCOUNT_TYPE_GENERAL",
                        "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                        "ACCOUNT_TYPE_FEES_LIQUIDITY",
                        "ACCOUNT_TYPE_FEES_MAKER",
                        "ACCOUNT_TYPE_BOND",
                        "ACCOUNT_TYPE_EXTERNAL",
                        "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                        "ACCOUNT_TYPE_GLOBAL_REWARD",
                        "ACCOUNT_TYPE_PENDING_TRANSFERS",
                        "ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES",
                        "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                        "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                        "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS",
                        "ACCOUNT_TYPE_HOLDING",
                        "ACCOUNT_TYPE_LP_LIQUIDITY_FEES",
                        "ACCOUNT_TYPE_LIQUIDITY_FEES_BONUS_DISTRIBUTION",
                        "ACCOUNT_TYPE_NETWORK_TREASURY",
                        "ACCOUNT_TYPE_VESTING_REWARDS",
                        "ACCOUNT_TYPE_VESTED_REWARDS",
                        "ACCOUNT_TYPE_REWARD_AVERAGE_POSITION",
                        "ACCOUNT_TYPE_REWARD_RELATIVE_RETURN",
                        "ACCOUNT_TYPE_REWARD_RETURN_VOLATILITY",
                        "ACCOUNT_TYPE_REWARD_VALIDATOR_RANKING",
                        "ACCOUNT_TYPE_PENDING_FEE_REFERRAL_REWARD",
                        "ACCOUNT_TYPE_ORDER_MARGIN"
                      ],
                      "default": "ACCOUNT_TYPE_UNSPECIFIED",
                      "description": "- ACCOUNT_TYPE_UNSPECIFIED: Default value\n - ACCOUNT_TYPE_INSURANCE: Insurance pool accounts contain insurance pool funds for a market\n - ACCOUNT_TYPE_SETTLEMENT: Settlement accounts exist only during settlement or mark-to-market\n - ACCOUNT_TYPE_MARGIN: Margin accounts contain funds set aside for the margin needed to support a party's open positions.\nEach party will have a margin account for each market they have traded in.\nRequired initial margin is allocated to each market from user's general account.\nCollateral in the margin account can't be withdrawn or used as margin on another market until\nit is released back to the general account.\nVega protocol uses an internal accounting system to segregate funds held as\nmargin from other funds to ensure they are never lost or 'double spent'\n\nMargin account funds will vary as margin requirements on positions change\n - ACCOUNT_TYPE_GENERAL: General accounts contain the collateral for a party that is not otherwise allocated. A party will\nhave multiple general accounts, one for each asset they want\nto trade with\n\nGeneral accounts are where funds are initially deposited or withdrawn from,\nit is also the account where funds are taken to fulfil fees and initial margin requirements\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: Infrastructure accounts contain fees earned by providing infrastructure on Vega\n - ACCOUNT_TYPE_FEES_LIQUIDITY: Liquidity accounts contain fees earned by providing liquidity on Vega markets\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned by placing orders that sit on the book\nand are then matched with an incoming order to create a trade - These fees reward parties\nwho provide the best priced liquidity that actually allows trading to take place\n - ACCOUNT_TYPE_BOND: This account is created to maintain liquidity providers funds commitments\n - ACCOUNT_TYPE_EXTERNAL: External account represents an external source (deposit/withdrawal)\n - ACCOUNT_TYPE_GLOBAL_INSURANCE: Global insurance account for the asset\n - ACCOUNT_TYPE_GLOBAL_REWARD: Global reward account for the asset\n - ACCOUNT_TYPE_PENDING_TRANSFERS: Per asset account used to store pending transfers (if any)\n - ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES: Per asset reward account for fees paid to makers\n - ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES: Per asset reward account for fees received by makers\n - ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES: Per asset reward account for fees received by liquidity providers\n - ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS: Per asset reward account for market proposers when the market goes above some trading threshold\n - ACCOUNT_TYPE_HOLDING: Per asset account for holding in-flight unfilled orders' funds\n - ACCOUNT_TYPE_LP_LIQUIDITY_FEES: Network controlled liquidity provider's account, per market, to hold accrued liquidity fees.\n - ACCOUNT_TYPE_LIQUIDITY_FEES_BONUS_DISTRIBUTION: Network controlled liquidity fees bonus distribution account, per market.\n - ACCOUNT_TYPE_NETWORK_TREASURY: Network controlled treasury\n - ACCOUNT_TYPE_VESTING_REWARDS: Account holding user's rewards for the vesting period\n - ACCOUNT_TYPE_VESTED_REWARDS: Account holding user's rewards after the vesting period\n - ACCOUNT_TYPE_REWARD_AVERAGE_POSITION: Per asset market reward account given for average position\n - ACCOUNT_TYPE_REWARD_RELATIVE_RETURN: Per asset market reward account given for relative return\n - ACCOUNT_TYPE_REWARD_RETURN_VOLATILITY: Per asset market reward account given for return volatility\n - ACCOUNT_TYPE_REWARD_VALIDATOR_RANKING: Per asset market reward account given to validators by their ranking\n - ACCOUNT_TYPE_PENDING_FEE_REFERRAL_REWARD: Per asset account for pending fee referral reward payouts\n - ACCOUNT_TYPE_ORDER_MARGIN: Per asset market account for party in isolated margin mode"
                    },
                    "source": {
                      "type": "string",
                      "title": "If network treasury, field is empty, otherwise uses the market ID"
                    },
                    "transferType": {
                      "title": "\"All or nothing\" or \"best effort\":\nAll or nothing: Transfers the specified amount or does not transfer anything\nBest effort: Transfers the specified amount or the max allowable amount if this is less than the specified amount",
                      "type": "string",
                      "enum": [
                        "GOVERNANCE_TRANSFER_TYPE_UNSPECIFIED",
                        "GOVERNANCE_TRANSFER_TYPE_ALL_OR_NOTHING",
                        "GOVERNANCE_TRANSFER_TYPE_BEST_EFFORT"
                      ],
                      "default": "GOVERNANCE_TRANSFER_TYPE_UNSPECIFIED"
                    },
                    "amount": {
                      "type": "string",
                      "title": "Maximum amount to transfer"
                    },
                    "asset": {
                      "type": "string",
                      "title": "ID of asset to transfer"
                    },
                    "fractionOfBalance": {
                      "type": "string",
                      "title": "Maximum fraction of the source account's balance to transfer as a decimal - i.e. 0.1 = 10% of the balance"
                    },
                    "destinationType": {
                      "title": "Specifies the account type to transfer to: reward pool, party, network insurance pool, market insurance pool",
                      "type": "string",
                      "enum": [
                        "ACCOUNT_TYPE_UNSPECIFIED",
                        "ACCOUNT_TYPE_INSURANCE",
                        "ACCOUNT_TYPE_SETTLEMENT",
                        "ACCOUNT_TYPE_MARGIN",
                        "ACCOUNT_TYPE_GENERAL",
                        "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                        "ACCOUNT_TYPE_FEES_LIQUIDITY",
                        "ACCOUNT_TYPE_FEES_MAKER",
                        "ACCOUNT_TYPE_BOND",
                        "ACCOUNT_TYPE_EXTERNAL",
                        "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                        "ACCOUNT_TYPE_GLOBAL_REWARD",
                        "ACCOUNT_TYPE_PENDING_TRANSFERS",
                        "ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES",
                        "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                        "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                        "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS",
                        "ACCOUNT_TYPE_HOLDING",
                        "ACCOUNT_TYPE_LP_LIQUIDITY_FEES",
                        "ACCOUNT_TYPE_LIQUIDITY_FEES_BONUS_DISTRIBUTION",
                        "ACCOUNT_TYPE_NETWORK_TREASURY",
                        "ACCOUNT_TYPE_VESTING_REWARDS",
                        "ACCOUNT_TYPE_VESTED_REWARDS",
                        "ACCOUNT_TYPE_REWARD_AVERAGE_POSITION",
                        "ACCOUNT_TYPE_REWARD_RELATIVE_RETURN",
                        "ACCOUNT_TYPE_REWARD_RETURN_VOLATILITY",
                        "ACCOUNT_TYPE_REWARD_VALIDATOR_RANKING",
                        "ACCOUNT_TYPE_PENDING_FEE_REFERRAL_REWARD",
                        "ACCOUNT_TYPE_ORDER_MARGIN"
                      ],
                      "default": "ACCOUNT_TYPE_UNSPECIFIED",
                      "description": "- ACCOUNT_TYPE_UNSPECIFIED: Default value\n - ACCOUNT_TYPE_INSURANCE: Insurance pool accounts contain insurance pool funds for a market\n - ACCOUNT_TYPE_SETTLEMENT: Settlement accounts exist only during settlement or mark-to-market\n - ACCOUNT_TYPE_MARGIN: Margin accounts contain funds set aside for the margin needed to support a party's open positions.\nEach party will have a margin account for each market they have traded in.\nRequired initial margin is allocated to each market from user's general account.\nCollateral in the margin account can't be withdrawn or used as margin on another market until\nit is released back to the general account.\nVega protocol uses an internal accounting system to segregate funds held as\nmargin from other funds to ensure they are never lost or 'double spent'\n\nMargin account funds will vary as margin requirements on positions change\n - ACCOUNT_TYPE_GENERAL: General accounts contain the collateral for a party that is not otherwise allocated. A party will\nhave multiple general accounts, one for each asset they want\nto trade with\n\nGeneral accounts are where funds are initially deposited or withdrawn from,\nit is also the account where funds are taken to fulfil fees and initial margin requirements\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: Infrastructure accounts contain fees earned by providing infrastructure on Vega\n - ACCOUNT_TYPE_FEES_LIQUIDITY: Liquidity accounts contain fees earned by providing liquidity on Vega markets\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned by placing orders that sit on the book\nand are then matched with an incoming order to create a trade - These fees reward parties\nwho provide the best priced liquidity that actually allows trading to take place\n - ACCOUNT_TYPE_BOND: This account is created to maintain liquidity providers funds commitments\n - ACCOUNT_TYPE_EXTERNAL: External account represents an external source (deposit/withdrawal)\n - ACCOUNT_TYPE_GLOBAL_INSURANCE: Global insurance account for the asset\n - ACCOUNT_TYPE_GLOBAL_REWARD: Global reward account for the asset\n - ACCOUNT_TYPE_PENDING_TRANSFERS: Per asset account used to store pending transfers (if any)\n - ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES: Per asset reward account for fees paid to makers\n - ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES: Per asset reward account for fees received by makers\n - ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES: Per asset reward account for fees received by liquidity providers\n - ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS: Per asset reward account for market proposers when the market goes above some trading threshold\n - ACCOUNT_TYPE_HOLDING: Per asset account for holding in-flight unfilled orders' funds\n - ACCOUNT_TYPE_LP_LIQUIDITY_FEES: Network controlled liquidity provider's account, per market, to hold accrued liquidity fees.\n - ACCOUNT_TYPE_LIQUIDITY_FEES_BONUS_DISTRIBUTION: Network controlled liquidity fees bonus distribution account, per market.\n - ACCOUNT_TYPE_NETWORK_TREASURY: Network controlled treasury\n - ACCOUNT_TYPE_VESTING_REWARDS: Account holding user's rewards for the vesting period\n - ACCOUNT_TYPE_VESTED_REWARDS: Account holding user's rewards after the vesting period\n - ACCOUNT_TYPE_REWARD_AVERAGE_POSITION: Per asset market reward account given for average position\n - ACCOUNT_TYPE_REWARD_RELATIVE_RETURN: Per asset market reward account given for relative return\n - ACCOUNT_TYPE_REWARD_RETURN_VOLATILITY: Per asset market reward account given for return volatility\n - ACCOUNT_TYPE_REWARD_VALIDATOR_RANKING: Per asset market reward account given to validators by their ranking\n - ACCOUNT_TYPE_PENDING_FEE_REFERRAL_REWARD: Per asset account for pending fee referral reward payouts\n - ACCOUNT_TYPE_ORDER_MARGIN: Per asset market account for party in isolated margin mode"
                    },
                    "destination": {
                      "type": "string",
                      "title": "Specifies the account to transfer to, depending on the account type:\nNetwork treasury: leave empty\nParty: party's public key\nMarket insurance pool: market ID"
                    },
                    "oneOff": {
                      "type": "object",
                      "properties": {
                        "deliverOn": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Timestamp in Unix nanoseconds for when the transfer should be delivered into the receiver's account.",
                          "minimum": -9223372036854776000,
                          "maximum": 9223372036854776000
                        }
                      },
                      "title": "Specific details for a one off transfer"
                    },
                    "recurring": {
                      "type": "object",
                      "properties": {
                        "startEpoch": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$"
                        },
                        "endEpoch": {
                          "type": "string",
                          "pattern": "^[0-9]{0,19}$",
                          "description": "Last epoch at which this transfer shall be paid."
                        },
                        "dispatchStrategy": {
                          "description": "Optional parameter defining how a transfer is dispatched.",
                          "type": "object",
                          "properties": {
                            "assetForMetric": {
                              "type": "string",
                              "description": "Asset to use for metric."
                            },
                            "metric": {
                              "description": "Metric to apply.",
                              "type": "string",
                              "enum": [
                                "DISPATCH_METRIC_UNSPECIFIED",
                                "DISPATCH_METRIC_MAKER_FEES_PAID",
                                "DISPATCH_METRIC_MAKER_FEES_RECEIVED",
                                "DISPATCH_METRIC_LP_FEES_RECEIVED",
                                "DISPATCH_METRIC_MARKET_VALUE",
                                "DISPATCH_METRIC_AVERAGE_POSITION",
                                "DISPATCH_METRIC_RELATIVE_RETURN",
                                "DISPATCH_METRIC_RETURN_VOLATILITY",
                                "DISPATCH_METRIC_VALIDATOR_RANKING"
                              ],
                              "default": "DISPATCH_METRIC_UNSPECIFIED",
                              "title": "- DISPATCH_METRIC_MAKER_FEES_PAID: Dispatch metric that uses the total maker fees paid in the market\n - DISPATCH_METRIC_MAKER_FEES_RECEIVED: Dispatch metric that uses the total maker fees received in the market\n - DISPATCH_METRIC_LP_FEES_RECEIVED: Dispatch metric that uses the total LP fees received in the market\n - DISPATCH_METRIC_MARKET_VALUE: Dispatch metric that uses total value of the market if above the required threshold and not paid given proposer bonus yet\n - DISPATCH_METRIC_AVERAGE_POSITION: Dispatch metric that uses the time weighted average position\n - DISPATCH_METRIC_RELATIVE_RETURN: Dispatch metric that uses the relative PNL of the party in the market\n - DISPATCH_METRIC_RETURN_VOLATILITY: Dispatch metric that uses return volatility of the party in the market\n - DISPATCH_METRIC_VALIDATOR_RANKING: Dispatch metric that uses the validator ranking of the validator as metric"
                            },
                            "markets": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "Optional markets in scope."
                            },
                            "entityScope": {
                              "description": "Mandatory enum that defines the entities within scope.",
                              "type": "string",
                              "enum": [
                                "ENTITY_SCOPE_UNSPECIFIED",
                                "ENTITY_SCOPE_INDIVIDUALS",
                                "ENTITY_SCOPE_TEAMS"
                              ],
                              "default": "ENTITY_SCOPE_UNSPECIFIED",
                              "title": "- ENTITY_SCOPE_INDIVIDUALS: Rewards must be distributed directly to eligible parties.\n - ENTITY_SCOPE_TEAMS: Rewards must be distributed to directly eligible teams, and then amongst team members"
                            },
                            "individualScope": {
                              "description": "Optional enum if the entity scope defined is for individuals, which determines the subset of individuals that are eligible to be rewarded.",
                              "type": "string",
                              "enum": [
                                "INDIVIDUAL_SCOPE_UNSPECIFIED",
                                "INDIVIDUAL_SCOPE_ALL",
                                "INDIVIDUAL_SCOPE_IN_TEAM",
                                "INDIVIDUAL_SCOPE_NOT_IN_TEAM"
                              ],
                              "default": "INDIVIDUAL_SCOPE_UNSPECIFIED"
                            },
                            "teamScope": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "title": "Optional list applicable if the reward type has a scope of teams, which allows the funder to define a list of team IDs that are eligible to be rewarded from this transfer"
                            },
                            "nTopPerformers": {
                              "type": "string",
                              "title": "The proportion of the top performers in the team for a given metric to be averaged for the metric calculation if the scope is team"
                            },
                            "stakingRequirement": {
                              "type": "string",
                              "title": "Minimum number of governance (e.g. VEGA) tokens staked for a party to be considered eligible. Defaults to 0"
                            },
                            "notionalTimeWeightedAveragePositionRequirement": {
                              "type": "string",
                              "title": "Minimum notional time-weighted averaged position required for a party to be considered eligible. Defaults to 0"
                            },
                            "windowLength": {
                              "type": "string",
                              "pattern": "^[0-9]{0,19}$",
                              "title": "Number of epochs to evaluate the metric on"
                            },
                            "lockPeriod": {
                              "type": "string",
                              "pattern": "^[0-9]{0,19}$",
                              "title": "Number of epochs after distribution to delay vesting of rewards by"
                            },
                            "distributionStrategy": {
                              "title": "Controls how the reward is distributed between qualifying parties",
                              "type": "string",
                              "enum": [
                                "DISTRIBUTION_STRATEGY_UNSPECIFIED",
                                "DISTRIBUTION_STRATEGY_PRO_RATA",
                                "DISTRIBUTION_STRATEGY_RANK"
                              ],
                              "default": "DISTRIBUTION_STRATEGY_UNSPECIFIED",
                              "description": " - DISTRIBUTION_STRATEGY_PRO_RATA: Rewards funded using the pro-rata strategy should be distributed pro-rata by each entity's reward metric, scaled by any active multipliers that party has.\n - DISTRIBUTION_STRATEGY_RANK: Rewards funded using the party rank."
                            },
                            "rankTable": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "startRank": {
                                    "type": "integer",
                                    "pattern": "^[0-9]{0,19}$",
                                    "minimum": -9223372036854776000,
                                    "maximum": 9223372036854776000
                                  },
                                  "shareRatio": {
                                    "type": "integer",
                                    "pattern": "^[0-9]{0,19}$",
                                    "minimum": -9223372036854776000,
                                    "maximum": 9223372036854776000
                                  }
                                }
                              },
                              "description": "Ordered list, using start rank, defining the rank bands and share ratio for each band. Mandatory for the rank distribution strategy."
                            },
                            "capRewardFeeMultiple": {
                              "type": "string",
                              "description": "If set, the actual amount of rewards transferred to each public key during distribution for this transfer will be `min(calculated_reward_in_quantum, cap_reward_fee_multiple × fees_paid_this_epoch_in_quantum)."
                            }
                          }
                        }
                      },
                      "title": "Specific details for a recurring transfer"
                    }
                  }
                }
              },
              "title": "New governance transfer"
            },
            "cancelTransfer": {
              "description": "Cancel a governance transfer.",
              "type": "object",
              "properties": {
                "changes": {
                  "title": "Configuration for cancellation of a governance-initiated transfer",
                  "type": "object",
                  "properties": {
                    "transferId": {
                      "type": "string",
                      "description": "ID of the governance transfer proposal."
                    }
                  }
                }
              }
            },
            "updateMarketState": {
              "description": "Proposal change for updating the state of a market.",
              "type": "object",
              "properties": {
                "changes": {
                  "title": "Configuration for governance-initiated change of a market's state",
                  "type": "object",
                  "properties": {
                    "marketId": {
                      "type": "string",
                      "title": "ID of the market"
                    },
                    "updateType": {
                      "title": "Type of the market update",
                      "type": "string",
                      "enum": [
                        "MARKET_STATE_UPDATE_TYPE_UNSPECIFIED",
                        "MARKET_STATE_UPDATE_TYPE_TERMINATE",
                        "MARKET_STATE_UPDATE_TYPE_SUSPEND",
                        "MARKET_STATE_UPDATE_TYPE_RESUME"
                      ],
                      "default": "MARKET_STATE_UPDATE_TYPE_UNSPECIFIED"
                    },
                    "price": {
                      "type": "string",
                      "title": "Settlement price, relevant only for market termination for futures markets"
                    }
                  }
                }
              }
            },
            "updateReferralProgram": {
              "description": "Proposal change for updating the referral program.",
              "type": "object",
              "properties": {
                "changes": {
                  "description": "Configuration for change to update a referral program.",
                  "type": "object",
                  "properties": {
                    "benefitTiers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "minimumRunningNotionalTakerVolume": {
                            "type": "string",
                            "description": "Required running notional taker volume in quantum units for parties\nto access this tier."
                          },
                          "minimumEpochs": {
                            "type": "string",
                            "description": "Required number of epochs a party must have been in a referral set to\naccess this tier."
                          },
                          "referralRewardFactor": {
                            "type": "string",
                            "description": "Proportion of the referee's taker fees to be rewarded to the referrer."
                          },
                          "referralDiscountFactor": {
                            "type": "string",
                            "description": "Proportion of the referee's taker fees to be discounted."
                          }
                        }
                      },
                      "description": "Defined benefit tiers in increasing order. First element will give Tier 1,\nsecond element will give Tier 2, and so on. Determines the level of\nbenefit a party can expect based on performance criteria."
                    },
                    "endOfProgramTimestamp": {
                      "type": "string",
                      "pattern": "^[0-9]{0,19}$",
                      "description": "Timestamp as Unix time in seconds, after which when the current epoch\nends, the program will end and benefits will be disabled.",
                      "minimum": -9223372036854776000,
                      "maximum": 9223372036854776000
                    },
                    "windowLength": {
                      "type": "string",
                      "pattern": "^[0-9]{0,19}$",
                      "description": "Number of epochs over which to evaluate a referral set's running volume."
                    },
                    "stakingTiers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "minimumStakedTokens": {
                            "type": "string",
                            "description": "Required number of governance tokens ($VEGA) a referrer must have staked to\nreceive the multiplier."
                          },
                          "referralRewardMultiplier": {
                            "type": "string",
                            "description": "Multiplier applied to the referral reward factor when calculating referral\nrewards due to the referrer."
                          }
                        }
                      },
                      "description": "Defined staking tiers in increasing order. First element will give Tier 1,\nsecond element will give Tier 2, and so on. Determines the level of\nbenefit a party can expect based on their staking."
                    }
                  }
                }
              }
            },
            "updateVolumeDiscountProgram": {
              "description": "Proposal change for updating the volume discount program.",
              "type": "object",
              "properties": {
                "changes": {
                  "title": "Configuration for a change to update a volume discount program",
                  "type": "object",
                  "properties": {
                    "benefitTiers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "minimumRunningNotionalTakerVolume": {
                            "type": "string",
                            "description": "Required running notional taker volume in quantum units for parties\nto access this tier."
                          },
                          "volumeDiscountFactor": {
                            "type": "string",
                            "description": "Proportion of the taker fees to be discounted."
                          }
                        }
                      },
                      "description": "Defined benefit tiers in increasing order. First element will give Tier 1,\nsecond element will give Tier 2, and so on. Determines the level of\nbenefit a party can expect based on performance criteria."
                    },
                    "endOfProgramTimestamp": {
                      "type": "string",
                      "pattern": "^[0-9]{0,19}$",
                      "description": "Timestamp as Unix time in seconds, after which when the current epoch\nends, the program will end and benefits will be disabled.",
                      "minimum": -9223372036854776000,
                      "maximum": 9223372036854776000
                    },
                    "windowLength": {
                      "type": "string",
                      "pattern": "^[0-9]{0,19}$",
                      "description": "Number of epochs over which to evaluate a referral set's running volume."
                    }
                  }
                }
              }
            }
          },
          "title": "Terms for a governance proposal on Vega"
        },
        "rationale": {
          "description": "Rationale behind a proposal.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description to show a short title / something in case the link goes offline.\nThis is to be between 0 and 20k unicode characters.\nThis is mandatory for all proposals."
            },
            "title": {
              "type": "string",
              "description": "Title to be used to give a short description of the proposal in lists.\nThis is to be between 0 and 100 unicode characters.\nThis is mandatory for all proposals."
            }
          }
        }
      },
      "description": "Command that allows a token holder to submit a governance proposal that can be voted on by any other token holders, and eventually enacted on the Vega network.\nFor example this command can be used to propose a new market."
    },
    "voteSubmission": {
      "type": "object",
      "properties": {
        "proposalId": {
          "type": "string",
          "description": "Submit vote for the specified proposal ID."
        },
        "value": {
          "description": "Actual value of the vote.",
          "type": "string",
          "enum": [
            "VALUE_UNSPECIFIED",
            "VALUE_NO",
            "VALUE_YES"
          ],
          "default": "VALUE_UNSPECIFIED",
          "title": "Vote value"
        }
      },
      "description": "Command that allows a token holder to vote for or against an active governance proposal."
    },
    "liquidityProvisionSubmission": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "description": "Market that the submitter wishes to provide liquidity for."
        },
        "commitmentAmount": {
          "type": "string",
          "description": "Amount that the submitter will commit as liquidity to the market, specified as a unitless number in the settlement asset of the market.\nThis field is an unsigned integer scaled using the asset's decimal places."
        },
        "fee": {
          "type": "string",
          "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per setting fees and rewarding liquidity providers."
        },
        "reference": {
          "type": "string",
          "description": "Arbitrary reference to be added to every order created out of this liquidity provision submission."
        }
      },
      "description": "A command that indicates to the network the party's intention to supply liquidity to the given market and become a liquidity provider.\nAn active liquidity provider for a market will earn fees based on the trades that occur in the market."
    },
    "withdrawSubmission": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "description": "Amount to be withdrawn, as an unsigned integer scaled to the asset's decimal places."
        },
        "asset": {
          "type": "string",
          "description": "Asset to be withdrawn."
        },
        "ext": {
          "description": "Details specific to the foreign chain, such as the receiver address.",
          "type": "object",
          "properties": {
            "erc20": {
              "description": "ERC20 withdrawal details.",
              "type": "object",
              "properties": {
                "receiverAddress": {
                  "type": "string",
                  "description": "Address into which the bridge will release the funds."
                }
              },
              "title": "Extension of data required for the withdraw submissions"
            }
          },
          "title": "Withdrawal external details"
        }
      },
      "description": "Command to instruct the network to process an asset withdrawal from the Vega network.\nThe process is specific to the destination foreign chain, for example, a withdrawal to Ethereum will generate signatures\nthat allow funds to be taken across the bridge."
    },
    "delegateSubmission": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "description": "Node ID to delegate stake to."
        },
        "amount": {
          "type": "string",
          "description": "Amount of stake to delegate, as an unsigned integer scaled to the governance asset's decimal places."
        }
      },
      "description": "Command to allow a token holder to delegate their tokens to a validator to help secure the network.\nA token holder delegating to a validator will earn rewards based on the amount they have delegated, and the performance of the chosen validator."
    },
    "undelegateSubmission": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "description": "Node ID to undelegate stake from."
        },
        "amount": {
          "type": "string",
          "description": "Amount to undelegate, as an unsigned integer scaled to the governance asset's decimal places.\nIf not set, then all delegations to the given validator node will be removed."
        },
        "method": {
          "description": "Method of delegation.",
          "type": "string",
          "enum": [
            "METHOD_UNSPECIFIED",
            "METHOD_NOW",
            "METHOD_AT_END_OF_EPOCH"
          ],
          "default": "METHOD_UNSPECIFIED"
        }
      },
      "description": "Command to allow a token holder to instruct the network to remove their delegated stake from a given validator node."
    },
    "liquidityProvisionCancellation": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "description": "Market that the submitter will stop providing liquidity for."
        }
      },
      "description": "Command that allows a liquidity provider to inform the network that they will stop providing liquidity for a market."
    },
    "liquidityProvisionAmendment": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "description": "Market that the submitter wants to amend the liquidity commitment for."
        },
        "commitmentAmount": {
          "type": "string",
          "description": "New commitment amount."
        },
        "fee": {
          "type": "string",
          "description": "New nominated liquidity fee factor."
        },
        "reference": {
          "type": "string",
          "description": "New arbitrary reference to be added to every order created out of this liquidity provision submission."
        }
      },
      "description": "Command that allows a liquidity provider to update the details of their existing liquidity commitment.\nAny field that is left unset or as a default value indicates that this field on the original submission will be left unchanged."
    },
    "transfer": {
      "type": "object",
      "properties": {
        "fromAccountType": {
          "type": "string",
          "enum": [
            "ACCOUNT_TYPE_UNSPECIFIED",
            "ACCOUNT_TYPE_INSURANCE",
            "ACCOUNT_TYPE_SETTLEMENT",
            "ACCOUNT_TYPE_MARGIN",
            "ACCOUNT_TYPE_GENERAL",
            "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
            "ACCOUNT_TYPE_FEES_LIQUIDITY",
            "ACCOUNT_TYPE_FEES_MAKER",
            "ACCOUNT_TYPE_BOND",
            "ACCOUNT_TYPE_EXTERNAL",
            "ACCOUNT_TYPE_GLOBAL_INSURANCE",
            "ACCOUNT_TYPE_GLOBAL_REWARD",
            "ACCOUNT_TYPE_PENDING_TRANSFERS",
            "ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES",
            "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
            "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
            "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS",
            "ACCOUNT_TYPE_HOLDING",
            "ACCOUNT_TYPE_LP_LIQUIDITY_FEES",
            "ACCOUNT_TYPE_LIQUIDITY_FEES_BONUS_DISTRIBUTION",
            "ACCOUNT_TYPE_NETWORK_TREASURY",
            "ACCOUNT_TYPE_VESTING_REWARDS",
            "ACCOUNT_TYPE_VESTED_REWARDS",
            "ACCOUNT_TYPE_REWARD_AVERAGE_POSITION",
            "ACCOUNT_TYPE_REWARD_RELATIVE_RETURN",
            "ACCOUNT_TYPE_REWARD_RETURN_VOLATILITY",
            "ACCOUNT_TYPE_REWARD_VALIDATOR_RANKING",
            "ACCOUNT_TYPE_PENDING_FEE_REFERRAL_REWARD",
            "ACCOUNT_TYPE_ORDER_MARGIN"
          ],
          "default": "ACCOUNT_TYPE_UNSPECIFIED",
          "description": "- ACCOUNT_TYPE_UNSPECIFIED: Default value\n - ACCOUNT_TYPE_INSURANCE: Insurance pool accounts contain insurance pool funds for a market\n - ACCOUNT_TYPE_SETTLEMENT: Settlement accounts exist only during settlement or mark-to-market\n - ACCOUNT_TYPE_MARGIN: Margin accounts contain funds set aside for the margin needed to support a party's open positions.\nEach party will have a margin account for each market they have traded in.\nRequired initial margin is allocated to each market from user's general account.\nCollateral in the margin account can't be withdrawn or used as margin on another market until\nit is released back to the general account.\nVega protocol uses an internal accounting system to segregate funds held as\nmargin from other funds to ensure they are never lost or 'double spent'\n\nMargin account funds will vary as margin requirements on positions change\n - ACCOUNT_TYPE_GENERAL: General accounts contain the collateral for a party that is not otherwise allocated. A party will\nhave multiple general accounts, one for each asset they want\nto trade with\n\nGeneral accounts are where funds are initially deposited or withdrawn from,\nit is also the account where funds are taken to fulfil fees and initial margin requirements\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: Infrastructure accounts contain fees earned by providing infrastructure on Vega\n - ACCOUNT_TYPE_FEES_LIQUIDITY: Liquidity accounts contain fees earned by providing liquidity on Vega markets\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned by placing orders that sit on the book\nand are then matched with an incoming order to create a trade - These fees reward parties\nwho provide the best priced liquidity that actually allows trading to take place\n - ACCOUNT_TYPE_BOND: This account is created to maintain liquidity providers funds commitments\n - ACCOUNT_TYPE_EXTERNAL: External account represents an external source (deposit/withdrawal)\n - ACCOUNT_TYPE_GLOBAL_INSURANCE: Global insurance account for the asset\n - ACCOUNT_TYPE_GLOBAL_REWARD: Global reward account for the asset\n - ACCOUNT_TYPE_PENDING_TRANSFERS: Per asset account used to store pending transfers (if any)\n - ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES: Per asset reward account for fees paid to makers\n - ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES: Per asset reward account for fees received by makers\n - ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES: Per asset reward account for fees received by liquidity providers\n - ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS: Per asset reward account for market proposers when the market goes above some trading threshold\n - ACCOUNT_TYPE_HOLDING: Per asset account for holding in-flight unfilled orders' funds\n - ACCOUNT_TYPE_LP_LIQUIDITY_FEES: Network controlled liquidity provider's account, per market, to hold accrued liquidity fees.\n - ACCOUNT_TYPE_LIQUIDITY_FEES_BONUS_DISTRIBUTION: Network controlled liquidity fees bonus distribution account, per market.\n - ACCOUNT_TYPE_NETWORK_TREASURY: Network controlled treasury\n - ACCOUNT_TYPE_VESTING_REWARDS: Account holding user's rewards for the vesting period\n - ACCOUNT_TYPE_VESTED_REWARDS: Account holding user's rewards after the vesting period\n - ACCOUNT_TYPE_REWARD_AVERAGE_POSITION: Per asset market reward account given for average position\n - ACCOUNT_TYPE_REWARD_RELATIVE_RETURN: Per asset market reward account given for relative return\n - ACCOUNT_TYPE_REWARD_RETURN_VOLATILITY: Per asset market reward account given for return volatility\n - ACCOUNT_TYPE_REWARD_VALIDATOR_RANKING: Per asset market reward account given to validators by their ranking\n - ACCOUNT_TYPE_PENDING_FEE_REFERRAL_REWARD: Per asset account for pending fee referral reward payouts\n - ACCOUNT_TYPE_ORDER_MARGIN: Per asset market account for party in isolated margin mode",
          "title": "Various collateral/account types as used by Vega"
        },
        "to": {
          "type": "string",
          "description": "Public key of the destination account."
        },
        "toAccountType": {
          "type": "string",
          "enum": [
            "ACCOUNT_TYPE_UNSPECIFIED",
            "ACCOUNT_TYPE_INSURANCE",
            "ACCOUNT_TYPE_SETTLEMENT",
            "ACCOUNT_TYPE_MARGIN",
            "ACCOUNT_TYPE_GENERAL",
            "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
            "ACCOUNT_TYPE_FEES_LIQUIDITY",
            "ACCOUNT_TYPE_FEES_MAKER",
            "ACCOUNT_TYPE_BOND",
            "ACCOUNT_TYPE_EXTERNAL",
            "ACCOUNT_TYPE_GLOBAL_INSURANCE",
            "ACCOUNT_TYPE_GLOBAL_REWARD",
            "ACCOUNT_TYPE_PENDING_TRANSFERS",
            "ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES",
            "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
            "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
            "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS",
            "ACCOUNT_TYPE_HOLDING",
            "ACCOUNT_TYPE_LP_LIQUIDITY_FEES",
            "ACCOUNT_TYPE_LIQUIDITY_FEES_BONUS_DISTRIBUTION",
            "ACCOUNT_TYPE_NETWORK_TREASURY",
            "ACCOUNT_TYPE_VESTING_REWARDS",
            "ACCOUNT_TYPE_VESTED_REWARDS",
            "ACCOUNT_TYPE_REWARD_AVERAGE_POSITION",
            "ACCOUNT_TYPE_REWARD_RELATIVE_RETURN",
            "ACCOUNT_TYPE_REWARD_RETURN_VOLATILITY",
            "ACCOUNT_TYPE_REWARD_VALIDATOR_RANKING",
            "ACCOUNT_TYPE_PENDING_FEE_REFERRAL_REWARD",
            "ACCOUNT_TYPE_ORDER_MARGIN"
          ],
          "default": "ACCOUNT_TYPE_UNSPECIFIED",
          "description": "- ACCOUNT_TYPE_UNSPECIFIED: Default value\n - ACCOUNT_TYPE_INSURANCE: Insurance pool accounts contain insurance pool funds for a market\n - ACCOUNT_TYPE_SETTLEMENT: Settlement accounts exist only during settlement or mark-to-market\n - ACCOUNT_TYPE_MARGIN: Margin accounts contain funds set aside for the margin needed to support a party's open positions.\nEach party will have a margin account for each market they have traded in.\nRequired initial margin is allocated to each market from user's general account.\nCollateral in the margin account can't be withdrawn or used as margin on another market until\nit is released back to the general account.\nVega protocol uses an internal accounting system to segregate funds held as\nmargin from other funds to ensure they are never lost or 'double spent'\n\nMargin account funds will vary as margin requirements on positions change\n - ACCOUNT_TYPE_GENERAL: General accounts contain the collateral for a party that is not otherwise allocated. A party will\nhave multiple general accounts, one for each asset they want\nto trade with\n\nGeneral accounts are where funds are initially deposited or withdrawn from,\nit is also the account where funds are taken to fulfil fees and initial margin requirements\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: Infrastructure accounts contain fees earned by providing infrastructure on Vega\n - ACCOUNT_TYPE_FEES_LIQUIDITY: Liquidity accounts contain fees earned by providing liquidity on Vega markets\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned by placing orders that sit on the book\nand are then matched with an incoming order to create a trade - These fees reward parties\nwho provide the best priced liquidity that actually allows trading to take place\n - ACCOUNT_TYPE_BOND: This account is created to maintain liquidity providers funds commitments\n - ACCOUNT_TYPE_EXTERNAL: External account represents an external source (deposit/withdrawal)\n - ACCOUNT_TYPE_GLOBAL_INSURANCE: Global insurance account for the asset\n - ACCOUNT_TYPE_GLOBAL_REWARD: Global reward account for the asset\n - ACCOUNT_TYPE_PENDING_TRANSFERS: Per asset account used to store pending transfers (if any)\n - ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES: Per asset reward account for fees paid to makers\n - ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES: Per asset reward account for fees received by makers\n - ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES: Per asset reward account for fees received by liquidity providers\n - ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS: Per asset reward account for market proposers when the market goes above some trading threshold\n - ACCOUNT_TYPE_HOLDING: Per asset account for holding in-flight unfilled orders' funds\n - ACCOUNT_TYPE_LP_LIQUIDITY_FEES: Network controlled liquidity provider's account, per market, to hold accrued liquidity fees.\n - ACCOUNT_TYPE_LIQUIDITY_FEES_BONUS_DISTRIBUTION: Network controlled liquidity fees bonus distribution account, per market.\n - ACCOUNT_TYPE_NETWORK_TREASURY: Network controlled treasury\n - ACCOUNT_TYPE_VESTING_REWARDS: Account holding user's rewards for the vesting period\n - ACCOUNT_TYPE_VESTED_REWARDS: Account holding user's rewards after the vesting period\n - ACCOUNT_TYPE_REWARD_AVERAGE_POSITION: Per asset market reward account given for average position\n - ACCOUNT_TYPE_REWARD_RELATIVE_RETURN: Per asset market reward account given for relative return\n - ACCOUNT_TYPE_REWARD_RETURN_VOLATILITY: Per asset market reward account given for return volatility\n - ACCOUNT_TYPE_REWARD_VALIDATOR_RANKING: Per asset market reward account given to validators by their ranking\n - ACCOUNT_TYPE_PENDING_FEE_REFERRAL_REWARD: Per asset account for pending fee referral reward payouts\n - ACCOUNT_TYPE_ORDER_MARGIN: Per asset market account for party in isolated margin mode",
          "title": "Various collateral/account types as used by Vega"
        },
        "asset": {
          "type": "string",
          "description": "Asset ID of the asset to be transferred."
        },
        "amount": {
          "type": "string",
          "description": "Amount to be taken from the source account, as an unsigned integer scaled to the asset's decimal places."
        },
        "reference": {
          "type": "string",
          "description": "Reference to be attached to the transfer."
        },
        "oneOff": {
          "description": "Details of a one-off transfer that is executed once at a specified time.",
          "type": "object",
          "properties": {
            "deliverOn": {
              "type": "string",
              "pattern": "^[0-9]{0,19}$",
              "description": "Timestamp, in Unix nanoseconds, for when the transfer should be executed, i.e., assets transferred into the receiver's account.",
              "minimum": -9223372036854776000,
              "maximum": 9223372036854776000
            }
          }
        },
        "recurring": {
          "description": "Details of a transfer that is executed once every epoch until stopped.",
          "type": "object",
          "properties": {
            "startEpoch": {
              "type": "string",
              "pattern": "^[0-9]{0,19}$",
              "description": "First epoch from which this transfer shall be executed."
            },
            "endEpoch": {
              "type": "string",
              "pattern": "^[0-9]{0,19}$",
              "description": "Last epoch at which this transfer shall be executed."
            },
            "factor": {
              "type": "string",
              "description": "Factor that the initial transfer amount is multiplied by for each epoch that it is executed.\nFor example if the initial transfer amount is 1000 and the factor is 0.5, then the amounts transferred per epoch will be 1000, 500, 250, 125, etc."
            },
            "dispatchStrategy": {
              "type": "object",
              "properties": {
                "assetForMetric": {
                  "type": "string",
                  "description": "Asset to use for metric."
                },
                "metric": {
                  "description": "Metric to apply.",
                  "type": "string",
                  "enum": [
                    "DISPATCH_METRIC_UNSPECIFIED",
                    "DISPATCH_METRIC_MAKER_FEES_PAID",
                    "DISPATCH_METRIC_MAKER_FEES_RECEIVED",
                    "DISPATCH_METRIC_LP_FEES_RECEIVED",
                    "DISPATCH_METRIC_MARKET_VALUE",
                    "DISPATCH_METRIC_AVERAGE_POSITION",
                    "DISPATCH_METRIC_RELATIVE_RETURN",
                    "DISPATCH_METRIC_RETURN_VOLATILITY",
                    "DISPATCH_METRIC_VALIDATOR_RANKING"
                  ],
                  "default": "DISPATCH_METRIC_UNSPECIFIED",
                  "title": "- DISPATCH_METRIC_MAKER_FEES_PAID: Dispatch metric that uses the total maker fees paid in the market\n - DISPATCH_METRIC_MAKER_FEES_RECEIVED: Dispatch metric that uses the total maker fees received in the market\n - DISPATCH_METRIC_LP_FEES_RECEIVED: Dispatch metric that uses the total LP fees received in the market\n - DISPATCH_METRIC_MARKET_VALUE: Dispatch metric that uses total value of the market if above the required threshold and not paid given proposer bonus yet\n - DISPATCH_METRIC_AVERAGE_POSITION: Dispatch metric that uses the time weighted average position\n - DISPATCH_METRIC_RELATIVE_RETURN: Dispatch metric that uses the relative PNL of the party in the market\n - DISPATCH_METRIC_RETURN_VOLATILITY: Dispatch metric that uses return volatility of the party in the market\n - DISPATCH_METRIC_VALIDATOR_RANKING: Dispatch metric that uses the validator ranking of the validator as metric"
                },
                "markets": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Optional markets in scope."
                },
                "entityScope": {
                  "description": "Mandatory enum that defines the entities within scope.",
                  "type": "string",
                  "enum": [
                    "ENTITY_SCOPE_UNSPECIFIED",
                    "ENTITY_SCOPE_INDIVIDUALS",
                    "ENTITY_SCOPE_TEAMS"
                  ],
                  "default": "ENTITY_SCOPE_UNSPECIFIED",
                  "title": "- ENTITY_SCOPE_INDIVIDUALS: Rewards must be distributed directly to eligible parties.\n - ENTITY_SCOPE_TEAMS: Rewards must be distributed to directly eligible teams, and then amongst team members"
                },
                "individualScope": {
                  "description": "Optional enum if the entity scope defined is for individuals, which determines the subset of individuals that are eligible to be rewarded.",
                  "type": "string",
                  "enum": [
                    "INDIVIDUAL_SCOPE_UNSPECIFIED",
                    "INDIVIDUAL_SCOPE_ALL",
                    "INDIVIDUAL_SCOPE_IN_TEAM",
                    "INDIVIDUAL_SCOPE_NOT_IN_TEAM"
                  ],
                  "default": "INDIVIDUAL_SCOPE_UNSPECIFIED"
                },
                "teamScope": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "Optional list applicable if the reward type has a scope of teams, which allows the funder to define a list of team IDs that are eligible to be rewarded from this transfer"
                },
                "nTopPerformers": {
                  "type": "string",
                  "title": "The proportion of the top performers in the team for a given metric to be averaged for the metric calculation if the scope is team"
                },
                "stakingRequirement": {
                  "type": "string",
                  "title": "Minimum number of governance (e.g. VEGA) tokens staked for a party to be considered eligible. Defaults to 0"
                },
                "notionalTimeWeightedAveragePositionRequirement": {
                  "type": "string",
                  "title": "Minimum notional time-weighted averaged position required for a party to be considered eligible. Defaults to 0"
                },
                "windowLength": {
                  "type": "string",
                  "pattern": "^[0-9]{0,19}$",
                  "title": "Number of epochs to evaluate the metric on"
                },
                "lockPeriod": {
                  "type": "string",
                  "pattern": "^[0-9]{0,19}$",
                  "title": "Number of epochs after distribution to delay vesting of rewards by"
                },
                "distributionStrategy": {
                  "title": "Controls how the reward is distributed between qualifying parties",
                  "type": "string",
                  "enum": [
                    "DISTRIBUTION_STRATEGY_UNSPECIFIED",
                    "DISTRIBUTION_STRATEGY_PRO_RATA",
                    "DISTRIBUTION_STRATEGY_RANK"
                  ],
                  "default": "DISTRIBUTION_STRATEGY_UNSPECIFIED",
                  "description": " - DISTRIBUTION_STRATEGY_PRO_RATA: Rewards funded using the pro-rata strategy should be distributed pro-rata by each entity's reward metric, scaled by any active multipliers that party has.\n - DISTRIBUTION_STRATEGY_RANK: Rewards funded using the party rank."
                },
                "rankTable": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "startRank": {
                        "type": "integer",
                        "pattern": "^[0-9]{0,19}$",
                        "minimum": -9223372036854776000,
                        "maximum": 9223372036854776000
                      },
                      "shareRatio": {
                        "type": "integer",
                        "pattern": "^[0-9]{0,19}$",
                        "minimum": -9223372036854776000,
                        "maximum": 9223372036854776000
                      }
                    }
                  },
                  "description": "Ordered list, using start rank, defining the rank bands and share ratio for each band. Mandatory for the rank distribution strategy."
                },
                "capRewardFeeMultiple": {
                  "type": "string",
                  "description": "If set, the actual amount of rewards transferred to each public key during distribution for this transfer will be `min(calculated_reward_in_quantum, cap_reward_fee_multiple × fees_paid_this_epoch_in_quantum)."
                }
              },
              "description": "Optional parameter defining how a transfer is dispatched."
            }
          },
          "title": "Details for a recurring transfer"
        }
      },
      "title": "Command that allows a party to move assets from one account to another.\nA transfer can be set up as a single one-off transfer, or a recurring transfer that occurs once at the start of each epoch.\nEach transfer incurs a fee as specified by the network parameter `transfer.fee.factor`"
    },
    "cancelTransfer": {
      "type": "object",
      "properties": {
        "transferId": {
          "type": "string",
          "description": "Transfer ID of the transfer to cancel."
        }
      },
      "description": "Command that can be used by the party that initiated a transfer to instruct the network to stop an active recurring transaction."
    },
    "announceNode": {
      "type": "object",
      "properties": {
        "vegaPubKey": {
          "type": "string",
          "description": "Vega public key of the node being announced."
        },
        "ethereumAddress": {
          "type": "string",
          "description": "Ethereum public key of the node being announced."
        },
        "chainPubKey": {
          "type": "string",
          "description": "Public key for the blockchain, currently the node's CometBFT key."
        },
        "infoUrl": {
          "type": "string",
          "description": "URL to the node operators homepage allowing stake holders to make an informed decision when delegating."
        },
        "country": {
          "type": "string",
          "description": "Country code (ISO 3166-1 alpha-2) for the location of the node."
        },
        "id": {
          "type": "string",
          "description": "Node ID of the validator, which is the node's public master key."
        },
        "name": {
          "type": "string",
          "description": "Human-readable name of the node."
        },
        "avatarUrl": {
          "type": "string",
          "description": "URL to the node operator's avatar."
        },
        "vegaPubKeyIndex": {
          "type": "integer",
          "pattern": "^[0-9]{0,19}$",
          "description": "Vega public key derivation index.",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "fromEpoch": {
          "type": "string",
          "pattern": "^[0-9]{0,19}$",
          "description": "Epoch from which the node is expected to be ready to validate blocks."
        },
        "ethereumSignature": {
          "description": "Signature from the node made using the ethereum wallet.",
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "Hex encoded bytes of the signature."
            },
            "algo": {
              "type": "string",
              "description": "Algorithm used to create the signature."
            },
            "version": {
              "type": "integer",
              "pattern": "^[0-9]{0,19}$",
              "description": "Version of the algorithm used to create the signature.",
              "minimum": -9223372036854776000,
              "maximum": 9223372036854776000
            }
          }
        },
        "vegaSignature": {
          "description": "Signature from the node made using the Vega wallet.",
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "Hex encoded bytes of the signature."
            },
            "algo": {
              "type": "string",
              "description": "Algorithm used to create the signature."
            },
            "version": {
              "type": "integer",
              "pattern": "^[0-9]{0,19}$",
              "description": "Version of the algorithm used to create the signature.",
              "minimum": -9223372036854776000,
              "maximum": 9223372036854776000
            }
          }
        },
        "submitterAddress": {
          "type": "string",
          "description": "Ethereum public key to use as a submitter to allow automatic signature generation."
        }
      },
      "description": "A command that allows a new node operator to announce themselves to the network as a new validator."
    },
    "oracleDataSubmission": {
      "type": "object",
      "properties": {
        "source": {
          "description": "Source from which the data is coming from.",
          "type": "string",
          "enum": [
            "ORACLE_SOURCE_UNSPECIFIED",
            "ORACLE_SOURCE_OPEN_ORACLE",
            "ORACLE_SOURCE_JSON",
            "ORACLE_SOURCE_ETHEREUM"
          ],
          "default": "ORACLE_SOURCE_UNSPECIFIED",
          "title": "Supported oracle sources"
        },
        "payload": {
          "type": "string",
          "pattern": "^[\\w\\d+\\/=]*$",
          "description": "Data provided by the data source."
        }
      },
      "title": "Command to submit new oracle data from third party providers"
    },
    "protocolUpgradeProposal": {
      "type": "object",
      "properties": {
        "upgradeBlockHeight": {
          "type": "string",
          "pattern": "^[0-9]{0,19}$",
          "description": "Block height at which to perform the upgrade."
        },
        "vegaReleaseTag": {
          "type": "string",
          "description": "Release tag for the Vega binary."
        }
      },
      "description": "A validator command sent manually by a node operator to propose a protocol upgrade."
    },
    "issueSignatures": {
      "type": "object",
      "properties": {
        "submitter": {
          "type": "string",
          "description": "Ethereum address which will submit the signatures to the smart contract."
        },
        "kind": {
          "description": "What kind of signatures to generate, namely for whether a signer is being added or removed.",
          "type": "string",
          "enum": [
            "NODE_SIGNATURE_KIND_UNSPECIFIED",
            "NODE_SIGNATURE_KIND_ASSET_NEW",
            "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL",
            "NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_ADDED",
            "NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_REMOVED",
            "NODE_SIGNATURE_KIND_ASSET_UPDATE"
          ],
          "default": "NODE_SIGNATURE_KIND_UNSPECIFIED",
          "title": "Kind of signature created by a node, for example, allow-listing a new asset, withdrawal etc"
        },
        "validatorNodeId": {
          "type": "string",
          "description": "Node ID of the validator node that will be signed in or out of the smart contract."
        }
      },
      "description": "Command that can be used by a validator to instruct the network to generate signatures to add or remove validators from the multisig-control contract.\nSignatures can only be generated for validator nodes that have been promoted or demoted from the consensus validator set, and any attempt to generate signatures for another node will be rejected.\nThe generated signatures can only be submitted to the contract by the Ethereum addresses included in the command."
    },
    "batchMarketInstructions": {
      "type": "object",
      "properties": {
        "cancellations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "orderId": {
                "type": "string",
                "description": "Restrict cancellations to an order with the given ID. If set, then a market ID must also be provided."
              },
              "marketId": {
                "type": "string",
                "description": "Restrict cancellations to those submitted to the given market. If not set, all stop orders across all markets will be cancelled."
              }
            },
            "description": "A command that instructs the network to cancel orders, active or partially filled, that were previously submitted by the sender of this transaction.\nIt is not possible to cancel another party's order with this command."
          },
          "description": "List of order cancellations to be processed sequentially."
        },
        "amendments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "orderId": {
                "type": "string",
                "description": "ID of the order to amend."
              },
              "marketId": {
                "type": "string",
                "description": "Market ID that the order was originally submitted to."
              },
              "price": {
                "type": "string",
                "description": "New price for the order. This field is an unsigned integer scaled to the market's decimal places."
              },
              "sizeDelta": {
                "type": "string",
                "pattern": "^[0-9]{0,19}$",
                "description": "Amend the size for the order by the delta specified:\n- To reduce the size from the current value set a negative integer value\n- To increase the size from the current value, set a positive integer value\n- To leave the size unchanged set a value of zero\nThis field needs to be scaled using the market's position decimal places.\nIf specified, size must not be set.",
                "minimum": -9223372036854776000,
                "maximum": 9223372036854776000
              },
              "expiresAt": {
                "type": "string",
                "pattern": "^[0-9]{0,19}$",
                "description": "Timestamp, in Unix nanoseconds, for the new expiry time for the order.",
                "minimum": -9223372036854776000,
                "maximum": 9223372036854776000
              },
              "timeInForce": {
                "description": "New time in force for the order.",
                "type": "string",
                "enum": [
                  "TIME_IN_FORCE_UNSPECIFIED",
                  "TIME_IN_FORCE_GTC",
                  "TIME_IN_FORCE_GTT",
                  "TIME_IN_FORCE_IOC",
                  "TIME_IN_FORCE_FOK",
                  "TIME_IN_FORCE_GFA",
                  "TIME_IN_FORCE_GFN"
                ],
                "default": "TIME_IN_FORCE_UNSPECIFIED",
                "title": "Time In Force for an order"
              },
              "peggedOffset": {
                "type": "string",
                "description": "New pegged offset for the order.\nThis field is an unsigned integer scaled to the market's decimal places."
              },
              "peggedReference": {
                "description": "New pegged reference for the order.",
                "type": "string",
                "enum": [
                  "PEGGED_REFERENCE_UNSPECIFIED",
                  "PEGGED_REFERENCE_MID",
                  "PEGGED_REFERENCE_BEST_BID",
                  "PEGGED_REFERENCE_BEST_ASK"
                ],
                "default": "PEGGED_REFERENCE_UNSPECIFIED",
                "title": "Pegged reference defines which price point a pegged order is linked to - meaning\nthe price for a pegged order is calculated from the value of the reference price point"
              },
              "size": {
                "type": "string",
                "pattern": "^[0-9]{0,19}$",
                "description": "New size for the order.\nAmending the size causes the size and remaining part of the order to be changed by the difference between the original and amended size.\n- Specifying a size smaller than the current size leaves the order at its current order book position.\n- Specifying a size larger than the current size removes and reinserts the order at the back of the price level.\n- Specifying a size that results in the remaining part of the order being reduced to zero cancels the order.\nThis field is an unsigned integer scaled to the market's decimal places.\nIf specified, size_delta must be set to 0."
              }
            },
            "description": "A command that allows a party to update the details of an existing order.\nAny field that is left unset or as a default value indicates that this field on the original order will be left unchanged.\nIt is not possible to change an order's type through this command."
          },
          "description": "List of order amendments to be processed sequentially."
        },
        "submissions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "marketId": {
                "type": "string",
                "description": "Market ID to submit the order to."
              },
              "price": {
                "type": "string",
                "description": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places,\nrequired field for limit orders, however it is not required for market orders.\nThis field is an unsigned integer scaled to the market's decimal places."
              },
              "size": {
                "type": "string",
                "pattern": "^[0-9]{0,19}$",
                "description": "Size for the order, for example, in a futures market the size equals the number of units."
              },
              "side": {
                "description": "Which side of the order book the order is for, e.g. buy or sell.",
                "type": "string",
                "enum": [
                  "SIDE_UNSPECIFIED",
                  "SIDE_BUY",
                  "SIDE_SELL"
                ],
                "default": "SIDE_UNSPECIFIED",
                "title": "Side relates to the direction of an order, to Buy, or Sell"
              },
              "timeInForce": {
                "description": "Time in force indicates how long an order will remain active before it is executed or expires..",
                "type": "string",
                "enum": [
                  "TIME_IN_FORCE_UNSPECIFIED",
                  "TIME_IN_FORCE_GTC",
                  "TIME_IN_FORCE_GTT",
                  "TIME_IN_FORCE_IOC",
                  "TIME_IN_FORCE_FOK",
                  "TIME_IN_FORCE_GFA",
                  "TIME_IN_FORCE_GFN"
                ],
                "default": "TIME_IN_FORCE_UNSPECIFIED",
                "title": "Time In Force for an order"
              },
              "expiresAt": {
                "type": "string",
                "pattern": "^[0-9]{0,19}$",
                "description": "Timestamp, in Unix nanoseconds, for when the order will expire. Can only be set when the order's time-in-force is GTT.",
                "minimum": -9223372036854776000,
                "maximum": 9223372036854776000
              },
              "type": {
                "description": "Type of the order.",
                "type": "string",
                "enum": [
                  "TYPE_UNSPECIFIED",
                  "TYPE_LIMIT",
                  "TYPE_MARKET",
                  "TYPE_NETWORK"
                ],
                "default": "TYPE_UNSPECIFIED",
                "title": "Type values for an order"
              },
              "reference": {
                "type": "string",
                "description": "Arbitrary optional reference for the order, to be used as a human-readable non-unique identifier for the order."
              },
              "peggedOrder": {
                "description": "Pegged order details. If set, the order's price will be offset from a particular reference price of the order book at all times.",
                "type": "object",
                "properties": {
                  "reference": {
                    "description": "Price point the order is linked to.",
                    "type": "string",
                    "enum": [
                      "PEGGED_REFERENCE_UNSPECIFIED",
                      "PEGGED_REFERENCE_MID",
                      "PEGGED_REFERENCE_BEST_BID",
                      "PEGGED_REFERENCE_BEST_ASK"
                    ],
                    "default": "PEGGED_REFERENCE_UNSPECIFIED",
                    "title": "Pegged reference defines which price point a pegged order is linked to - meaning\nthe price for a pegged order is calculated from the value of the reference price point"
                  },
                  "offset": {
                    "type": "string",
                    "description": "Offset from the price reference."
                  }
                },
                "title": "Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET\nThey can be used for any limit order that is valid during continuous trading"
              },
              "postOnly": {
                "type": "boolean",
                "description": "If set, the order will only be executed if it would not trade on entry to the order book. Only valid for limit orders."
              },
              "reduceOnly": {
                "type": "boolean",
                "description": "If set, the order will only be executed if the outcome of the trade moves the trader's position closer to 0.\nOnly valid for non-persistent orders."
              },
              "icebergOpts": {
                "description": "Iceberg order details. If set, the order will exist on the order book in chunks.",
                "type": "object",
                "properties": {
                  "peakSize": {
                    "type": "string",
                    "pattern": "^[0-9]{0,19}$",
                    "description": "Size of the order that is made visible and can be traded with during the execution of a single order."
                  },
                  "minimumVisibleSize": {
                    "type": "string",
                    "pattern": "^[0-9]{0,19}$",
                    "description": "Minimum allowed remaining size of the order before it is replenished back to its peak size."
                  }
                },
                "title": "Iceberg order options"
              }
            },
            "description": "A command that submits an order to the Vega network for a given market."
          },
          "description": "List of order submissions to be processed sequentially."
        },
        "stopOrdersCancellation": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "marketId": {
                "type": "string",
                "description": "Restrict cancellations to those submitted to the given market. If not set, all stop orders across all markets will be cancelled."
              },
              "stopOrderId": {
                "type": "string",
                "description": "Restrict cancellations to a stop order with the given ID. If set, then a market ID must also be provided."
              }
            },
            "description": "A command that instructs the network to cancel untriggered stop orders that were submitted by the sender of this transaction.\nIf any cancelled stop order is part of an OCO, both stop orders will be cancelled.\nIt is not possible to cancel another party's stop orders with this command."
          },
          "description": "List of stop order cancellations to be processed sequentially."
        },
        "stopOrdersSubmission": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "risesAbove": {
                "description": "Stop order that will be triggered if the price rises above a given trigger price.",
                "type": "object",
                "properties": {
                  "orderSubmission": {
                    "type": "object",
                    "properties": {
                      "marketId": {
                        "type": "string",
                        "description": "Market ID to submit the order to."
                      },
                      "price": {
                        "type": "string",
                        "description": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places,\nrequired field for limit orders, however it is not required for market orders.\nThis field is an unsigned integer scaled to the market's decimal places."
                      },
                      "size": {
                        "type": "string",
                        "pattern": "^[0-9]{0,19}$",
                        "description": "Size for the order, for example, in a futures market the size equals the number of units."
                      },
                      "side": {
                        "description": "Which side of the order book the order is for, e.g. buy or sell.",
                        "type": "string",
                        "enum": [
                          "SIDE_UNSPECIFIED",
                          "SIDE_BUY",
                          "SIDE_SELL"
                        ],
                        "default": "SIDE_UNSPECIFIED",
                        "title": "Side relates to the direction of an order, to Buy, or Sell"
                      },
                      "timeInForce": {
                        "description": "Time in force indicates how long an order will remain active before it is executed or expires..",
                        "type": "string",
                        "enum": [
                          "TIME_IN_FORCE_UNSPECIFIED",
                          "TIME_IN_FORCE_GTC",
                          "TIME_IN_FORCE_GTT",
                          "TIME_IN_FORCE_IOC",
                          "TIME_IN_FORCE_FOK",
                          "TIME_IN_FORCE_GFA",
                          "TIME_IN_FORCE_GFN"
                        ],
                        "default": "TIME_IN_FORCE_UNSPECIFIED",
                        "title": "Time In Force for an order"
                      },
                      "expiresAt": {
                        "type": "string",
                        "pattern": "^[0-9]{0,19}$",
                        "description": "Timestamp, in Unix nanoseconds, for when the order will expire. Can only be set when the order's time-in-force is GTT.",
                        "minimum": -9223372036854776000,
                        "maximum": 9223372036854776000
                      },
                      "type": {
                        "description": "Type of the order.",
                        "type": "string",
                        "enum": [
                          "TYPE_UNSPECIFIED",
                          "TYPE_LIMIT",
                          "TYPE_MARKET",
                          "TYPE_NETWORK"
                        ],
                        "default": "TYPE_UNSPECIFIED",
                        "title": "Type values for an order"
                      },
                      "reference": {
                        "type": "string",
                        "description": "Arbitrary optional reference for the order, to be used as a human-readable non-unique identifier for the order."
                      },
                      "peggedOrder": {
                        "description": "Pegged order details. If set, the order's price will be offset from a particular reference price of the order book at all times.",
                        "type": "object",
                        "properties": {
                          "reference": {
                            "description": "Price point the order is linked to.",
                            "type": "string",
                            "enum": [
                              "PEGGED_REFERENCE_UNSPECIFIED",
                              "PEGGED_REFERENCE_MID",
                              "PEGGED_REFERENCE_BEST_BID",
                              "PEGGED_REFERENCE_BEST_ASK"
                            ],
                            "default": "PEGGED_REFERENCE_UNSPECIFIED",
                            "title": "Pegged reference defines which price point a pegged order is linked to - meaning\nthe price for a pegged order is calculated from the value of the reference price point"
                          },
                          "offset": {
                            "type": "string",
                            "description": "Offset from the price reference."
                          }
                        },
                        "title": "Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET\nThey can be used for any limit order that is valid during continuous trading"
                      },
                      "postOnly": {
                        "type": "boolean",
                        "description": "If set, the order will only be executed if it would not trade on entry to the order book. Only valid for limit orders."
                      },
                      "reduceOnly": {
                        "type": "boolean",
                        "description": "If set, the order will only be executed if the outcome of the trade moves the trader's position closer to 0.\nOnly valid for non-persistent orders."
                      },
                      "icebergOpts": {
                        "description": "Iceberg order details. If set, the order will exist on the order book in chunks.",
                        "type": "object",
                        "properties": {
                          "peakSize": {
                            "type": "string",
                            "pattern": "^[0-9]{0,19}$",
                            "description": "Size of the order that is made visible and can be traded with during the execution of a single order."
                          },
                          "minimumVisibleSize": {
                            "type": "string",
                            "pattern": "^[0-9]{0,19}$",
                            "description": "Minimum allowed remaining size of the order before it is replenished back to its peak size."
                          }
                        },
                        "title": "Iceberg order options"
                      }
                    },
                    "description": "A command that submits an order to the Vega network for a given market."
                  },
                  "expiresAt": {
                    "type": "string",
                    "pattern": "^[0-9]{0,19}$",
                    "description": "Timestamp, in Unix nanoseconds, for when the stop order should expire. If not set the stop order will not expire.",
                    "minimum": -9223372036854776000,
                    "maximum": 9223372036854776000
                  },
                  "expiryStrategy": {
                    "description": "Strategy to adopt if the expiry time is reached.",
                    "type": "string",
                    "enum": [
                      "EXPIRY_STRATEGY_UNSPECIFIED",
                      "EXPIRY_STRATEGY_CANCELS",
                      "EXPIRY_STRATEGY_SUBMIT"
                    ],
                    "default": "EXPIRY_STRATEGY_UNSPECIFIED"
                  },
                  "sizeOverrideSetting": {
                    "title": "Indicates if this order is linked to an order or position to derive the order size",
                    "type": "string",
                    "enum": [
                      "SIZE_OVERRIDE_SETTING_UNSPECIFIED",
                      "SIZE_OVERRIDE_SETTING_NONE",
                      "SIZE_OVERRIDE_SETTING_POSITION"
                    ],
                    "default": "SIZE_OVERRIDE_SETTING_UNSPECIFIED"
                  },
                  "sizeOverrideValue": {
                    "title": "If this order is linked to a position, provide an optional scaling factor",
                    "type": "object",
                    "properties": {
                      "percentage": {
                        "type": "string",
                        "title": "Scaling percentage of the current position’s size"
                      }
                    }
                  },
                  "price": {
                    "type": "string",
                    "description": "Order will be submitted if the last traded price on the market breaches the given price."
                  },
                  "trailingPercentOffset": {
                    "type": "string",
                    "description": "Order will be submitted if the last traded price has moved the given percent from the highest/lowest mark price since the stop order was submitted."
                  }
                }
              },
              "fallsBelow": {
                "description": "Stop order that will be triggered if the price falls below a given trigger price.",
                "type": "object",
                "properties": {
                  "orderSubmission": {
                    "type": "object",
                    "properties": {
                      "marketId": {
                        "type": "string",
                        "description": "Market ID to submit the order to."
                      },
                      "price": {
                        "type": "string",
                        "description": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places,\nrequired field for limit orders, however it is not required for market orders.\nThis field is an unsigned integer scaled to the market's decimal places."
                      },
                      "size": {
                        "type": "string",
                        "pattern": "^[0-9]{0,19}$",
                        "description": "Size for the order, for example, in a futures market the size equals the number of units."
                      },
                      "side": {
                        "description": "Which side of the order book the order is for, e.g. buy or sell.",
                        "type": "string",
                        "enum": [
                          "SIDE_UNSPECIFIED",
                          "SIDE_BUY",
                          "SIDE_SELL"
                        ],
                        "default": "SIDE_UNSPECIFIED",
                        "title": "Side relates to the direction of an order, to Buy, or Sell"
                      },
                      "timeInForce": {
                        "description": "Time in force indicates how long an order will remain active before it is executed or expires..",
                        "type": "string",
                        "enum": [
                          "TIME_IN_FORCE_UNSPECIFIED",
                          "TIME_IN_FORCE_GTC",
                          "TIME_IN_FORCE_GTT",
                          "TIME_IN_FORCE_IOC",
                          "TIME_IN_FORCE_FOK",
                          "TIME_IN_FORCE_GFA",
                          "TIME_IN_FORCE_GFN"
                        ],
                        "default": "TIME_IN_FORCE_UNSPECIFIED",
                        "title": "Time In Force for an order"
                      },
                      "expiresAt": {
                        "type": "string",
                        "pattern": "^[0-9]{0,19}$",
                        "description": "Timestamp, in Unix nanoseconds, for when the order will expire. Can only be set when the order's time-in-force is GTT.",
                        "minimum": -9223372036854776000,
                        "maximum": 9223372036854776000
                      },
                      "type": {
                        "description": "Type of the order.",
                        "type": "string",
                        "enum": [
                          "TYPE_UNSPECIFIED",
                          "TYPE_LIMIT",
                          "TYPE_MARKET",
                          "TYPE_NETWORK"
                        ],
                        "default": "TYPE_UNSPECIFIED",
                        "title": "Type values for an order"
                      },
                      "reference": {
                        "type": "string",
                        "description": "Arbitrary optional reference for the order, to be used as a human-readable non-unique identifier for the order."
                      },
                      "peggedOrder": {
                        "description": "Pegged order details. If set, the order's price will be offset from a particular reference price of the order book at all times.",
                        "type": "object",
                        "properties": {
                          "reference": {
                            "description": "Price point the order is linked to.",
                            "type": "string",
                            "enum": [
                              "PEGGED_REFERENCE_UNSPECIFIED",
                              "PEGGED_REFERENCE_MID",
                              "PEGGED_REFERENCE_BEST_BID",
                              "PEGGED_REFERENCE_BEST_ASK"
                            ],
                            "default": "PEGGED_REFERENCE_UNSPECIFIED",
                            "title": "Pegged reference defines which price point a pegged order is linked to - meaning\nthe price for a pegged order is calculated from the value of the reference price point"
                          },
                          "offset": {
                            "type": "string",
                            "description": "Offset from the price reference."
                          }
                        },
                        "title": "Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET\nThey can be used for any limit order that is valid during continuous trading"
                      },
                      "postOnly": {
                        "type": "boolean",
                        "description": "If set, the order will only be executed if it would not trade on entry to the order book. Only valid for limit orders."
                      },
                      "reduceOnly": {
                        "type": "boolean",
                        "description": "If set, the order will only be executed if the outcome of the trade moves the trader's position closer to 0.\nOnly valid for non-persistent orders."
                      },
                      "icebergOpts": {
                        "description": "Iceberg order details. If set, the order will exist on the order book in chunks.",
                        "type": "object",
                        "properties": {
                          "peakSize": {
                            "type": "string",
                            "pattern": "^[0-9]{0,19}$",
                            "description": "Size of the order that is made visible and can be traded with during the execution of a single order."
                          },
                          "minimumVisibleSize": {
                            "type": "string",
                            "pattern": "^[0-9]{0,19}$",
                            "description": "Minimum allowed remaining size of the order before it is replenished back to its peak size."
                          }
                        },
                        "title": "Iceberg order options"
                      }
                    },
                    "description": "A command that submits an order to the Vega network for a given market."
                  },
                  "expiresAt": {
                    "type": "string",
                    "pattern": "^[0-9]{0,19}$",
                    "description": "Timestamp, in Unix nanoseconds, for when the stop order should expire. If not set the stop order will not expire.",
                    "minimum": -9223372036854776000,
                    "maximum": 9223372036854776000
                  },
                  "expiryStrategy": {
                    "description": "Strategy to adopt if the expiry time is reached.",
                    "type": "string",
                    "enum": [
                      "EXPIRY_STRATEGY_UNSPECIFIED",
                      "EXPIRY_STRATEGY_CANCELS",
                      "EXPIRY_STRATEGY_SUBMIT"
                    ],
                    "default": "EXPIRY_STRATEGY_UNSPECIFIED"
                  },
                  "sizeOverrideSetting": {
                    "title": "Indicates if this order is linked to an order or position to derive the order size",
                    "type": "string",
                    "enum": [
                      "SIZE_OVERRIDE_SETTING_UNSPECIFIED",
                      "SIZE_OVERRIDE_SETTING_NONE",
                      "SIZE_OVERRIDE_SETTING_POSITION"
                    ],
                    "default": "SIZE_OVERRIDE_SETTING_UNSPECIFIED"
                  },
                  "sizeOverrideValue": {
                    "title": "If this order is linked to a position, provide an optional scaling factor",
                    "type": "object",
                    "properties": {
                      "percentage": {
                        "type": "string",
                        "title": "Scaling percentage of the current position’s size"
                      }
                    }
                  },
                  "price": {
                    "type": "string",
                    "description": "Order will be submitted if the last traded price on the market breaches the given price."
                  },
                  "trailingPercentOffset": {
                    "type": "string",
                    "description": "Order will be submitted if the last traded price has moved the given percent from the highest/lowest mark price since the stop order was submitted."
                  }
                }
              }
            },
            "description": "A command that allows a party to submit a stop order for a given market.\nA stop order is a normal order that remains off the order book and is only submitted if a given trigger is breached from a particular direction.\nIf both rises-above and falls-below are configured, then if one is triggered the other will be cancelled (OCO)."
          },
          "description": "List of stop order submissions to be processed sequentially."
        },
        "updateMarginMode": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "marketId": {
                "type": "string",
                "description": "Market to change margin mode for."
              },
              "mode": {
                "description": "Margin mode to use.",
                "type": "string",
                "enum": [
                  "MODE_UNSPECIFIED",
                  "MODE_CROSS_MARGIN",
                  "MODE_ISOLATED_MARGIN"
                ],
                "default": "MODE_UNSPECIFIED",
                "title": "- MODE_UNSPECIFIED: Never valid.\n - MODE_CROSS_MARGIN: Cross margin mode - margin is dynamically acquired and released as a position is marked to market\n - MODE_ISOLATED_MARGIN: Isolated margin mode - margin for any newly opened position volume is transferred to the margin account when the trade is executed"
              },
              "marginFactor": {
                "type": "string",
                "title": "Margin factor to use for margin in isolated mode. It is a multiplier that defines how much margin needs to be set aside"
              }
            }
          },
          "title": "Update margin mode instruction"
        }
      },
      "description": "A command that allows the submission of a batch market instruction which wraps up multiple market instructions into a single transaction.\nThese instructions are then processed sequentially in the following order:\n- OrderCancellation\n- OrderAmendment\n- OrderSubmission\n- StopOrderSubmission\nwhere the maximum allow of instructions in a batch is controlled by the network parameter \"spam.protection.max.batchSize\"."
    },
    "keyRotateSubmission": {
      "type": "object",
      "properties": {
        "newPubKeyIndex": {
          "type": "integer",
          "pattern": "^[0-9]{0,19}$",
          "description": "New Vega public key derivation index.",
          "minimum": -9223372036854776000,
          "maximum": 9223372036854776000
        },
        "targetBlock": {
          "type": "string",
          "pattern": "^[0-9]{0,19}$",
          "description": "Block height at which the key rotation will take effect."
        },
        "newPubKey": {
          "type": "string",
          "description": "Vega public key that would be rotated to."
        },
        "currentPubKeyHash": {
          "type": "string",
          "description": "Hash of the node's current Vega public key."
        }
      },
      "description": "A validator command sent manually that allows a node operator to indicate to the network that their node's Vega key will be rotated."
    },
    "ethereumKeyRotateSubmission": {
      "type": "object",
      "properties": {
        "targetBlock": {
          "type": "string",
          "pattern": "^[0-9]{0,19}$",
          "description": "Block height at which the key rotation will take effect."
        },
        "newAddress": {
          "type": "string",
          "description": "Ethereum address that is being rotated to."
        },
        "currentAddress": {
          "type": "string",
          "description": "Ethereum address of the node's current Ethereum keys."
        },
        "submitterAddress": {
          "type": "string",
          "description": "Ethereum public key to use as a submitter to allow automatic signature generation."
        },
        "ethereumSignature": {
          "description": "Signature signed by the new Ethereum key that can be verified to prove ownership.",
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "Hex encoded bytes of the signature."
            },
            "algo": {
              "type": "string",
              "description": "Algorithm used to create the signature."
            },
            "version": {
              "type": "integer",
              "pattern": "^[0-9]{0,19}$",
              "description": "Version of the algorithm used to create the signature.",
              "minimum": -9223372036854776000,
              "maximum": 9223372036854776000
            }
          }
        }
      },
      "description": "A validator command sent manually that allows a node operator to indicate to the network that their node's Ethereum key will be rotated."
    },
    "stopOrdersSubmission": {
      "type": "object",
      "properties": {
        "risesAbove": {
          "description": "Stop order that will be triggered if the price rises above a given trigger price.",
          "type": "object",
          "properties": {
            "orderSubmission": {
              "type": "object",
              "properties": {
                "marketId": {
                  "type": "string",
                  "description": "Market ID to submit the order to."
                },
                "price": {
                  "type": "string",
                  "description": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places,\nrequired field for limit orders, however it is not required for market orders.\nThis field is an unsigned integer scaled to the market's decimal places."
                },
                "size": {
                  "type": "string",
                  "pattern": "^[0-9]{0,19}$",
                  "description": "Size for the order, for example, in a futures market the size equals the number of units."
                },
                "side": {
                  "description": "Which side of the order book the order is for, e.g. buy or sell.",
                  "type": "string",
                  "enum": [
                    "SIDE_UNSPECIFIED",
                    "SIDE_BUY",
                    "SIDE_SELL"
                  ],
                  "default": "SIDE_UNSPECIFIED",
                  "title": "Side relates to the direction of an order, to Buy, or Sell"
                },
                "timeInForce": {
                  "description": "Time in force indicates how long an order will remain active before it is executed or expires..",
                  "type": "string",
                  "enum": [
                    "TIME_IN_FORCE_UNSPECIFIED",
                    "TIME_IN_FORCE_GTC",
                    "TIME_IN_FORCE_GTT",
                    "TIME_IN_FORCE_IOC",
                    "TIME_IN_FORCE_FOK",
                    "TIME_IN_FORCE_GFA",
                    "TIME_IN_FORCE_GFN"
                  ],
                  "default": "TIME_IN_FORCE_UNSPECIFIED",
                  "title": "Time In Force for an order"
                },
                "expiresAt": {
                  "type": "string",
                  "pattern": "^[0-9]{0,19}$",
                  "description": "Timestamp, in Unix nanoseconds, for when the order will expire. Can only be set when the order's time-in-force is GTT.",
                  "minimum": -9223372036854776000,
                  "maximum": 9223372036854776000
                },
                "type": {
                  "description": "Type of the order.",
                  "type": "string",
                  "enum": [
                    "TYPE_UNSPECIFIED",
                    "TYPE_LIMIT",
                    "TYPE_MARKET",
                    "TYPE_NETWORK"
                  ],
                  "default": "TYPE_UNSPECIFIED",
                  "title": "Type values for an order"
                },
                "reference": {
                  "type": "string",
                  "description": "Arbitrary optional reference for the order, to be used as a human-readable non-unique identifier for the order."
                },
                "peggedOrder": {
                  "description": "Pegged order details. If set, the order's price will be offset from a particular reference price of the order book at all times.",
                  "type": "object",
                  "properties": {
                    "reference": {
                      "description": "Price point the order is linked to.",
                      "type": "string",
                      "enum": [
                        "PEGGED_REFERENCE_UNSPECIFIED",
                        "PEGGED_REFERENCE_MID",
                        "PEGGED_REFERENCE_BEST_BID",
                        "PEGGED_REFERENCE_BEST_ASK"
                      ],
                      "default": "PEGGED_REFERENCE_UNSPECIFIED",
                      "title": "Pegged reference defines which price point a pegged order is linked to - meaning\nthe price for a pegged order is calculated from the value of the reference price point"
                    },
                    "offset": {
                      "type": "string",
                      "description": "Offset from the price reference."
                    }
                  },
                  "title": "Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET\nThey can be used for any limit order that is valid during continuous trading"
                },
                "postOnly": {
                  "type": "boolean",
                  "description": "If set, the order will only be executed if it would not trade on entry to the order book. Only valid for limit orders."
                },
                "reduceOnly": {
                  "type": "boolean",
                  "description": "If set, the order will only be executed if the outcome of the trade moves the trader's position closer to 0.\nOnly valid for non-persistent orders."
                },
                "icebergOpts": {
                  "description": "Iceberg order details. If set, the order will exist on the order book in chunks.",
                  "type": "object",
                  "properties": {
                    "peakSize": {
                      "type": "string",
                      "pattern": "^[0-9]{0,19}$",
                      "description": "Size of the order that is made visible and can be traded with during the execution of a single order."
                    },
                    "minimumVisibleSize": {
                      "type": "string",
                      "pattern": "^[0-9]{0,19}$",
                      "description": "Minimum allowed remaining size of the order before it is replenished back to its peak size."
                    }
                  },
                  "title": "Iceberg order options"
                }
              },
              "description": "A command that submits an order to the Vega network for a given market."
            },
            "expiresAt": {
              "type": "string",
              "pattern": "^[0-9]{0,19}$",
              "description": "Timestamp, in Unix nanoseconds, for when the stop order should expire. If not set the stop order will not expire.",
              "minimum": -9223372036854776000,
              "maximum": 9223372036854776000
            },
            "expiryStrategy": {
              "description": "Strategy to adopt if the expiry time is reached.",
              "type": "string",
              "enum": [
                "EXPIRY_STRATEGY_UNSPECIFIED",
                "EXPIRY_STRATEGY_CANCELS",
                "EXPIRY_STRATEGY_SUBMIT"
              ],
              "default": "EXPIRY_STRATEGY_UNSPECIFIED"
            },
            "sizeOverrideSetting": {
              "title": "Indicates if this order is linked to an order or position to derive the order size",
              "type": "string",
              "enum": [
                "SIZE_OVERRIDE_SETTING_UNSPECIFIED",
                "SIZE_OVERRIDE_SETTING_NONE",
                "SIZE_OVERRIDE_SETTING_POSITION"
              ],
              "default": "SIZE_OVERRIDE_SETTING_UNSPECIFIED"
            },
            "sizeOverrideValue": {
              "title": "If this order is linked to a position, provide an optional scaling factor",
              "type": "object",
              "properties": {
                "percentage": {
                  "type": "string",
                  "title": "Scaling percentage of the current position’s size"
                }
              }
            },
            "price": {
              "type": "string",
              "description": "Order will be submitted if the last traded price on the market breaches the given price."
            },
            "trailingPercentOffset": {
              "type": "string",
              "description": "Order will be submitted if the last traded price has moved the given percent from the highest/lowest mark price since the stop order was submitted."
            }
          }
        },
        "fallsBelow": {
          "description": "Stop order that will be triggered if the price falls below a given trigger price.",
          "type": "object",
          "properties": {
            "orderSubmission": {
              "type": "object",
              "properties": {
                "marketId": {
                  "type": "string",
                  "description": "Market ID to submit the order to."
                },
                "price": {
                  "type": "string",
                  "description": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places,\nrequired field for limit orders, however it is not required for market orders.\nThis field is an unsigned integer scaled to the market's decimal places."
                },
                "size": {
                  "type": "string",
                  "pattern": "^[0-9]{0,19}$",
                  "description": "Size for the order, for example, in a futures market the size equals the number of units."
                },
                "side": {
                  "description": "Which side of the order book the order is for, e.g. buy or sell.",
                  "type": "string",
                  "enum": [
                    "SIDE_UNSPECIFIED",
                    "SIDE_BUY",
                    "SIDE_SELL"
                  ],
                  "default": "SIDE_UNSPECIFIED",
                  "title": "Side relates to the direction of an order, to Buy, or Sell"
                },
                "timeInForce": {
                  "description": "Time in force indicates how long an order will remain active before it is executed or expires..",
                  "type": "string",
                  "enum": [
                    "TIME_IN_FORCE_UNSPECIFIED",
                    "TIME_IN_FORCE_GTC",
                    "TIME_IN_FORCE_GTT",
                    "TIME_IN_FORCE_IOC",
                    "TIME_IN_FORCE_FOK",
                    "TIME_IN_FORCE_GFA",
                    "TIME_IN_FORCE_GFN"
                  ],
                  "default": "TIME_IN_FORCE_UNSPECIFIED",
                  "title": "Time In Force for an order"
                },
                "expiresAt": {
                  "type": "string",
                  "pattern": "^[0-9]{0,19}$",
                  "description": "Timestamp, in Unix nanoseconds, for when the order will expire. Can only be set when the order's time-in-force is GTT.",
                  "minimum": -9223372036854776000,
                  "maximum": 9223372036854776000
                },
                "type": {
                  "description": "Type of the order.",
                  "type": "string",
                  "enum": [
                    "TYPE_UNSPECIFIED",
                    "TYPE_LIMIT",
                    "TYPE_MARKET",
                    "TYPE_NETWORK"
                  ],
                  "default": "TYPE_UNSPECIFIED",
                  "title": "Type values for an order"
                },
                "reference": {
                  "type": "string",
                  "description": "Arbitrary optional reference for the order, to be used as a human-readable non-unique identifier for the order."
                },
                "peggedOrder": {
                  "description": "Pegged order details. If set, the order's price will be offset from a particular reference price of the order book at all times.",
                  "type": "object",
                  "properties": {
                    "reference": {
                      "description": "Price point the order is linked to.",
                      "type": "string",
                      "enum": [
                        "PEGGED_REFERENCE_UNSPECIFIED",
                        "PEGGED_REFERENCE_MID",
                        "PEGGED_REFERENCE_BEST_BID",
                        "PEGGED_REFERENCE_BEST_ASK"
                      ],
                      "default": "PEGGED_REFERENCE_UNSPECIFIED",
                      "title": "Pegged reference defines which price point a pegged order is linked to - meaning\nthe price for a pegged order is calculated from the value of the reference price point"
                    },
                    "offset": {
                      "type": "string",
                      "description": "Offset from the price reference."
                    }
                  },
                  "title": "Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET\nThey can be used for any limit order that is valid during continuous trading"
                },
                "postOnly": {
                  "type": "boolean",
                  "description": "If set, the order will only be executed if it would not trade on entry to the order book. Only valid for limit orders."
                },
                "reduceOnly": {
                  "type": "boolean",
                  "description": "If set, the order will only be executed if the outcome of the trade moves the trader's position closer to 0.\nOnly valid for non-persistent orders."
                },
                "icebergOpts": {
                  "description": "Iceberg order details. If set, the order will exist on the order book in chunks.",
                  "type": "object",
                  "properties": {
                    "peakSize": {
                      "type": "string",
                      "pattern": "^[0-9]{0,19}$",
                      "description": "Size of the order that is made visible and can be traded with during the execution of a single order."
                    },
                    "minimumVisibleSize": {
                      "type": "string",
                      "pattern": "^[0-9]{0,19}$",
                      "description": "Minimum allowed remaining size of the order before it is replenished back to its peak size."
                    }
                  },
                  "title": "Iceberg order options"
                }
              },
              "description": "A command that submits an order to the Vega network for a given market."
            },
            "expiresAt": {
              "type": "string",
              "pattern": "^[0-9]{0,19}$",
              "description": "Timestamp, in Unix nanoseconds, for when the stop order should expire. If not set the stop order will not expire.",
              "minimum": -9223372036854776000,
              "maximum": 9223372036854776000
            },
            "expiryStrategy": {
              "description": "Strategy to adopt if the expiry time is reached.",
              "type": "string",
              "enum": [
                "EXPIRY_STRATEGY_UNSPECIFIED",
                "EXPIRY_STRATEGY_CANCELS",
                "EXPIRY_STRATEGY_SUBMIT"
              ],
              "default": "EXPIRY_STRATEGY_UNSPECIFIED"
            },
            "sizeOverrideSetting": {
              "title": "Indicates if this order is linked to an order or position to derive the order size",
              "type": "string",
              "enum": [
                "SIZE_OVERRIDE_SETTING_UNSPECIFIED",
                "SIZE_OVERRIDE_SETTING_NONE",
                "SIZE_OVERRIDE_SETTING_POSITION"
              ],
              "default": "SIZE_OVERRIDE_SETTING_UNSPECIFIED"
            },
            "sizeOverrideValue": {
              "title": "If this order is linked to a position, provide an optional scaling factor",
              "type": "object",
              "properties": {
                "percentage": {
                  "type": "string",
                  "title": "Scaling percentage of the current position’s size"
                }
              }
            },
            "price": {
              "type": "string",
              "description": "Order will be submitted if the last traded price on the market breaches the given price."
            },
            "trailingPercentOffset": {
              "type": "string",
              "description": "Order will be submitted if the last traded price has moved the given percent from the highest/lowest mark price since the stop order was submitted."
            }
          }
        }
      },
      "description": "A command that allows a party to submit a stop order for a given market.\nA stop order is a normal order that remains off the order book and is only submitted if a given trigger is breached from a particular direction.\nIf both rises-above and falls-below are configured, then if one is triggered the other will be cancelled (OCO)."
    },
    "stopOrdersCancellation": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "description": "Restrict cancellations to those submitted to the given market. If not set, all stop orders across all markets will be cancelled."
        },
        "stopOrderId": {
          "type": "string",
          "description": "Restrict cancellations to a stop order with the given ID. If set, then a market ID must also be provided."
        }
      },
      "description": "A command that instructs the network to cancel untriggered stop orders that were submitted by the sender of this transaction.\nIf any cancelled stop order is part of an OCO, both stop orders will be cancelled.\nIt is not possible to cancel another party's stop orders with this command."
    },
    "createReferralSet": {
      "type": "object",
      "properties": {
        "isTeam": {
          "type": "boolean",
          "description": "Whether or not the referral set should be considered a team that can participate in team games on the network."
        },
        "team": {
          "description": "Team details, if the referral set is to be considered a team.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the team."
            },
            "teamUrl": {
              "type": "string",
              "description": "External link to the team's homepage."
            },
            "avatarUrl": {
              "type": "string",
              "description": "External link to an avatar for the team."
            },
            "closed": {
              "type": "boolean",
              "description": "Whether or not the team is closed to new party members."
            },
            "allowList": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of public keys that are allowed to join the team.\nOnly applicable to closed teams. Removing a party from the allow list does not remove\nthe party from the team."
            }
          }
        }
      },
      "description": "Command that a party can use to instruct the network to create a new referral set on the network.\nThe submitter of this command will become the referrer of the new set and cannot be the referrer or a referee of another set.\nA referrer can use the referral set ID as a referral code to attract others to the Vega network and have fees reduced for the referral set."
    },
    "updateReferralSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the referral set to update."
        },
        "isTeam": {
          "type": "boolean",
          "description": "Whether or not the referral set should be considered a team that can participate in team games on the network."
        },
        "team": {
          "description": "Team details, if the referral set is to be considered a team.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "New name of the team."
            },
            "teamUrl": {
              "type": "string",
              "description": "New link to the team's homepage."
            },
            "avatarUrl": {
              "type": "string",
              "description": "New link to an avatar for the team."
            },
            "closed": {
              "type": "boolean",
              "description": "Whether or not the team is closed to new party members. When closed, only parties specified in the allow list can\njoin the team."
            },
            "allowList": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of public keys that are allowed to join the team.\nOnly applicable to closed teams. Removing a party from the allow list does not remove\nthe party from the team."
            }
          }
        }
      },
      "description": "A command that allows the referrer of a referral set to update team details for a referral set.\nAny field that is left unset or has a default value indicates that this field on the original referral set will be left unchanged."
    },
    "applyReferralCode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Referral code, normally the referral set ID, for the party to join."
        }
      },
      "description": "Command that allows the submitter to join a referral set and earn a collective reduction in fees based on the activity of all members of that set.\nA party that joins a referral set is called a referee. A referee can only be a member of one referral set and cannot themselves be or become a referrer.\nTo switch to another referral set, a subsequent command can be sent and the switch will take effect at the end of the epoch."
    },
    "updateMarginMode": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "description": "Market to change margin mode for."
        },
        "mode": {
          "description": "Margin mode to use.",
          "type": "string",
          "enum": [
            "MODE_UNSPECIFIED",
            "MODE_CROSS_MARGIN",
            "MODE_ISOLATED_MARGIN"
          ],
          "default": "MODE_UNSPECIFIED",
          "title": "- MODE_UNSPECIFIED: Never valid.\n - MODE_CROSS_MARGIN: Cross margin mode - margin is dynamically acquired and released as a position is marked to market\n - MODE_ISOLATED_MARGIN: Isolated margin mode - margin for any newly opened position volume is transferred to the margin account when the trade is executed"
        },
        "marginFactor": {
          "type": "string",
          "title": "Margin factor to use for margin in isolated mode. It is a multiplier that defines how much margin needs to be set aside"
        }
      }
    },
    "joinTeam": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the team to join, this is the same as the referral code used to generate the team."
        }
      },
      "description": "Command that allows the submitter to join a team or change teams if they are already a member of a team."
    },
    "batchProposalSubmission": {
      "type": "object",
      "properties": {
        "reference": {
          "type": "string",
          "description": "Arbitrary human-readable reference identifying the proposal."
        },
        "terms": {
          "description": "Proposal terms containing the type and details of the proposal, as well as time spans for voting and enactment.",
          "type": "object",
          "properties": {
            "closingTimestamp": {
              "type": "string",
              "pattern": "^[0-9]{0,19}$",
              "description": "Closing timestamp in Unix time; adheres to `minClose` and `maxClose` limits.",
              "minimum": -9223372036854776000,
              "maximum": 9223372036854776000
            },
            "changes": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "enactmentTimestamp": {
                    "type": "string",
                    "pattern": "^[0-9]{0,19}$",
                    "description": "Timestamp as Unix time in seconds when proposal terms gets enacted if proposal passed the vote,\nconstrained by `minEnact` and `maxEnact` network parameters.",
                    "minimum": -9223372036854776000,
                    "maximum": 9223372036854776000
                  },
                  "updateMarket": {
                    "description": "Proposal change for modifying an existing futures market.",
                    "type": "object",
                    "properties": {
                      "marketId": {
                        "type": "string",
                        "description": "Market ID the update is for."
                      },
                      "changes": {
                        "description": "Updated configuration of the futures market.",
                        "type": "object",
                        "properties": {
                          "instrument": {
                            "description": "Updated futures market instrument configuration.",
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string",
                                "description": "Instrument code, human-readable shortcode used to describe the instrument."
                              },
                              "name": {
                                "type": "string",
                                "title": "Instrument name"
                              },
                              "future": {
                                "description": "Future.",
                                "type": "object",
                                "properties": {
                                  "quoteName": {
                                    "type": "string",
                                    "description": "Human-readable name/abbreviation of the quote name."
                                  },
                                  "dataSourceSpecForSettlementData": {
                                    "description": "The data source spec describing the data of settlement data.",
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    }
                                  },
                                  "dataSourceSpecForTradingTermination": {
                                    "description": "The data source spec describing the data source for trading termination.",
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    }
                                  },
                                  "dataSourceSpecBinding": {
                                    "description": "The binding between the data source spec and the settlement data.",
                                    "type": "object",
                                    "properties": {
                                      "settlementDataProperty": {
                                        "type": "string",
                                        "description": "Name of the property in the source data that should be used as settlement data.\nIf it is set to \"prices.BTC.value\", then the Future will use the value of\nthis property as settlement data."
                                      },
                                      "tradingTerminationProperty": {
                                        "type": "string",
                                        "description": "Name of the property in the data source data that signals termination of trading."
                                      }
                                    },
                                    "title": "DataSourceSpecToFutureBinding describes which property of the data source data is to be\nused as settlement data and which to use as the trading terminated trigger"
                                  }
                                },
                                "title": "Future product configuration"
                              },
                              "perpetual": {
                                "description": "Perpetual.",
                                "type": "object",
                                "properties": {
                                  "quoteName": {
                                    "type": "string",
                                    "description": "Human-readable name/abbreviation of the quote name."
                                  },
                                  "marginFundingFactor": {
                                    "type": "string",
                                    "description": "Controls how much the upcoming funding payment liability contributes to party's margin, in the range [0, 1]."
                                  },
                                  "interestRate": {
                                    "type": "string",
                                    "description": "Continuously compounded interest rate used in funding rate calculation, in the range [-1, 1]."
                                  },
                                  "clampLowerBound": {
                                    "type": "string",
                                    "description": "Lower bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1]."
                                  },
                                  "clampUpperBound": {
                                    "type": "string",
                                    "description": "Upper bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1]."
                                  },
                                  "dataSourceSpecForSettlementSchedule": {
                                    "description": "Data source spec describing the data source for settlement schedule.",
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    }
                                  },
                                  "dataSourceSpecForSettlementData": {
                                    "description": "Data source spec describing the data source for settlement.",
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    }
                                  },
                                  "dataSourceSpecBinding": {
                                    "description": "Binding between the data source spec and the settlement data.",
                                    "type": "object",
                                    "properties": {
                                      "settlementDataProperty": {
                                        "type": "string",
                                        "description": "Name of the property in the source data that should be used for settlement data.\nIf it is set to \"prices.BTC.value\" for example, then the perpetual market will use the value of\nthis property to get settlement data."
                                      },
                                      "settlementScheduleProperty": {
                                        "type": "string",
                                        "description": "Name of the property in the source data that should be used to determine the perpetual's settlement schedule."
                                      }
                                    }
                                  },
                                  "fundingRateScalingFactor": {
                                    "type": "string",
                                    "description": "Factor applied to funding-rates. This scales the impact that spot price deviations have on funding payments."
                                  },
                                  "fundingRateLowerBound": {
                                    "type": "string",
                                    "description": "Lower bound for the funding-rate such that the funding-rate will never be lower than this value."
                                  },
                                  "fundingRateUpperBound": {
                                    "type": "string",
                                    "description": "Upper bound for the funding-rate such that the funding-rate will never be higher than this value."
                                  },
                                  "internalCompositePriceConfiguration": {
                                    "description": "Configuration for the internal composite price used in funding payment calculation.",
                                    "type": "object",
                                    "properties": {
                                      "decayWeight": {
                                        "type": "string",
                                        "description": "Decay weight used for calculation of mark price."
                                      },
                                      "decayPower": {
                                        "type": "string",
                                        "pattern": "^[0-9]{0,19}$",
                                        "description": "Decay power used for the calculation of mark price."
                                      },
                                      "cashAmount": {
                                        "type": "string",
                                        "description": "Cash amount, in asset decimals, used for the calculation of the mark price from the order book."
                                      },
                                      "sourceWeights": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "description": "Weights for each composite price data source."
                                      },
                                      "sourceStalenessTolerance": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "description": "For how long a price source is considered valid. One entry for each data source\nsuch that the first is for the trade based mark price, the second is for the book based price\nthe third is for the first oracle, followed by more oracle data source staleness tolerance."
                                      },
                                      "compositePriceType": {
                                        "description": "Which method is used for the calculation of the composite price for the market.",
                                        "type": "string",
                                        "enum": [
                                          "COMPOSITE_PRICE_TYPE_UNSPECIFIED",
                                          "COMPOSITE_PRICE_TYPE_WEIGHTED",
                                          "COMPOSITE_PRICE_TYPE_MEDIAN",
                                          "COMPOSITE_PRICE_TYPE_LAST_TRADE"
                                        ],
                                        "default": "COMPOSITE_PRICE_TYPE_UNSPECIFIED"
                                      },
                                      "dataSourcesSpec": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "internal": {
                                              "type": "object",
                                              "properties": {
                                                "time": {
                                                  "type": "object",
                                                  "properties": {
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that the timestamps should meet in order to be considered."
                                                    }
                                                  },
                                                  "description": "Internal data source used for emitting timestamps."
                                                },
                                                "timeTrigger": {
                                                  "type": "object",
                                                  "properties": {
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that the timestamps need to meet in order to be considered."
                                                    },
                                                    "triggers": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "initial": {
                                                            "type": "string",
                                                            "pattern": "^[0-9]{0,19}$",
                                                            "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                            "minimum": -9223372036854776000,
                                                            "maximum": 9223372036854776000
                                                          },
                                                          "every": {
                                                            "type": "string",
                                                            "pattern": "^[0-9]{0,19}$",
                                                            "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                            "minimum": -9223372036854776000,
                                                            "maximum": 9223372036854776000
                                                          }
                                                        },
                                                        "description": "Trigger for an internal time data source."
                                                      },
                                                      "title": "An internal time trigger"
                                                    }
                                                  },
                                                  "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                                }
                                              },
                                              "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                            },
                                            "external": {
                                              "type": "object",
                                              "properties": {
                                                "oracle": {
                                                  "type": "object",
                                                  "properties": {
                                                    "signers": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "pubKey": {
                                                            "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                            "type": "object",
                                                            "properties": {
                                                              "key": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          },
                                                          "ethAddress": {
                                                            "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                            "type": "object",
                                                            "properties": {
                                                              "address": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                                    },
                                                    "filters": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "key": {
                                                            "description": "Data source's data property key targeted by the filter.",
                                                            "type": "object",
                                                            "properties": {
                                                              "name": {
                                                                "type": "string",
                                                                "description": "Name of the property."
                                                              },
                                                              "type": {
                                                                "description": "Data type of the property.",
                                                                "type": "string",
                                                                "enum": [
                                                                  "TYPE_UNSPECIFIED",
                                                                  "TYPE_EMPTY",
                                                                  "TYPE_INTEGER",
                                                                  "TYPE_STRING",
                                                                  "TYPE_BOOLEAN",
                                                                  "TYPE_DECIMAL",
                                                                  "TYPE_TIMESTAMP"
                                                                ],
                                                                "default": "TYPE_UNSPECIFIED"
                                                              },
                                                              "numberDecimalPlaces": {
                                                                "type": "string",
                                                                "pattern": "^[0-9]{0,19}$",
                                                                "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                              }
                                                            }
                                                          },
                                                          "conditions": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "Type of comparison to make on the value.",
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "OPERATOR_UNSPECIFIED",
                                                                    "OPERATOR_EQUALS",
                                                                    "OPERATOR_GREATER_THAN",
                                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                    "OPERATOR_LESS_THAN",
                                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                  ],
                                                                  "default": "OPERATOR_UNSPECIFIED"
                                                                },
                                                                "value": {
                                                                  "type": "string",
                                                                  "description": "Value to be compared with by the operator."
                                                                }
                                                              },
                                                              "title": "Condition describes the condition that must be validated by the network"
                                                            },
                                                            "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                          }
                                                        },
                                                        "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                      },
                                                      "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                                    }
                                                  },
                                                  "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                                },
                                                "ethOracle": {
                                                  "description": "Contains the data specification that is received from Ethereum sources.",
                                                  "type": "object",
                                                  "properties": {
                                                    "address": {
                                                      "type": "string",
                                                      "description": "Ethereum address of the contract to call."
                                                    },
                                                    "abi": {
                                                      "type": "string",
                                                      "description": "The ABI of that contract."
                                                    },
                                                    "method": {
                                                      "type": "string",
                                                      "description": "Name of the method on the contract to call."
                                                    },
                                                    "args": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object"
                                                      },
                                                      "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                                    },
                                                    "trigger": {
                                                      "description": "Conditions for determining when to call the contract method.",
                                                      "type": "object",
                                                      "properties": {
                                                        "timeTrigger": {
                                                          "type": "object",
                                                          "properties": {
                                                            "initial": {
                                                              "type": "string",
                                                              "pattern": "^[0-9]{0,19}$",
                                                              "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                            },
                                                            "every": {
                                                              "type": "string",
                                                              "pattern": "^[0-9]{0,19}$",
                                                              "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                            },
                                                            "until": {
                                                              "type": "string",
                                                              "pattern": "^[0-9]{0,19}$",
                                                              "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                            }
                                                          },
                                                          "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                        }
                                                      }
                                                    },
                                                    "requiredConfirmations": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "title": "Number of confirmations required before the query is considered verified"
                                                    },
                                                    "filters": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "key": {
                                                            "description": "Data source's data property key targeted by the filter.",
                                                            "type": "object",
                                                            "properties": {
                                                              "name": {
                                                                "type": "string",
                                                                "description": "Name of the property."
                                                              },
                                                              "type": {
                                                                "description": "Data type of the property.",
                                                                "type": "string",
                                                                "enum": [
                                                                  "TYPE_UNSPECIFIED",
                                                                  "TYPE_EMPTY",
                                                                  "TYPE_INTEGER",
                                                                  "TYPE_STRING",
                                                                  "TYPE_BOOLEAN",
                                                                  "TYPE_DECIMAL",
                                                                  "TYPE_TIMESTAMP"
                                                                ],
                                                                "default": "TYPE_UNSPECIFIED"
                                                              },
                                                              "numberDecimalPlaces": {
                                                                "type": "string",
                                                                "pattern": "^[0-9]{0,19}$",
                                                                "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                              }
                                                            }
                                                          },
                                                          "conditions": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "Type of comparison to make on the value.",
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "OPERATOR_UNSPECIFIED",
                                                                    "OPERATOR_EQUALS",
                                                                    "OPERATOR_GREATER_THAN",
                                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                    "OPERATOR_LESS_THAN",
                                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                  ],
                                                                  "default": "OPERATOR_UNSPECIFIED"
                                                                },
                                                                "value": {
                                                                  "type": "string",
                                                                  "description": "Value to be compared with by the operator."
                                                                }
                                                              },
                                                              "title": "Condition describes the condition that must be validated by the network"
                                                            },
                                                            "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                          }
                                                        },
                                                        "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                      },
                                                      "title": "Filters the data returned from the contract method"
                                                    },
                                                    "normalisers": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          },
                                                          "expression": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                                    },
                                                    "sourceChainId": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                                    }
                                                  }
                                                }
                                              },
                                              "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                            }
                                          },
                                          "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                        },
                                        "description": "Additional price sources to be used for internal composite price calculation."
                                      },
                                      "dataSourcesSpecBinding": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "priceSourceProperty": {
                                              "type": "string",
                                              "description": "The property name of price."
                                            }
                                          },
                                          "description": "Describes which property of the data source data is to be\nused for price source."
                                        },
                                        "title": "List of each price source and its corresponding binding"
                                      }
                                    }
                                  }
                                },
                                "title": "Perpetual product configuration"
                              }
                            },
                            "title": "Instrument configuration"
                          },
                          "metadata": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Optional futures market metadata, tags."
                          },
                          "priceMonitoringParameters": {
                            "description": "Price monitoring parameters.",
                            "type": "object",
                            "properties": {
                              "triggers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "horizon": {
                                      "type": "string",
                                      "pattern": "^[0-9]{0,19}$",
                                      "description": "Price monitoring projection horizon τ in seconds.",
                                      "minimum": -9223372036854776000,
                                      "maximum": 9223372036854776000
                                    },
                                    "probability": {
                                      "type": "string",
                                      "description": "Price monitoring probability level p."
                                    },
                                    "auctionExtension": {
                                      "type": "string",
                                      "pattern": "^[0-9]{0,19}$",
                                      "description": "Price monitoring auction extension duration in seconds should the price\nbreach its theoretical level over the specified horizon at the specified\nprobability level.",
                                      "minimum": -9223372036854776000,
                                      "maximum": 9223372036854776000
                                    }
                                  },
                                  "title": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration"
                                }
                              }
                            },
                            "title": "PriceMonitoringParameters contains a collection of triggers to be used for a given market"
                          },
                          "liquidityMonitoringParameters": {
                            "description": "Liquidity monitoring parameters.",
                            "type": "object",
                            "properties": {
                              "targetStakeParameters": {
                                "description": "Specifies parameters related to target stake calculation.",
                                "type": "object",
                                "properties": {
                                  "timeWindow": {
                                    "type": "string",
                                    "pattern": "^[0-9]{0,19}$",
                                    "description": "Specifies length of time window expressed in seconds for target stake calculation.",
                                    "minimum": -9223372036854776000,
                                    "maximum": 9223372036854776000
                                  },
                                  "scalingFactor": {
                                    "type": "number",
                                    "pattern": "^[-]?+(.[0-9]+)?$",
                                    "description": "Specifies scaling factors used in target stake calculation.",
                                    "minimum": -1.7976931348623157e+308,
                                    "maximum": 1.7976931348623157e+308
                                  }
                                },
                                "title": "TargetStakeParameters contains parameters used in target stake calculation"
                              },
                              "triggeringRatio": {
                                "type": "string",
                                "description": "Specifies the triggering ratio for entering liquidity auction."
                              },
                              "auctionExtension": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              }
                            },
                            "title": "LiquidityMonitoringParameters contains settings used for liquidity monitoring"
                          },
                          "simple": {
                            "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected.",
                            "type": "object",
                            "properties": {
                              "factorLong": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined risk factor value for long.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "factorShort": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined risk factor value for short.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "maxMoveUp": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined maximum price move up that the model considers as valid.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "minMoveDown": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined minimum price move down that the model considers as valid.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "probabilityOfTrading": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined constant probability of trading.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              }
                            },
                            "title": "Risk model parameters for simple modelling"
                          },
                          "logNormal": {
                            "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.",
                            "type": "object",
                            "properties": {
                              "riskAversionParameter": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Risk Aversion Parameter.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "tau": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Tau parameter of the risk model, projection horizon measured as a year fraction used in the expected shortfall\ncalculation to obtain the maintenance margin, must be a strictly non-negative real number.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "params": {
                                "description": "Risk model parameters for log normal.",
                                "type": "object",
                                "properties": {
                                  "mu": {
                                    "type": "number",
                                    "pattern": "^[-]?+(.[0-9]+)?$",
                                    "description": "Mu parameter, annualised growth rate of the underlying asset.",
                                    "minimum": -1.7976931348623157e+308,
                                    "maximum": 1.7976931348623157e+308
                                  },
                                  "r": {
                                    "type": "number",
                                    "pattern": "^[-]?+(.[0-9]+)?$",
                                    "description": "R parameter, annualised growth rate of the risk-free asset, used for discounting of future cash flows, can be any real number.",
                                    "minimum": -1.7976931348623157e+308,
                                    "maximum": 1.7976931348623157e+308
                                  },
                                  "sigma": {
                                    "type": "number",
                                    "pattern": "^[-]?+(.[0-9]+)?$",
                                    "description": "Sigma parameter, annualised volatility of the underlying asset, must be a strictly non-negative real number.",
                                    "minimum": -1.7976931348623157e+308,
                                    "maximum": 1.7976931348623157e+308
                                  }
                                },
                                "title": "Risk model parameters for log normal"
                              }
                            },
                            "title": "Risk model for log normal"
                          },
                          "lpPriceRange": {
                            "type": "string",
                            "description": "DEPRECATED: Use liquidity SLA parameters instead.\nPercentage move up and down from the mid price which specifies the range of\nprice levels over which automated liquidity provisions will be deployed."
                          },
                          "linearSlippageFactor": {
                            "type": "string",
                            "description": "Linear slippage factor is used to cap the slippage component of maintenance margin - it is applied to the slippage volume."
                          },
                          "quadraticSlippageFactor": {
                            "type": "string",
                            "description": "Quadratic slippage factor is used to cap the slippage component of maintenance margin - it is applied to the square of the slippage volume."
                          },
                          "liquiditySlaParameters": {
                            "title": "Liquidity SLA parameters",
                            "type": "object",
                            "properties": {
                              "priceRange": {
                                "type": "string"
                              },
                              "commitmentMinTimeFraction": {
                                "type": "string",
                                "description": "Specifies the minimum fraction of time LPs must spend \"on the book\" providing their committed liquidity."
                              },
                              "performanceHysteresisEpochs": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Specifies the number of liquidity epochs over which past performance will continue to affect rewards."
                              },
                              "slaCompetitionFactor": {
                                "type": "string",
                                "description": "Specifies the maximum fraction of their accrued fees an LP that meets the SLA implied by market.liquidity.commitmentMinTimeFraction will lose to liquidity providers\nthat achieved a higher SLA performance than them."
                              }
                            }
                          },
                          "liquidityFeeSettings": {
                            "description": "Specifies how the liquidity fee for the market will be calculated.",
                            "type": "object",
                            "properties": {
                              "method": {
                                "description": "Method used to calculate the market's liquidity fee.",
                                "type": "string",
                                "enum": [
                                  "METHOD_UNSPECIFIED",
                                  "METHOD_MARGINAL_COST",
                                  "METHOD_WEIGHTED_AVERAGE",
                                  "METHOD_CONSTANT"
                                ],
                                "default": "METHOD_UNSPECIFIED"
                              },
                              "feeConstant": {
                                "type": "string",
                                "description": "Constant liquidity fee used when using the constant fee method."
                              }
                            }
                          },
                          "liquidationStrategy": {
                            "title": "Liquidation strategy parameters",
                            "type": "object",
                            "properties": {
                              "disposalTimeStep": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Interval, in seconds, at which the network will attempt to close its position.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              },
                              "disposalFraction": {
                                "type": "string",
                                "description": "Fraction of the open position the market will try to close in a single attempt; range 0 through 1."
                              },
                              "fullDisposalSize": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Size of the position that the network will try to close in a single attempt."
                              },
                              "maxFractionConsumed": {
                                "type": "string",
                                "description": "Max fraction of the total volume of the orderbook, within liquidity bounds, that the network can use to close its position; range 0 through 1."
                              }
                            },
                            "description": "Liquidation strategy used when the network holds a position resulting from position resolution."
                          },
                          "markPriceConfiguration": {
                            "description": "Mark price configuration.",
                            "type": "object",
                            "properties": {
                              "decayWeight": {
                                "type": "string",
                                "description": "Decay weight used for calculation of mark price."
                              },
                              "decayPower": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Decay power used for the calculation of mark price."
                              },
                              "cashAmount": {
                                "type": "string",
                                "description": "Cash amount, in asset decimals, used for the calculation of the mark price from the order book."
                              },
                              "sourceWeights": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Weights for each composite price data source."
                              },
                              "sourceStalenessTolerance": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "For how long a price source is considered valid. One entry for each data source\nsuch that the first is for the trade based mark price, the second is for the book based price\nthe third is for the first oracle, followed by more oracle data source staleness tolerance."
                              },
                              "compositePriceType": {
                                "description": "Which method is used for the calculation of the composite price for the market.",
                                "type": "string",
                                "enum": [
                                  "COMPOSITE_PRICE_TYPE_UNSPECIFIED",
                                  "COMPOSITE_PRICE_TYPE_WEIGHTED",
                                  "COMPOSITE_PRICE_TYPE_MEDIAN",
                                  "COMPOSITE_PRICE_TYPE_LAST_TRADE"
                                ],
                                "default": "COMPOSITE_PRICE_TYPE_UNSPECIFIED"
                              },
                              "dataSourcesSpec": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "internal": {
                                      "type": "object",
                                      "properties": {
                                        "time": {
                                          "type": "object",
                                          "properties": {
                                            "conditions": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "operator": {
                                                    "description": "Type of comparison to make on the value.",
                                                    "type": "string",
                                                    "enum": [
                                                      "OPERATOR_UNSPECIFIED",
                                                      "OPERATOR_EQUALS",
                                                      "OPERATOR_GREATER_THAN",
                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                      "OPERATOR_LESS_THAN",
                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                    ],
                                                    "default": "OPERATOR_UNSPECIFIED"
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "description": "Value to be compared with by the operator."
                                                  }
                                                },
                                                "title": "Condition describes the condition that must be validated by the network"
                                              },
                                              "description": "Conditions that the timestamps should meet in order to be considered."
                                            }
                                          },
                                          "description": "Internal data source used for emitting timestamps."
                                        },
                                        "timeTrigger": {
                                          "type": "object",
                                          "properties": {
                                            "conditions": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "operator": {
                                                    "description": "Type of comparison to make on the value.",
                                                    "type": "string",
                                                    "enum": [
                                                      "OPERATOR_UNSPECIFIED",
                                                      "OPERATOR_EQUALS",
                                                      "OPERATOR_GREATER_THAN",
                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                      "OPERATOR_LESS_THAN",
                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                    ],
                                                    "default": "OPERATOR_UNSPECIFIED"
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "description": "Value to be compared with by the operator."
                                                  }
                                                },
                                                "title": "Condition describes the condition that must be validated by the network"
                                              },
                                              "description": "Conditions that the timestamps need to meet in order to be considered."
                                            },
                                            "triggers": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "initial": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                    "minimum": -9223372036854776000,
                                                    "maximum": 9223372036854776000
                                                  },
                                                  "every": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                    "minimum": -9223372036854776000,
                                                    "maximum": 9223372036854776000
                                                  }
                                                },
                                                "description": "Trigger for an internal time data source."
                                              },
                                              "title": "An internal time trigger"
                                            }
                                          },
                                          "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                        }
                                      },
                                      "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                    },
                                    "external": {
                                      "type": "object",
                                      "properties": {
                                        "oracle": {
                                          "type": "object",
                                          "properties": {
                                            "signers": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "pubKey": {
                                                    "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                    "type": "object",
                                                    "properties": {
                                                      "key": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "ethAddress": {
                                                    "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                    "type": "object",
                                                    "properties": {
                                                      "address": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                            },
                                            "filters": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "description": "Data source's data property key targeted by the filter.",
                                                    "type": "object",
                                                    "properties": {
                                                      "name": {
                                                        "type": "string",
                                                        "description": "Name of the property."
                                                      },
                                                      "type": {
                                                        "description": "Data type of the property.",
                                                        "type": "string",
                                                        "enum": [
                                                          "TYPE_UNSPECIFIED",
                                                          "TYPE_EMPTY",
                                                          "TYPE_INTEGER",
                                                          "TYPE_STRING",
                                                          "TYPE_BOOLEAN",
                                                          "TYPE_DECIMAL",
                                                          "TYPE_TIMESTAMP"
                                                        ],
                                                        "default": "TYPE_UNSPECIFIED"
                                                      },
                                                      "numberDecimalPlaces": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                      }
                                                    }
                                                  },
                                                  "conditions": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "operator": {
                                                          "description": "Type of comparison to make on the value.",
                                                          "type": "string",
                                                          "enum": [
                                                            "OPERATOR_UNSPECIFIED",
                                                            "OPERATOR_EQUALS",
                                                            "OPERATOR_GREATER_THAN",
                                                            "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                            "OPERATOR_LESS_THAN",
                                                            "OPERATOR_LESS_THAN_OR_EQUAL"
                                                          ],
                                                          "default": "OPERATOR_UNSPECIFIED"
                                                        },
                                                        "value": {
                                                          "type": "string",
                                                          "description": "Value to be compared with by the operator."
                                                        }
                                                      },
                                                      "title": "Condition describes the condition that must be validated by the network"
                                                    },
                                                    "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                  }
                                                },
                                                "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                              },
                                              "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                            }
                                          },
                                          "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                        },
                                        "ethOracle": {
                                          "description": "Contains the data specification that is received from Ethereum sources.",
                                          "type": "object",
                                          "properties": {
                                            "address": {
                                              "type": "string",
                                              "description": "Ethereum address of the contract to call."
                                            },
                                            "abi": {
                                              "type": "string",
                                              "description": "The ABI of that contract."
                                            },
                                            "method": {
                                              "type": "string",
                                              "description": "Name of the method on the contract to call."
                                            },
                                            "args": {
                                              "type": "array",
                                              "items": {
                                                "type": "object"
                                              },
                                              "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                            },
                                            "trigger": {
                                              "description": "Conditions for determining when to call the contract method.",
                                              "type": "object",
                                              "properties": {
                                                "timeTrigger": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                    },
                                                    "until": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                    }
                                                  },
                                                  "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                }
                                              }
                                            },
                                            "requiredConfirmations": {
                                              "type": "string",
                                              "pattern": "^[0-9]{0,19}$",
                                              "title": "Number of confirmations required before the query is considered verified"
                                            },
                                            "filters": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "description": "Data source's data property key targeted by the filter.",
                                                    "type": "object",
                                                    "properties": {
                                                      "name": {
                                                        "type": "string",
                                                        "description": "Name of the property."
                                                      },
                                                      "type": {
                                                        "description": "Data type of the property.",
                                                        "type": "string",
                                                        "enum": [
                                                          "TYPE_UNSPECIFIED",
                                                          "TYPE_EMPTY",
                                                          "TYPE_INTEGER",
                                                          "TYPE_STRING",
                                                          "TYPE_BOOLEAN",
                                                          "TYPE_DECIMAL",
                                                          "TYPE_TIMESTAMP"
                                                        ],
                                                        "default": "TYPE_UNSPECIFIED"
                                                      },
                                                      "numberDecimalPlaces": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                      }
                                                    }
                                                  },
                                                  "conditions": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "operator": {
                                                          "description": "Type of comparison to make on the value.",
                                                          "type": "string",
                                                          "enum": [
                                                            "OPERATOR_UNSPECIFIED",
                                                            "OPERATOR_EQUALS",
                                                            "OPERATOR_GREATER_THAN",
                                                            "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                            "OPERATOR_LESS_THAN",
                                                            "OPERATOR_LESS_THAN_OR_EQUAL"
                                                          ],
                                                          "default": "OPERATOR_UNSPECIFIED"
                                                        },
                                                        "value": {
                                                          "type": "string",
                                                          "description": "Value to be compared with by the operator."
                                                        }
                                                      },
                                                      "title": "Condition describes the condition that must be validated by the network"
                                                    },
                                                    "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                  }
                                                },
                                                "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                              },
                                              "title": "Filters the data returned from the contract method"
                                            },
                                            "normalisers": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "expression": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                            },
                                            "sourceChainId": {
                                              "type": "string",
                                              "pattern": "^[0-9]{0,19}$",
                                              "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                            }
                                          }
                                        }
                                      },
                                      "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                    }
                                  },
                                  "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                },
                                "description": "Additional price sources to be used for internal composite price calculation."
                              },
                              "dataSourcesSpecBinding": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "priceSourceProperty": {
                                      "type": "string",
                                      "description": "The property name of price."
                                    }
                                  },
                                  "description": "Describes which property of the data source data is to be\nused for price source."
                                },
                                "title": "List of each price source and its corresponding binding"
                              }
                            }
                          },
                          "tickSize": {
                            "type": "string",
                            "title": "The market tick size defines the minimum change in quote price for the market"
                          }
                        },
                        "title": "Configuration to update a futures market on Vega"
                      }
                    },
                    "title": "Update an existing market on Vega"
                  },
                  "newMarket": {
                    "description": "Proposal change for creating new futures market.",
                    "type": "object",
                    "properties": {
                      "changes": {
                        "description": "Configuration of the new market.",
                        "type": "object",
                        "properties": {
                          "instrument": {
                            "description": "New futures market instrument configuration.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Instrument name."
                              },
                              "code": {
                                "type": "string",
                                "description": "Instrument code, human-readable shortcode used to describe the instrument."
                              },
                              "future": {
                                "description": "Future.",
                                "type": "object",
                                "properties": {
                                  "settlementAsset": {
                                    "type": "string",
                                    "description": "Asset ID for the product's settlement asset."
                                  },
                                  "quoteName": {
                                    "type": "string",
                                    "description": "Product quote name."
                                  },
                                  "dataSourceSpecForSettlementData": {
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    },
                                    "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                  },
                                  "dataSourceSpecForTradingTermination": {
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    },
                                    "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                  },
                                  "dataSourceSpecBinding": {
                                    "description": "Binding between the data source spec and the settlement data.",
                                    "type": "object",
                                    "properties": {
                                      "settlementDataProperty": {
                                        "type": "string",
                                        "description": "Name of the property in the source data that should be used as settlement data.\nIf it is set to \"prices.BTC.value\", then the Future will use the value of\nthis property as settlement data."
                                      },
                                      "tradingTerminationProperty": {
                                        "type": "string",
                                        "description": "Name of the property in the data source data that signals termination of trading."
                                      }
                                    },
                                    "title": "DataSourceSpecToFutureBinding describes which property of the data source data is to be\nused as settlement data and which to use as the trading terminated trigger"
                                  }
                                },
                                "title": "Future product configuration"
                              },
                              "spot": {
                                "description": "Spot.",
                                "type": "object",
                                "properties": {
                                  "baseAsset": {
                                    "type": "string",
                                    "description": "Base asset ID."
                                  },
                                  "quoteAsset": {
                                    "type": "string",
                                    "description": "Quote asset ID."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Product name."
                                  }
                                },
                                "title": "Spot product configuration"
                              },
                              "perpetual": {
                                "description": "Perpetual.",
                                "type": "object",
                                "properties": {
                                  "settlementAsset": {
                                    "type": "string",
                                    "description": "Asset ID for the product's settlement asset."
                                  },
                                  "quoteName": {
                                    "type": "string",
                                    "description": "Product quote name."
                                  },
                                  "marginFundingFactor": {
                                    "type": "string",
                                    "description": "Controls how much the upcoming funding payment liability contributes to party's margin, in the range [0, 1]."
                                  },
                                  "interestRate": {
                                    "type": "string",
                                    "description": "Continuously compounded interest rate used in funding rate calculation, in the range [-1, 1]."
                                  },
                                  "clampLowerBound": {
                                    "type": "string",
                                    "description": "Lower bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1]."
                                  },
                                  "clampUpperBound": {
                                    "type": "string",
                                    "description": "Upper bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1]."
                                  },
                                  "dataSourceSpecForSettlementSchedule": {
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    },
                                    "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                  },
                                  "dataSourceSpecForSettlementData": {
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    },
                                    "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                  },
                                  "dataSourceSpecBinding": {
                                    "description": "Binding between the data source spec and the settlement data.",
                                    "type": "object",
                                    "properties": {
                                      "settlementDataProperty": {
                                        "type": "string",
                                        "description": "Name of the property in the source data that should be used for settlement data.\nIf it is set to \"prices.BTC.value\" for example, then the perpetual market will use the value of\nthis property to get settlement data."
                                      },
                                      "settlementScheduleProperty": {
                                        "type": "string",
                                        "description": "Name of the property in the source data that should be used to determine the perpetual's settlement schedule."
                                      }
                                    }
                                  },
                                  "fundingRateScalingFactor": {
                                    "type": "string",
                                    "description": "Factor applied to funding-rates. This scales the impact that spot price deviations have on funding payments."
                                  },
                                  "fundingRateLowerBound": {
                                    "type": "string",
                                    "description": "Lower bound for the funding-rate such that the funding-rate will never be lower than this value."
                                  },
                                  "fundingRateUpperBound": {
                                    "type": "string",
                                    "description": "Upper bound for the funding-rate such that the funding-rate will never be higher than this value."
                                  },
                                  "internalCompositePriceConfiguration": {
                                    "description": "Composite price configuration to drive the calculation of the internal composite price used for funding payments. If undefined the default mark price of the market is used.",
                                    "type": "object",
                                    "properties": {
                                      "decayWeight": {
                                        "type": "string",
                                        "description": "Decay weight used for calculation of mark price."
                                      },
                                      "decayPower": {
                                        "type": "string",
                                        "pattern": "^[0-9]{0,19}$",
                                        "description": "Decay power used for the calculation of mark price."
                                      },
                                      "cashAmount": {
                                        "type": "string",
                                        "description": "Cash amount, in asset decimals, used for the calculation of the mark price from the order book."
                                      },
                                      "sourceWeights": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "description": "Weights for each composite price data source."
                                      },
                                      "sourceStalenessTolerance": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "description": "For how long a price source is considered valid. One entry for each data source\nsuch that the first is for the trade based mark price, the second is for the book based price\nthe third is for the first oracle, followed by more oracle data source staleness tolerance."
                                      },
                                      "compositePriceType": {
                                        "description": "Which method is used for the calculation of the composite price for the market.",
                                        "type": "string",
                                        "enum": [
                                          "COMPOSITE_PRICE_TYPE_UNSPECIFIED",
                                          "COMPOSITE_PRICE_TYPE_WEIGHTED",
                                          "COMPOSITE_PRICE_TYPE_MEDIAN",
                                          "COMPOSITE_PRICE_TYPE_LAST_TRADE"
                                        ],
                                        "default": "COMPOSITE_PRICE_TYPE_UNSPECIFIED"
                                      },
                                      "dataSourcesSpec": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "internal": {
                                              "type": "object",
                                              "properties": {
                                                "time": {
                                                  "type": "object",
                                                  "properties": {
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that the timestamps should meet in order to be considered."
                                                    }
                                                  },
                                                  "description": "Internal data source used for emitting timestamps."
                                                },
                                                "timeTrigger": {
                                                  "type": "object",
                                                  "properties": {
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that the timestamps need to meet in order to be considered."
                                                    },
                                                    "triggers": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "initial": {
                                                            "type": "string",
                                                            "pattern": "^[0-9]{0,19}$",
                                                            "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                            "minimum": -9223372036854776000,
                                                            "maximum": 9223372036854776000
                                                          },
                                                          "every": {
                                                            "type": "string",
                                                            "pattern": "^[0-9]{0,19}$",
                                                            "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                            "minimum": -9223372036854776000,
                                                            "maximum": 9223372036854776000
                                                          }
                                                        },
                                                        "description": "Trigger for an internal time data source."
                                                      },
                                                      "title": "An internal time trigger"
                                                    }
                                                  },
                                                  "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                                }
                                              },
                                              "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                            },
                                            "external": {
                                              "type": "object",
                                              "properties": {
                                                "oracle": {
                                                  "type": "object",
                                                  "properties": {
                                                    "signers": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "pubKey": {
                                                            "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                            "type": "object",
                                                            "properties": {
                                                              "key": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          },
                                                          "ethAddress": {
                                                            "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                            "type": "object",
                                                            "properties": {
                                                              "address": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                                    },
                                                    "filters": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "key": {
                                                            "description": "Data source's data property key targeted by the filter.",
                                                            "type": "object",
                                                            "properties": {
                                                              "name": {
                                                                "type": "string",
                                                                "description": "Name of the property."
                                                              },
                                                              "type": {
                                                                "description": "Data type of the property.",
                                                                "type": "string",
                                                                "enum": [
                                                                  "TYPE_UNSPECIFIED",
                                                                  "TYPE_EMPTY",
                                                                  "TYPE_INTEGER",
                                                                  "TYPE_STRING",
                                                                  "TYPE_BOOLEAN",
                                                                  "TYPE_DECIMAL",
                                                                  "TYPE_TIMESTAMP"
                                                                ],
                                                                "default": "TYPE_UNSPECIFIED"
                                                              },
                                                              "numberDecimalPlaces": {
                                                                "type": "string",
                                                                "pattern": "^[0-9]{0,19}$",
                                                                "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                              }
                                                            }
                                                          },
                                                          "conditions": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "Type of comparison to make on the value.",
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "OPERATOR_UNSPECIFIED",
                                                                    "OPERATOR_EQUALS",
                                                                    "OPERATOR_GREATER_THAN",
                                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                    "OPERATOR_LESS_THAN",
                                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                  ],
                                                                  "default": "OPERATOR_UNSPECIFIED"
                                                                },
                                                                "value": {
                                                                  "type": "string",
                                                                  "description": "Value to be compared with by the operator."
                                                                }
                                                              },
                                                              "title": "Condition describes the condition that must be validated by the network"
                                                            },
                                                            "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                          }
                                                        },
                                                        "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                      },
                                                      "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                                    }
                                                  },
                                                  "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                                },
                                                "ethOracle": {
                                                  "description": "Contains the data specification that is received from Ethereum sources.",
                                                  "type": "object",
                                                  "properties": {
                                                    "address": {
                                                      "type": "string",
                                                      "description": "Ethereum address of the contract to call."
                                                    },
                                                    "abi": {
                                                      "type": "string",
                                                      "description": "The ABI of that contract."
                                                    },
                                                    "method": {
                                                      "type": "string",
                                                      "description": "Name of the method on the contract to call."
                                                    },
                                                    "args": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object"
                                                      },
                                                      "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                                    },
                                                    "trigger": {
                                                      "description": "Conditions for determining when to call the contract method.",
                                                      "type": "object",
                                                      "properties": {
                                                        "timeTrigger": {
                                                          "type": "object",
                                                          "properties": {
                                                            "initial": {
                                                              "type": "string",
                                                              "pattern": "^[0-9]{0,19}$",
                                                              "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                            },
                                                            "every": {
                                                              "type": "string",
                                                              "pattern": "^[0-9]{0,19}$",
                                                              "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                            },
                                                            "until": {
                                                              "type": "string",
                                                              "pattern": "^[0-9]{0,19}$",
                                                              "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                            }
                                                          },
                                                          "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                        }
                                                      }
                                                    },
                                                    "requiredConfirmations": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "title": "Number of confirmations required before the query is considered verified"
                                                    },
                                                    "filters": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "key": {
                                                            "description": "Data source's data property key targeted by the filter.",
                                                            "type": "object",
                                                            "properties": {
                                                              "name": {
                                                                "type": "string",
                                                                "description": "Name of the property."
                                                              },
                                                              "type": {
                                                                "description": "Data type of the property.",
                                                                "type": "string",
                                                                "enum": [
                                                                  "TYPE_UNSPECIFIED",
                                                                  "TYPE_EMPTY",
                                                                  "TYPE_INTEGER",
                                                                  "TYPE_STRING",
                                                                  "TYPE_BOOLEAN",
                                                                  "TYPE_DECIMAL",
                                                                  "TYPE_TIMESTAMP"
                                                                ],
                                                                "default": "TYPE_UNSPECIFIED"
                                                              },
                                                              "numberDecimalPlaces": {
                                                                "type": "string",
                                                                "pattern": "^[0-9]{0,19}$",
                                                                "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                              }
                                                            }
                                                          },
                                                          "conditions": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "Type of comparison to make on the value.",
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "OPERATOR_UNSPECIFIED",
                                                                    "OPERATOR_EQUALS",
                                                                    "OPERATOR_GREATER_THAN",
                                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                    "OPERATOR_LESS_THAN",
                                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                  ],
                                                                  "default": "OPERATOR_UNSPECIFIED"
                                                                },
                                                                "value": {
                                                                  "type": "string",
                                                                  "description": "Value to be compared with by the operator."
                                                                }
                                                              },
                                                              "title": "Condition describes the condition that must be validated by the network"
                                                            },
                                                            "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                          }
                                                        },
                                                        "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                      },
                                                      "title": "Filters the data returned from the contract method"
                                                    },
                                                    "normalisers": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          },
                                                          "expression": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                                    },
                                                    "sourceChainId": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                                    }
                                                  }
                                                }
                                              },
                                              "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                            }
                                          },
                                          "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                        },
                                        "description": "Additional price sources to be used for internal composite price calculation."
                                      },
                                      "dataSourcesSpecBinding": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "priceSourceProperty": {
                                              "type": "string",
                                              "description": "The property name of price."
                                            }
                                          },
                                          "description": "Describes which property of the data source data is to be\nused for price source."
                                        },
                                        "title": "List of each price source and its corresponding binding"
                                      }
                                    }
                                  }
                                },
                                "title": "Perpetual product configuration"
                              }
                            },
                            "title": "Instrument configuration"
                          },
                          "decimalPlaces": {
                            "type": "string",
                            "pattern": "^[0-9]{0,19}$",
                            "description": "Decimal places used for the new futures market, sets the smallest price increment on the book."
                          },
                          "metadata": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Optional new futures market metadata, tags."
                          },
                          "priceMonitoringParameters": {
                            "description": "Price monitoring parameters.",
                            "type": "object",
                            "properties": {
                              "triggers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "horizon": {
                                      "type": "string",
                                      "pattern": "^[0-9]{0,19}$",
                                      "description": "Price monitoring projection horizon τ in seconds.",
                                      "minimum": -9223372036854776000,
                                      "maximum": 9223372036854776000
                                    },
                                    "probability": {
                                      "type": "string",
                                      "description": "Price monitoring probability level p."
                                    },
                                    "auctionExtension": {
                                      "type": "string",
                                      "pattern": "^[0-9]{0,19}$",
                                      "description": "Price monitoring auction extension duration in seconds should the price\nbreach its theoretical level over the specified horizon at the specified\nprobability level.",
                                      "minimum": -9223372036854776000,
                                      "maximum": 9223372036854776000
                                    }
                                  },
                                  "title": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration"
                                }
                              }
                            },
                            "title": "PriceMonitoringParameters contains a collection of triggers to be used for a given market"
                          },
                          "liquidityMonitoringParameters": {
                            "description": "Liquidity monitoring parameters.",
                            "type": "object",
                            "properties": {
                              "targetStakeParameters": {
                                "description": "Specifies parameters related to target stake calculation.",
                                "type": "object",
                                "properties": {
                                  "timeWindow": {
                                    "type": "string",
                                    "pattern": "^[0-9]{0,19}$",
                                    "description": "Specifies length of time window expressed in seconds for target stake calculation.",
                                    "minimum": -9223372036854776000,
                                    "maximum": 9223372036854776000
                                  },
                                  "scalingFactor": {
                                    "type": "number",
                                    "pattern": "^[-]?+(.[0-9]+)?$",
                                    "description": "Specifies scaling factors used in target stake calculation.",
                                    "minimum": -1.7976931348623157e+308,
                                    "maximum": 1.7976931348623157e+308
                                  }
                                },
                                "title": "TargetStakeParameters contains parameters used in target stake calculation"
                              },
                              "triggeringRatio": {
                                "type": "string",
                                "description": "Specifies the triggering ratio for entering liquidity auction."
                              },
                              "auctionExtension": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              }
                            },
                            "title": "LiquidityMonitoringParameters contains settings used for liquidity monitoring"
                          },
                          "simple": {
                            "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected.",
                            "type": "object",
                            "properties": {
                              "factorLong": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined risk factor value for long.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "factorShort": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined risk factor value for short.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "maxMoveUp": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined maximum price move up that the model considers as valid.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "minMoveDown": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined minimum price move down that the model considers as valid.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "probabilityOfTrading": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined constant probability of trading.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              }
                            },
                            "title": "Risk model parameters for simple modelling"
                          },
                          "logNormal": {
                            "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.",
                            "type": "object",
                            "properties": {
                              "riskAversionParameter": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Risk Aversion Parameter.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "tau": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Tau parameter of the risk model, projection horizon measured as a year fraction used in the expected shortfall\ncalculation to obtain the maintenance margin, must be a strictly non-negative real number.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "params": {
                                "description": "Risk model parameters for log normal.",
                                "type": "object",
                                "properties": {
                                  "mu": {
                                    "type": "number",
                                    "pattern": "^[-]?+(.[0-9]+)?$",
                                    "description": "Mu parameter, annualised growth rate of the underlying asset.",
                                    "minimum": -1.7976931348623157e+308,
                                    "maximum": 1.7976931348623157e+308
                                  },
                                  "r": {
                                    "type": "number",
                                    "pattern": "^[-]?+(.[0-9]+)?$",
                                    "description": "R parameter, annualised growth rate of the risk-free asset, used for discounting of future cash flows, can be any real number.",
                                    "minimum": -1.7976931348623157e+308,
                                    "maximum": 1.7976931348623157e+308
                                  },
                                  "sigma": {
                                    "type": "number",
                                    "pattern": "^[-]?+(.[0-9]+)?$",
                                    "description": "Sigma parameter, annualised volatility of the underlying asset, must be a strictly non-negative real number.",
                                    "minimum": -1.7976931348623157e+308,
                                    "maximum": 1.7976931348623157e+308
                                  }
                                },
                                "title": "Risk model parameters for log normal"
                              }
                            },
                            "title": "Risk model for log normal"
                          },
                          "positionDecimalPlaces": {
                            "type": "string",
                            "pattern": "^[0-9]{0,19}$",
                            "description": "Decimal places for order sizes, sets what size the smallest order / position on the futures market can be.",
                            "minimum": -9223372036854776000,
                            "maximum": 9223372036854776000
                          },
                          "lpPriceRange": {
                            "type": "string",
                            "description": "DEPRECATED: Use liquidity SLA parameters instead.\nPercentage move up and down from the mid price which specifies the range of\nprice levels over which automated liquidity provisions will be deployed."
                          },
                          "linearSlippageFactor": {
                            "type": "string",
                            "description": "Linear slippage factor is used to cap the slippage component of maintenance margin - it is applied to the slippage volume."
                          },
                          "quadraticSlippageFactor": {
                            "type": "string",
                            "description": "Quadratic slippage factor is used to cap the slippage component of maintenance margin - it is applied to the square of the slippage volume."
                          },
                          "successor": {
                            "description": "Successor configuration. If this proposal is meant to succeed a given market, then this should be set.",
                            "type": "object",
                            "properties": {
                              "parentMarketId": {
                                "type": "string",
                                "description": "ID of the market that the successor should take over from."
                              },
                              "insurancePoolFraction": {
                                "type": "string",
                                "description": "A decimal value between or equal to 0 and 1, specifying the fraction of the insurance pool balance that is carried over from the parent market to the successor."
                              }
                            }
                          },
                          "liquiditySlaParameters": {
                            "title": "Liquidity SLA parameters",
                            "type": "object",
                            "properties": {
                              "priceRange": {
                                "type": "string"
                              },
                              "commitmentMinTimeFraction": {
                                "type": "string",
                                "description": "Specifies the minimum fraction of time LPs must spend \"on the book\" providing their committed liquidity."
                              },
                              "performanceHysteresisEpochs": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Specifies the number of liquidity epochs over which past performance will continue to affect rewards."
                              },
                              "slaCompetitionFactor": {
                                "type": "string",
                                "description": "Specifies the maximum fraction of their accrued fees an LP that meets the SLA implied by market.liquidity.commitmentMinTimeFraction will lose to liquidity providers\nthat achieved a higher SLA performance than them."
                              }
                            }
                          },
                          "liquidityFeeSettings": {
                            "description": "Specifies how the liquidity fee for the market will be calculated.",
                            "type": "object",
                            "properties": {
                              "method": {
                                "description": "Method used to calculate the market's liquidity fee.",
                                "type": "string",
                                "enum": [
                                  "METHOD_UNSPECIFIED",
                                  "METHOD_MARGINAL_COST",
                                  "METHOD_WEIGHTED_AVERAGE",
                                  "METHOD_CONSTANT"
                                ],
                                "default": "METHOD_UNSPECIFIED"
                              },
                              "feeConstant": {
                                "type": "string",
                                "description": "Constant liquidity fee used when using the constant fee method."
                              }
                            }
                          },
                          "liquidationStrategy": {
                            "description": "Liquidation strategy for this market.",
                            "type": "object",
                            "properties": {
                              "disposalTimeStep": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Interval, in seconds, at which the network will attempt to close its position.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              },
                              "disposalFraction": {
                                "type": "string",
                                "description": "Fraction of the open position the market will try to close in a single attempt; range 0 through 1."
                              },
                              "fullDisposalSize": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Size of the position that the network will try to close in a single attempt."
                              },
                              "maxFractionConsumed": {
                                "type": "string",
                                "description": "Max fraction of the total volume of the orderbook, within liquidity bounds, that the network can use to close its position; range 0 through 1."
                              }
                            }
                          },
                          "markPriceConfiguration": {
                            "description": "Mark price configuration.",
                            "type": "object",
                            "properties": {
                              "decayWeight": {
                                "type": "string",
                                "description": "Decay weight used for calculation of mark price."
                              },
                              "decayPower": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Decay power used for the calculation of mark price."
                              },
                              "cashAmount": {
                                "type": "string",
                                "description": "Cash amount, in asset decimals, used for the calculation of the mark price from the order book."
                              },
                              "sourceWeights": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Weights for each composite price data source."
                              },
                              "sourceStalenessTolerance": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "For how long a price source is considered valid. One entry for each data source\nsuch that the first is for the trade based mark price, the second is for the book based price\nthe third is for the first oracle, followed by more oracle data source staleness tolerance."
                              },
                              "compositePriceType": {
                                "description": "Which method is used for the calculation of the composite price for the market.",
                                "type": "string",
                                "enum": [
                                  "COMPOSITE_PRICE_TYPE_UNSPECIFIED",
                                  "COMPOSITE_PRICE_TYPE_WEIGHTED",
                                  "COMPOSITE_PRICE_TYPE_MEDIAN",
                                  "COMPOSITE_PRICE_TYPE_LAST_TRADE"
                                ],
                                "default": "COMPOSITE_PRICE_TYPE_UNSPECIFIED"
                              },
                              "dataSourcesSpec": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "internal": {
                                      "type": "object",
                                      "properties": {
                                        "time": {
                                          "type": "object",
                                          "properties": {
                                            "conditions": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "operator": {
                                                    "description": "Type of comparison to make on the value.",
                                                    "type": "string",
                                                    "enum": [
                                                      "OPERATOR_UNSPECIFIED",
                                                      "OPERATOR_EQUALS",
                                                      "OPERATOR_GREATER_THAN",
                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                      "OPERATOR_LESS_THAN",
                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                    ],
                                                    "default": "OPERATOR_UNSPECIFIED"
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "description": "Value to be compared with by the operator."
                                                  }
                                                },
                                                "title": "Condition describes the condition that must be validated by the network"
                                              },
                                              "description": "Conditions that the timestamps should meet in order to be considered."
                                            }
                                          },
                                          "description": "Internal data source used for emitting timestamps."
                                        },
                                        "timeTrigger": {
                                          "type": "object",
                                          "properties": {
                                            "conditions": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "operator": {
                                                    "description": "Type of comparison to make on the value.",
                                                    "type": "string",
                                                    "enum": [
                                                      "OPERATOR_UNSPECIFIED",
                                                      "OPERATOR_EQUALS",
                                                      "OPERATOR_GREATER_THAN",
                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                      "OPERATOR_LESS_THAN",
                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                    ],
                                                    "default": "OPERATOR_UNSPECIFIED"
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "description": "Value to be compared with by the operator."
                                                  }
                                                },
                                                "title": "Condition describes the condition that must be validated by the network"
                                              },
                                              "description": "Conditions that the timestamps need to meet in order to be considered."
                                            },
                                            "triggers": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "initial": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                    "minimum": -9223372036854776000,
                                                    "maximum": 9223372036854776000
                                                  },
                                                  "every": {
                                                    "type": "string",
                                                    "pattern": "^[0-9]{0,19}$",
                                                    "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                    "minimum": -9223372036854776000,
                                                    "maximum": 9223372036854776000
                                                  }
                                                },
                                                "description": "Trigger for an internal time data source."
                                              },
                                              "title": "An internal time trigger"
                                            }
                                          },
                                          "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                        }
                                      },
                                      "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                    },
                                    "external": {
                                      "type": "object",
                                      "properties": {
                                        "oracle": {
                                          "type": "object",
                                          "properties": {
                                            "signers": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "pubKey": {
                                                    "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                    "type": "object",
                                                    "properties": {
                                                      "key": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  },
                                                  "ethAddress": {
                                                    "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                    "type": "object",
                                                    "properties": {
                                                      "address": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                            },
                                            "filters": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "description": "Data source's data property key targeted by the filter.",
                                                    "type": "object",
                                                    "properties": {
                                                      "name": {
                                                        "type": "string",
                                                        "description": "Name of the property."
                                                      },
                                                      "type": {
                                                        "description": "Data type of the property.",
                                                        "type": "string",
                                                        "enum": [
                                                          "TYPE_UNSPECIFIED",
                                                          "TYPE_EMPTY",
                                                          "TYPE_INTEGER",
                                                          "TYPE_STRING",
                                                          "TYPE_BOOLEAN",
                                                          "TYPE_DECIMAL",
                                                          "TYPE_TIMESTAMP"
                                                        ],
                                                        "default": "TYPE_UNSPECIFIED"
                                                      },
                                                      "numberDecimalPlaces": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                      }
                                                    }
                                                  },
                                                  "conditions": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "operator": {
                                                          "description": "Type of comparison to make on the value.",
                                                          "type": "string",
                                                          "enum": [
                                                            "OPERATOR_UNSPECIFIED",
                                                            "OPERATOR_EQUALS",
                                                            "OPERATOR_GREATER_THAN",
                                                            "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                            "OPERATOR_LESS_THAN",
                                                            "OPERATOR_LESS_THAN_OR_EQUAL"
                                                          ],
                                                          "default": "OPERATOR_UNSPECIFIED"
                                                        },
                                                        "value": {
                                                          "type": "string",
                                                          "description": "Value to be compared with by the operator."
                                                        }
                                                      },
                                                      "title": "Condition describes the condition that must be validated by the network"
                                                    },
                                                    "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                  }
                                                },
                                                "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                              },
                                              "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                            }
                                          },
                                          "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                        },
                                        "ethOracle": {
                                          "description": "Contains the data specification that is received from Ethereum sources.",
                                          "type": "object",
                                          "properties": {
                                            "address": {
                                              "type": "string",
                                              "description": "Ethereum address of the contract to call."
                                            },
                                            "abi": {
                                              "type": "string",
                                              "description": "The ABI of that contract."
                                            },
                                            "method": {
                                              "type": "string",
                                              "description": "Name of the method on the contract to call."
                                            },
                                            "args": {
                                              "type": "array",
                                              "items": {
                                                "type": "object"
                                              },
                                              "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                            },
                                            "trigger": {
                                              "description": "Conditions for determining when to call the contract method.",
                                              "type": "object",
                                              "properties": {
                                                "timeTrigger": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                    },
                                                    "until": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                    }
                                                  },
                                                  "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                }
                                              }
                                            },
                                            "requiredConfirmations": {
                                              "type": "string",
                                              "pattern": "^[0-9]{0,19}$",
                                              "title": "Number of confirmations required before the query is considered verified"
                                            },
                                            "filters": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "description": "Data source's data property key targeted by the filter.",
                                                    "type": "object",
                                                    "properties": {
                                                      "name": {
                                                        "type": "string",
                                                        "description": "Name of the property."
                                                      },
                                                      "type": {
                                                        "description": "Data type of the property.",
                                                        "type": "string",
                                                        "enum": [
                                                          "TYPE_UNSPECIFIED",
                                                          "TYPE_EMPTY",
                                                          "TYPE_INTEGER",
                                                          "TYPE_STRING",
                                                          "TYPE_BOOLEAN",
                                                          "TYPE_DECIMAL",
                                                          "TYPE_TIMESTAMP"
                                                        ],
                                                        "default": "TYPE_UNSPECIFIED"
                                                      },
                                                      "numberDecimalPlaces": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                      }
                                                    }
                                                  },
                                                  "conditions": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "operator": {
                                                          "description": "Type of comparison to make on the value.",
                                                          "type": "string",
                                                          "enum": [
                                                            "OPERATOR_UNSPECIFIED",
                                                            "OPERATOR_EQUALS",
                                                            "OPERATOR_GREATER_THAN",
                                                            "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                            "OPERATOR_LESS_THAN",
                                                            "OPERATOR_LESS_THAN_OR_EQUAL"
                                                          ],
                                                          "default": "OPERATOR_UNSPECIFIED"
                                                        },
                                                        "value": {
                                                          "type": "string",
                                                          "description": "Value to be compared with by the operator."
                                                        }
                                                      },
                                                      "title": "Condition describes the condition that must be validated by the network"
                                                    },
                                                    "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                  }
                                                },
                                                "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                              },
                                              "title": "Filters the data returned from the contract method"
                                            },
                                            "normalisers": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "expression": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                            },
                                            "sourceChainId": {
                                              "type": "string",
                                              "pattern": "^[0-9]{0,19}$",
                                              "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                            }
                                          }
                                        }
                                      },
                                      "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                    }
                                  },
                                  "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                },
                                "description": "Additional price sources to be used for internal composite price calculation."
                              },
                              "dataSourcesSpecBinding": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "priceSourceProperty": {
                                      "type": "string",
                                      "description": "The property name of price."
                                    }
                                  },
                                  "description": "Describes which property of the data source data is to be\nused for price source."
                                },
                                "title": "List of each price source and its corresponding binding"
                              }
                            }
                          },
                          "tickSize": {
                            "type": "string",
                            "title": "The market tick size defines the minimum change in quote price for the market"
                          }
                        },
                        "title": "Configuration for a new futures market on Vega"
                      }
                    },
                    "title": "New market on Vega"
                  },
                  "updateNetworkParameter": {
                    "description": "Proposal change for updating Vega network parameters.",
                    "type": "object",
                    "properties": {
                      "changes": {
                        "description": "The network parameter to update.",
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Unique key of the network parameter."
                          },
                          "value": {
                            "type": "string",
                            "description": "Value for the network parameter."
                          }
                        },
                        "title": "Represents a network parameter on Vega"
                      }
                    },
                    "title": "Update network configuration on Vega"
                  },
                  "newFreeform": {
                    "description": "Proposal change for a freeform request, which can be voted on but does not change the behaviour of the system,\nand can be used to gauge community sentiment.",
                    "type": "object"
                  },
                  "updateAsset": {
                    "description": "Proposal change for updating an asset.",
                    "type": "object",
                    "properties": {
                      "assetId": {
                        "type": "string",
                        "description": "Asset ID the update is for."
                      },
                      "changes": {
                        "description": "Changes to apply on an existing asset.",
                        "type": "object",
                        "properties": {
                          "quantum": {
                            "type": "string",
                            "description": "Minimum economically meaningful amount in the asset."
                          },
                          "erc20": {
                            "description": "Ethereum ERC20 asset update.",
                            "type": "object",
                            "properties": {
                              "lifetimeLimit": {
                                "type": "string",
                                "description": "Lifetime limits deposit per address.\nThis will be interpreted against the asset decimals.\nnote: this is a temporary measure that can be changed by governance."
                              },
                              "withdrawThreshold": {
                                "type": "string",
                                "description": "Maximum you can withdraw instantly. All withdrawals over the threshold will be delayed by the withdrawal delay.\nThere’s no limit on the size of a withdrawal\nnote: this is a temporary measure that can be changed by governance."
                              }
                            }
                          }
                        }
                      }
                    },
                    "title": "Update an existing asset on Vega"
                  },
                  "newSpotMarket": {
                    "description": "Proposal change for creating new spot market.",
                    "type": "object",
                    "properties": {
                      "changes": {
                        "description": "Configuration of the new spot market.",
                        "type": "object",
                        "properties": {
                          "instrument": {
                            "description": "New spot market instrument configuration.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Instrument name."
                              },
                              "code": {
                                "type": "string",
                                "description": "Instrument code, human-readable shortcode used to describe the instrument."
                              },
                              "future": {
                                "description": "Future.",
                                "type": "object",
                                "properties": {
                                  "settlementAsset": {
                                    "type": "string",
                                    "description": "Asset ID for the product's settlement asset."
                                  },
                                  "quoteName": {
                                    "type": "string",
                                    "description": "Product quote name."
                                  },
                                  "dataSourceSpecForSettlementData": {
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    },
                                    "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                  },
                                  "dataSourceSpecForTradingTermination": {
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    },
                                    "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                  },
                                  "dataSourceSpecBinding": {
                                    "description": "Binding between the data source spec and the settlement data.",
                                    "type": "object",
                                    "properties": {
                                      "settlementDataProperty": {
                                        "type": "string",
                                        "description": "Name of the property in the source data that should be used as settlement data.\nIf it is set to \"prices.BTC.value\", then the Future will use the value of\nthis property as settlement data."
                                      },
                                      "tradingTerminationProperty": {
                                        "type": "string",
                                        "description": "Name of the property in the data source data that signals termination of trading."
                                      }
                                    },
                                    "title": "DataSourceSpecToFutureBinding describes which property of the data source data is to be\nused as settlement data and which to use as the trading terminated trigger"
                                  }
                                },
                                "title": "Future product configuration"
                              },
                              "spot": {
                                "description": "Spot.",
                                "type": "object",
                                "properties": {
                                  "baseAsset": {
                                    "type": "string",
                                    "description": "Base asset ID."
                                  },
                                  "quoteAsset": {
                                    "type": "string",
                                    "description": "Quote asset ID."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Product name."
                                  }
                                },
                                "title": "Spot product configuration"
                              },
                              "perpetual": {
                                "description": "Perpetual.",
                                "type": "object",
                                "properties": {
                                  "settlementAsset": {
                                    "type": "string",
                                    "description": "Asset ID for the product's settlement asset."
                                  },
                                  "quoteName": {
                                    "type": "string",
                                    "description": "Product quote name."
                                  },
                                  "marginFundingFactor": {
                                    "type": "string",
                                    "description": "Controls how much the upcoming funding payment liability contributes to party's margin, in the range [0, 1]."
                                  },
                                  "interestRate": {
                                    "type": "string",
                                    "description": "Continuously compounded interest rate used in funding rate calculation, in the range [-1, 1]."
                                  },
                                  "clampLowerBound": {
                                    "type": "string",
                                    "description": "Lower bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1]."
                                  },
                                  "clampUpperBound": {
                                    "type": "string",
                                    "description": "Upper bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1]."
                                  },
                                  "dataSourceSpecForSettlementSchedule": {
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    },
                                    "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                  },
                                  "dataSourceSpecForSettlementData": {
                                    "type": "object",
                                    "properties": {
                                      "internal": {
                                        "type": "object",
                                        "properties": {
                                          "time": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps should meet in order to be considered."
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps."
                                          },
                                          "timeTrigger": {
                                            "type": "object",
                                            "properties": {
                                              "conditions": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "operator": {
                                                      "description": "Type of comparison to make on the value.",
                                                      "type": "string",
                                                      "enum": [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ],
                                                      "default": "OPERATOR_UNSPECIFIED"
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value to be compared with by the operator."
                                                    }
                                                  },
                                                  "title": "Condition describes the condition that must be validated by the network"
                                                },
                                                "description": "Conditions that the timestamps need to meet in order to be considered."
                                              },
                                              "triggers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "initial": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    },
                                                    "every": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                      "minimum": -9223372036854776000,
                                                      "maximum": 9223372036854776000
                                                    }
                                                  },
                                                  "description": "Trigger for an internal time data source."
                                                },
                                                "title": "An internal time trigger"
                                              }
                                            },
                                            "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                          }
                                        },
                                        "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                      },
                                      "external": {
                                        "type": "object",
                                        "properties": {
                                          "oracle": {
                                            "type": "object",
                                            "properties": {
                                              "signers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "pubKey": {
                                                      "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                      "type": "object",
                                                      "properties": {
                                                        "key": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "ethAddress": {
                                                      "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                      "type": "object",
                                                      "properties": {
                                                        "address": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                              }
                                            },
                                            "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                          },
                                          "ethOracle": {
                                            "description": "Contains the data specification that is received from Ethereum sources.",
                                            "type": "object",
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "description": "Ethereum address of the contract to call."
                                              },
                                              "abi": {
                                                "type": "string",
                                                "description": "The ABI of that contract."
                                              },
                                              "method": {
                                                "type": "string",
                                                "description": "Name of the method on the contract to call."
                                              },
                                              "args": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object"
                                                },
                                                "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                              },
                                              "trigger": {
                                                "description": "Conditions for determining when to call the contract method.",
                                                "type": "object",
                                                "properties": {
                                                  "timeTrigger": {
                                                    "type": "object",
                                                    "properties": {
                                                      "initial": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                      },
                                                      "every": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                      },
                                                      "until": {
                                                        "type": "string",
                                                        "pattern": "^[0-9]{0,19}$",
                                                        "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                      }
                                                    },
                                                    "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                  }
                                                }
                                              },
                                              "requiredConfirmations": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "title": "Number of confirmations required before the query is considered verified"
                                              },
                                              "filters": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "key": {
                                                      "description": "Data source's data property key targeted by the filter.",
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "description": "Name of the property."
                                                        },
                                                        "type": {
                                                          "description": "Data type of the property.",
                                                          "type": "string",
                                                          "enum": [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ],
                                                          "default": "TYPE_UNSPECIFIED"
                                                        },
                                                        "numberDecimalPlaces": {
                                                          "type": "string",
                                                          "pattern": "^[0-9]{0,19}$",
                                                          "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                        }
                                                      }
                                                    },
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                    }
                                                  },
                                                  "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                },
                                                "title": "Filters the data returned from the contract method"
                                              },
                                              "normalisers": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "expression": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                              },
                                              "sourceChainId": {
                                                "type": "string",
                                                "pattern": "^[0-9]{0,19}$",
                                                "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                              }
                                            }
                                          }
                                        },
                                        "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                      }
                                    },
                                    "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                  },
                                  "dataSourceSpecBinding": {
                                    "description": "Binding between the data source spec and the settlement data.",
                                    "type": "object",
                                    "properties": {
                                      "settlementDataProperty": {
                                        "type": "string",
                                        "description": "Name of the property in the source data that should be used for settlement data.\nIf it is set to \"prices.BTC.value\" for example, then the perpetual market will use the value of\nthis property to get settlement data."
                                      },
                                      "settlementScheduleProperty": {
                                        "type": "string",
                                        "description": "Name of the property in the source data that should be used to determine the perpetual's settlement schedule."
                                      }
                                    }
                                  },
                                  "fundingRateScalingFactor": {
                                    "type": "string",
                                    "description": "Factor applied to funding-rates. This scales the impact that spot price deviations have on funding payments."
                                  },
                                  "fundingRateLowerBound": {
                                    "type": "string",
                                    "description": "Lower bound for the funding-rate such that the funding-rate will never be lower than this value."
                                  },
                                  "fundingRateUpperBound": {
                                    "type": "string",
                                    "description": "Upper bound for the funding-rate such that the funding-rate will never be higher than this value."
                                  },
                                  "internalCompositePriceConfiguration": {
                                    "description": "Composite price configuration to drive the calculation of the internal composite price used for funding payments. If undefined the default mark price of the market is used.",
                                    "type": "object",
                                    "properties": {
                                      "decayWeight": {
                                        "type": "string",
                                        "description": "Decay weight used for calculation of mark price."
                                      },
                                      "decayPower": {
                                        "type": "string",
                                        "pattern": "^[0-9]{0,19}$",
                                        "description": "Decay power used for the calculation of mark price."
                                      },
                                      "cashAmount": {
                                        "type": "string",
                                        "description": "Cash amount, in asset decimals, used for the calculation of the mark price from the order book."
                                      },
                                      "sourceWeights": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "description": "Weights for each composite price data source."
                                      },
                                      "sourceStalenessTolerance": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "description": "For how long a price source is considered valid. One entry for each data source\nsuch that the first is for the trade based mark price, the second is for the book based price\nthe third is for the first oracle, followed by more oracle data source staleness tolerance."
                                      },
                                      "compositePriceType": {
                                        "description": "Which method is used for the calculation of the composite price for the market.",
                                        "type": "string",
                                        "enum": [
                                          "COMPOSITE_PRICE_TYPE_UNSPECIFIED",
                                          "COMPOSITE_PRICE_TYPE_WEIGHTED",
                                          "COMPOSITE_PRICE_TYPE_MEDIAN",
                                          "COMPOSITE_PRICE_TYPE_LAST_TRADE"
                                        ],
                                        "default": "COMPOSITE_PRICE_TYPE_UNSPECIFIED"
                                      },
                                      "dataSourcesSpec": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "internal": {
                                              "type": "object",
                                              "properties": {
                                                "time": {
                                                  "type": "object",
                                                  "properties": {
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that the timestamps should meet in order to be considered."
                                                    }
                                                  },
                                                  "description": "Internal data source used for emitting timestamps."
                                                },
                                                "timeTrigger": {
                                                  "type": "object",
                                                  "properties": {
                                                    "conditions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "Type of comparison to make on the value.",
                                                            "type": "string",
                                                            "enum": [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ],
                                                            "default": "OPERATOR_UNSPECIFIED"
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value to be compared with by the operator."
                                                          }
                                                        },
                                                        "title": "Condition describes the condition that must be validated by the network"
                                                      },
                                                      "description": "Conditions that the timestamps need to meet in order to be considered."
                                                    },
                                                    "triggers": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "initial": {
                                                            "type": "string",
                                                            "pattern": "^[0-9]{0,19}$",
                                                            "description": "Trigger when the vega time is greater or equal to this time, in Unix seconds.",
                                                            "minimum": -9223372036854776000,
                                                            "maximum": 9223372036854776000
                                                          },
                                                          "every": {
                                                            "type": "string",
                                                            "pattern": "^[0-9]{0,19}$",
                                                            "description": "Repeat the trigger every n seconds after the initial. If no time for\ninitial was specified, begin repeating immediately.",
                                                            "minimum": -9223372036854776000,
                                                            "maximum": 9223372036854776000
                                                          }
                                                        },
                                                        "description": "Trigger for an internal time data source."
                                                      },
                                                      "title": "An internal time trigger"
                                                    }
                                                  },
                                                  "description": "Internal data source used for emitting timestamps automatically using predefined intervals and conditions."
                                                }
                                              },
                                              "description": "Top level object used for all internal data sources.\nIt contains one of any of the defined source type variants."
                                            },
                                            "external": {
                                              "type": "object",
                                              "properties": {
                                                "oracle": {
                                                  "type": "object",
                                                  "properties": {
                                                    "signers": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "pubKey": {
                                                            "description": "List of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys.",
                                                            "type": "object",
                                                            "properties": {
                                                              "key": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          },
                                                          "ethAddress": {
                                                            "description": "In case of an open oracle - Ethereum address will be submitted.",
                                                            "type": "object",
                                                            "properties": {
                                                              "address": {
                                                                "type": "string"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "description": "Signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in\nthis external source. All the signatures in the data should be contained in\nthis list."
                                                    },
                                                    "filters": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "key": {
                                                            "description": "Data source's data property key targeted by the filter.",
                                                            "type": "object",
                                                            "properties": {
                                                              "name": {
                                                                "type": "string",
                                                                "description": "Name of the property."
                                                              },
                                                              "type": {
                                                                "description": "Data type of the property.",
                                                                "type": "string",
                                                                "enum": [
                                                                  "TYPE_UNSPECIFIED",
                                                                  "TYPE_EMPTY",
                                                                  "TYPE_INTEGER",
                                                                  "TYPE_STRING",
                                                                  "TYPE_BOOLEAN",
                                                                  "TYPE_DECIMAL",
                                                                  "TYPE_TIMESTAMP"
                                                                ],
                                                                "default": "TYPE_UNSPECIFIED"
                                                              },
                                                              "numberDecimalPlaces": {
                                                                "type": "string",
                                                                "pattern": "^[0-9]{0,19}$",
                                                                "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                              }
                                                            }
                                                          },
                                                          "conditions": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "Type of comparison to make on the value.",
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "OPERATOR_UNSPECIFIED",
                                                                    "OPERATOR_EQUALS",
                                                                    "OPERATOR_GREATER_THAN",
                                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                    "OPERATOR_LESS_THAN",
                                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                  ],
                                                                  "default": "OPERATOR_UNSPECIFIED"
                                                                },
                                                                "value": {
                                                                  "type": "string",
                                                                  "description": "Value to be compared with by the operator."
                                                                }
                                                              },
                                                              "title": "Condition describes the condition that must be validated by the network"
                                                            },
                                                            "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                          }
                                                        },
                                                        "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                      },
                                                      "description": "Filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
                                                    }
                                                  },
                                                  "description": "All types of external data sources use the same configuration set for meeting\nrequirements in order for the data to be useful for Vega - valid signatures\nand matching filters."
                                                },
                                                "ethOracle": {
                                                  "description": "Contains the data specification that is received from Ethereum sources.",
                                                  "type": "object",
                                                  "properties": {
                                                    "address": {
                                                      "type": "string",
                                                      "description": "Ethereum address of the contract to call."
                                                    },
                                                    "abi": {
                                                      "type": "string",
                                                      "description": "The ABI of that contract."
                                                    },
                                                    "method": {
                                                      "type": "string",
                                                      "description": "Name of the method on the contract to call."
                                                    },
                                                    "args": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object"
                                                      },
                                                      "description": "List of arguments to pass to method call.\nProtobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum\ntype according to the ABI."
                                                    },
                                                    "trigger": {
                                                      "description": "Conditions for determining when to call the contract method.",
                                                      "type": "object",
                                                      "properties": {
                                                        "timeTrigger": {
                                                          "type": "object",
                                                          "properties": {
                                                            "initial": {
                                                              "type": "string",
                                                              "pattern": "^[0-9]{0,19}$",
                                                              "description": "Trigger when the Ethereum time is greater or equal to this time, in Unix\nseconds."
                                                            },
                                                            "every": {
                                                              "type": "string",
                                                              "pattern": "^[0-9]{0,19}$",
                                                              "description": "Repeat the call every n seconds after the initial call. If no time for\ninitial call was specified, begin repeating immediately."
                                                            },
                                                            "until": {
                                                              "type": "string",
                                                              "pattern": "^[0-9]{0,19}$",
                                                              "description": "If repeating, stop once Ethereum time is greater than this time, in Unix\nseconds. If not set, then repeat indefinitely."
                                                            }
                                                          },
                                                          "description": "Trigger for an Ethereum call based on the Ethereum block timestamp. Can be\none-off or repeating."
                                                        }
                                                      }
                                                    },
                                                    "requiredConfirmations": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "title": "Number of confirmations required before the query is considered verified"
                                                    },
                                                    "filters": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "key": {
                                                            "description": "Data source's data property key targeted by the filter.",
                                                            "type": "object",
                                                            "properties": {
                                                              "name": {
                                                                "type": "string",
                                                                "description": "Name of the property."
                                                              },
                                                              "type": {
                                                                "description": "Data type of the property.",
                                                                "type": "string",
                                                                "enum": [
                                                                  "TYPE_UNSPECIFIED",
                                                                  "TYPE_EMPTY",
                                                                  "TYPE_INTEGER",
                                                                  "TYPE_STRING",
                                                                  "TYPE_BOOLEAN",
                                                                  "TYPE_DECIMAL",
                                                                  "TYPE_TIMESTAMP"
                                                                ],
                                                                "default": "TYPE_UNSPECIFIED"
                                                              },
                                                              "numberDecimalPlaces": {
                                                                "type": "string",
                                                                "pattern": "^[0-9]{0,19}$",
                                                                "title": "Optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
                                                              }
                                                            }
                                                          },
                                                          "conditions": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "Type of comparison to make on the value.",
                                                                  "type": "string",
                                                                  "enum": [
                                                                    "OPERATOR_UNSPECIFIED",
                                                                    "OPERATOR_EQUALS",
                                                                    "OPERATOR_GREATER_THAN",
                                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                    "OPERATOR_LESS_THAN",
                                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                  ],
                                                                  "default": "OPERATOR_UNSPECIFIED"
                                                                },
                                                                "value": {
                                                                  "type": "string",
                                                                  "description": "Value to be compared with by the operator."
                                                                }
                                                              },
                                                              "title": "Condition describes the condition that must be validated by the network"
                                                            },
                                                            "description": "Conditions that should be matched by the data to be\nconsidered of interest."
                                                          }
                                                        },
                                                        "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
                                                      },
                                                      "title": "Filters the data returned from the contract method"
                                                    },
                                                    "normalisers": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "name": {
                                                            "type": "string"
                                                          },
                                                          "expression": {
                                                            "type": "string"
                                                          }
                                                        }
                                                      },
                                                      "description": "Normalisers are used to convert the data returned from the contract method\ninto a standard format. The key of the map is the name of the property,\nwhich identifies the specific piece of data to other parts of the data\nsourcing framework, for example filters. The value is a JSONPath expression\nfor expressing where in the contract call result the required data is\nlocated, for example $[0] indicates the first result. $[1].price would look\nin the second result returned from the contract for a structure with a key\ncalled 'price' and use that if it exists."
                                                    },
                                                    "sourceChainId": {
                                                      "type": "string",
                                                      "pattern": "^[0-9]{0,19}$",
                                                      "description": "The ID of the EVM based chain which is to be used to source the oracle data."
                                                    }
                                                  }
                                                }
                                              },
                                              "description": "DataSourceDefinitionExternal is the top level object used for all external\ndata sources. It contains one of any of the defined `SourceType` variants."
                                            }
                                          },
                                          "description": "Represents the top level object that handles data sources.\nData source definition can be external or internal, with whatever\nnumber of data sources are defined for each type in the child objects below."
                                        },
                                        "description": "Additional price sources to be used for internal composite price calculation."
                                      },
                                      "dataSourcesSpecBinding": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "priceSourceProperty": {
                                              "type": "string",
                                              "description": "The property name of price."
                                            }
                                          },
                                          "description": "Describes which property of the data source data is to be\nused for price source."
                                        },
                                        "title": "List of each price source and its corresponding binding"
                                      }
                                    }
                                  }
                                },
                                "title": "Perpetual product configuration"
                              }
                            },
                            "title": "Instrument configuration"
                          },
                          "decimalPlaces": {
                            "type": "string",
                            "pattern": "^[0-9]{0,19}$",
                            "description": "Decimal places used for the new spot market, sets the smallest price increment on the book."
                          },
                          "metadata": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Optional new spot market metadata, tags."
                          },
                          "priceMonitoringParameters": {
                            "description": "Price monitoring parameters.",
                            "type": "object",
                            "properties": {
                              "triggers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "horizon": {
                                      "type": "string",
                                      "pattern": "^[0-9]{0,19}$",
                                      "description": "Price monitoring projection horizon τ in seconds.",
                                      "minimum": -9223372036854776000,
                                      "maximum": 9223372036854776000
                                    },
                                    "probability": {
                                      "type": "string",
                                      "description": "Price monitoring probability level p."
                                    },
                                    "auctionExtension": {
                                      "type": "string",
                                      "pattern": "^[0-9]{0,19}$",
                                      "description": "Price monitoring auction extension duration in seconds should the price\nbreach its theoretical level over the specified horizon at the specified\nprobability level.",
                                      "minimum": -9223372036854776000,
                                      "maximum": 9223372036854776000
                                    }
                                  },
                                  "title": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration"
                                }
                              }
                            },
                            "title": "PriceMonitoringParameters contains a collection of triggers to be used for a given market"
                          },
                          "targetStakeParameters": {
                            "description": "Specifies parameters related to target stake calculation.",
                            "type": "object",
                            "properties": {
                              "timeWindow": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Specifies length of time window expressed in seconds for target stake calculation.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              },
                              "scalingFactor": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Specifies scaling factors used in target stake calculation.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              }
                            },
                            "title": "TargetStakeParameters contains parameters used in target stake calculation"
                          },
                          "simple": {
                            "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected.",
                            "type": "object",
                            "properties": {
                              "factorLong": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined risk factor value for long.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "factorShort": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined risk factor value for short.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "maxMoveUp": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined maximum price move up that the model considers as valid.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "minMoveDown": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined minimum price move down that the model considers as valid.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "probabilityOfTrading": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined constant probability of trading.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              }
                            },
                            "title": "Risk model parameters for simple modelling"
                          },
                          "logNormal": {
                            "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.",
                            "type": "object",
                            "properties": {
                              "riskAversionParameter": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Risk Aversion Parameter.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "tau": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Tau parameter of the risk model, projection horizon measured as a year fraction used in the expected shortfall\ncalculation to obtain the maintenance margin, must be a strictly non-negative real number.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "params": {
                                "description": "Risk model parameters for log normal.",
                                "type": "object",
                                "properties": {
                                  "mu": {
                                    "type": "number",
                                    "pattern": "^[-]?+(.[0-9]+)?$",
                                    "description": "Mu parameter, annualised growth rate of the underlying asset.",
                                    "minimum": -1.7976931348623157e+308,
                                    "maximum": 1.7976931348623157e+308
                                  },
                                  "r": {
                                    "type": "number",
                                    "pattern": "^[-]?+(.[0-9]+)?$",
                                    "description": "R parameter, annualised growth rate of the risk-free asset, used for discounting of future cash flows, can be any real number.",
                                    "minimum": -1.7976931348623157e+308,
                                    "maximum": 1.7976931348623157e+308
                                  },
                                  "sigma": {
                                    "type": "number",
                                    "pattern": "^[-]?+(.[0-9]+)?$",
                                    "description": "Sigma parameter, annualised volatility of the underlying asset, must be a strictly non-negative real number.",
                                    "minimum": -1.7976931348623157e+308,
                                    "maximum": 1.7976931348623157e+308
                                  }
                                },
                                "title": "Risk model parameters for log normal"
                              }
                            },
                            "title": "Risk model for log normal"
                          },
                          "positionDecimalPlaces": {
                            "type": "string",
                            "pattern": "^[0-9]{0,19}$",
                            "description": "Decimal places for order sizes, sets what size the smallest order / position on the spot market can be.",
                            "minimum": -9223372036854776000,
                            "maximum": 9223372036854776000
                          },
                          "slaParams": {
                            "description": "Specifies the liquidity provision SLA parameters.",
                            "type": "object",
                            "properties": {
                              "priceRange": {
                                "type": "string"
                              },
                              "commitmentMinTimeFraction": {
                                "type": "string",
                                "description": "Specifies the minimum fraction of time LPs must spend \"on the book\" providing their committed liquidity."
                              },
                              "performanceHysteresisEpochs": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Specifies the number of liquidity epochs over which past performance will continue to affect rewards."
                              },
                              "slaCompetitionFactor": {
                                "type": "string",
                                "description": "Specifies the maximum fraction of their accrued fees an LP that meets the SLA implied by market.liquidity.commitmentMinTimeFraction will lose to liquidity providers\nthat achieved a higher SLA performance than them."
                              }
                            }
                          },
                          "liquidityFeeSettings": {
                            "description": "Specifies how the liquidity fee for the market will be calculated.",
                            "type": "object",
                            "properties": {
                              "method": {
                                "description": "Method used to calculate the market's liquidity fee.",
                                "type": "string",
                                "enum": [
                                  "METHOD_UNSPECIFIED",
                                  "METHOD_MARGINAL_COST",
                                  "METHOD_WEIGHTED_AVERAGE",
                                  "METHOD_CONSTANT"
                                ],
                                "default": "METHOD_UNSPECIFIED"
                              },
                              "feeConstant": {
                                "type": "string",
                                "description": "Constant liquidity fee used when using the constant fee method."
                              }
                            }
                          },
                          "tickSize": {
                            "type": "string",
                            "title": "The market tick size defines the minimum change in quote price for the market"
                          }
                        },
                        "title": "Configuration for a new spot market on Vega"
                      }
                    },
                    "title": "New spot market on Vega"
                  },
                  "updateSpotMarket": {
                    "description": "Proposal change for modifying an existing spot market.",
                    "type": "object",
                    "properties": {
                      "marketId": {
                        "type": "string",
                        "description": "Market ID the update is for."
                      },
                      "changes": {
                        "description": "Updated configuration of the spot market.",
                        "type": "object",
                        "properties": {
                          "metadata": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Optional spot market metadata, tags."
                          },
                          "priceMonitoringParameters": {
                            "description": "Price monitoring parameters.",
                            "type": "object",
                            "properties": {
                              "triggers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "horizon": {
                                      "type": "string",
                                      "pattern": "^[0-9]{0,19}$",
                                      "description": "Price monitoring projection horizon τ in seconds.",
                                      "minimum": -9223372036854776000,
                                      "maximum": 9223372036854776000
                                    },
                                    "probability": {
                                      "type": "string",
                                      "description": "Price monitoring probability level p."
                                    },
                                    "auctionExtension": {
                                      "type": "string",
                                      "pattern": "^[0-9]{0,19}$",
                                      "description": "Price monitoring auction extension duration in seconds should the price\nbreach its theoretical level over the specified horizon at the specified\nprobability level.",
                                      "minimum": -9223372036854776000,
                                      "maximum": 9223372036854776000
                                    }
                                  },
                                  "title": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration"
                                }
                              }
                            },
                            "title": "PriceMonitoringParameters contains a collection of triggers to be used for a given market"
                          },
                          "targetStakeParameters": {
                            "description": "Specifies parameters related to target stake calculation.",
                            "type": "object",
                            "properties": {
                              "timeWindow": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Specifies length of time window expressed in seconds for target stake calculation.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              },
                              "scalingFactor": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Specifies scaling factors used in target stake calculation.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              }
                            },
                            "title": "TargetStakeParameters contains parameters used in target stake calculation"
                          },
                          "simple": {
                            "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected.",
                            "type": "object",
                            "properties": {
                              "factorLong": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined risk factor value for long.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "factorShort": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined risk factor value for short.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "maxMoveUp": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined maximum price move up that the model considers as valid.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "minMoveDown": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined minimum price move down that the model considers as valid.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "probabilityOfTrading": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Pre-defined constant probability of trading.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              }
                            },
                            "title": "Risk model parameters for simple modelling"
                          },
                          "logNormal": {
                            "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.",
                            "type": "object",
                            "properties": {
                              "riskAversionParameter": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Risk Aversion Parameter.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "tau": {
                                "type": "number",
                                "pattern": "^[-]?+(.[0-9]+)?$",
                                "description": "Tau parameter of the risk model, projection horizon measured as a year fraction used in the expected shortfall\ncalculation to obtain the maintenance margin, must be a strictly non-negative real number.",
                                "minimum": -1.7976931348623157e+308,
                                "maximum": 1.7976931348623157e+308
                              },
                              "params": {
                                "description": "Risk model parameters for log normal.",
                                "type": "object",
                                "properties": {
                                  "mu": {
                                    "type": "number",
                                    "pattern": "^[-]?+(.[0-9]+)?$",
                                    "description": "Mu parameter, annualised growth rate of the underlying asset.",
                                    "minimum": -1.7976931348623157e+308,
                                    "maximum": 1.7976931348623157e+308
                                  },
                                  "r": {
                                    "type": "number",
                                    "pattern": "^[-]?+(.[0-9]+)?$",
                                    "description": "R parameter, annualised growth rate of the risk-free asset, used for discounting of future cash flows, can be any real number.",
                                    "minimum": -1.7976931348623157e+308,
                                    "maximum": 1.7976931348623157e+308
                                  },
                                  "sigma": {
                                    "type": "number",
                                    "pattern": "^[-]?+(.[0-9]+)?$",
                                    "description": "Sigma parameter, annualised volatility of the underlying asset, must be a strictly non-negative real number.",
                                    "minimum": -1.7976931348623157e+308,
                                    "maximum": 1.7976931348623157e+308
                                  }
                                },
                                "title": "Risk model parameters for log normal"
                              }
                            },
                            "title": "Risk model for log normal"
                          },
                          "slaParams": {
                            "description": "Specifies the liquidity provision SLA parameters.",
                            "type": "object",
                            "properties": {
                              "priceRange": {
                                "type": "string"
                              },
                              "commitmentMinTimeFraction": {
                                "type": "string",
                                "description": "Specifies the minimum fraction of time LPs must spend \"on the book\" providing their committed liquidity."
                              },
                              "performanceHysteresisEpochs": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Specifies the number of liquidity epochs over which past performance will continue to affect rewards."
                              },
                              "slaCompetitionFactor": {
                                "type": "string",
                                "description": "Specifies the maximum fraction of their accrued fees an LP that meets the SLA implied by market.liquidity.commitmentMinTimeFraction will lose to liquidity providers\nthat achieved a higher SLA performance than them."
                              }
                            }
                          },
                          "liquidityFeeSettings": {
                            "description": "Specifies how the liquidity fee for the market will be calculated.",
                            "type": "object",
                            "properties": {
                              "method": {
                                "description": "Method used to calculate the market's liquidity fee.",
                                "type": "string",
                                "enum": [
                                  "METHOD_UNSPECIFIED",
                                  "METHOD_MARGINAL_COST",
                                  "METHOD_WEIGHTED_AVERAGE",
                                  "METHOD_CONSTANT"
                                ],
                                "default": "METHOD_UNSPECIFIED"
                              },
                              "feeConstant": {
                                "type": "string",
                                "description": "Constant liquidity fee used when using the constant fee method."
                              }
                            }
                          },
                          "tickSize": {
                            "type": "string",
                            "title": "The market tick size defines the minimum change in quote price for the market"
                          }
                        },
                        "title": "Configuration to update a spot market on Vega"
                      }
                    },
                    "title": "Update an existing spot market on Vega"
                  },
                  "newTransfer": {
                    "description": "Proposal change for a governance initiated transfer.",
                    "type": "object",
                    "properties": {
                      "changes": {
                        "description": "Configuration for a new transfer.",
                        "type": "object",
                        "properties": {
                          "sourceType": {
                            "title": "Source account type, such as network treasury, market insurance pool",
                            "type": "string",
                            "enum": [
                              "ACCOUNT_TYPE_UNSPECIFIED",
                              "ACCOUNT_TYPE_INSURANCE",
                              "ACCOUNT_TYPE_SETTLEMENT",
                              "ACCOUNT_TYPE_MARGIN",
                              "ACCOUNT_TYPE_GENERAL",
                              "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                              "ACCOUNT_TYPE_FEES_LIQUIDITY",
                              "ACCOUNT_TYPE_FEES_MAKER",
                              "ACCOUNT_TYPE_BOND",
                              "ACCOUNT_TYPE_EXTERNAL",
                              "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                              "ACCOUNT_TYPE_GLOBAL_REWARD",
                              "ACCOUNT_TYPE_PENDING_TRANSFERS",
                              "ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES",
                              "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                              "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                              "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS",
                              "ACCOUNT_TYPE_HOLDING",
                              "ACCOUNT_TYPE_LP_LIQUIDITY_FEES",
                              "ACCOUNT_TYPE_LIQUIDITY_FEES_BONUS_DISTRIBUTION",
                              "ACCOUNT_TYPE_NETWORK_TREASURY",
                              "ACCOUNT_TYPE_VESTING_REWARDS",
                              "ACCOUNT_TYPE_VESTED_REWARDS",
                              "ACCOUNT_TYPE_REWARD_AVERAGE_POSITION",
                              "ACCOUNT_TYPE_REWARD_RELATIVE_RETURN",
                              "ACCOUNT_TYPE_REWARD_RETURN_VOLATILITY",
                              "ACCOUNT_TYPE_REWARD_VALIDATOR_RANKING",
                              "ACCOUNT_TYPE_PENDING_FEE_REFERRAL_REWARD",
                              "ACCOUNT_TYPE_ORDER_MARGIN"
                            ],
                            "default": "ACCOUNT_TYPE_UNSPECIFIED",
                            "description": "- ACCOUNT_TYPE_UNSPECIFIED: Default value\n - ACCOUNT_TYPE_INSURANCE: Insurance pool accounts contain insurance pool funds for a market\n - ACCOUNT_TYPE_SETTLEMENT: Settlement accounts exist only during settlement or mark-to-market\n - ACCOUNT_TYPE_MARGIN: Margin accounts contain funds set aside for the margin needed to support a party's open positions.\nEach party will have a margin account for each market they have traded in.\nRequired initial margin is allocated to each market from user's general account.\nCollateral in the margin account can't be withdrawn or used as margin on another market until\nit is released back to the general account.\nVega protocol uses an internal accounting system to segregate funds held as\nmargin from other funds to ensure they are never lost or 'double spent'\n\nMargin account funds will vary as margin requirements on positions change\n - ACCOUNT_TYPE_GENERAL: General accounts contain the collateral for a party that is not otherwise allocated. A party will\nhave multiple general accounts, one for each asset they want\nto trade with\n\nGeneral accounts are where funds are initially deposited or withdrawn from,\nit is also the account where funds are taken to fulfil fees and initial margin requirements\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: Infrastructure accounts contain fees earned by providing infrastructure on Vega\n - ACCOUNT_TYPE_FEES_LIQUIDITY: Liquidity accounts contain fees earned by providing liquidity on Vega markets\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned by placing orders that sit on the book\nand are then matched with an incoming order to create a trade - These fees reward parties\nwho provide the best priced liquidity that actually allows trading to take place\n - ACCOUNT_TYPE_BOND: This account is created to maintain liquidity providers funds commitments\n - ACCOUNT_TYPE_EXTERNAL: External account represents an external source (deposit/withdrawal)\n - ACCOUNT_TYPE_GLOBAL_INSURANCE: Global insurance account for the asset\n - ACCOUNT_TYPE_GLOBAL_REWARD: Global reward account for the asset\n - ACCOUNT_TYPE_PENDING_TRANSFERS: Per asset account used to store pending transfers (if any)\n - ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES: Per asset reward account for fees paid to makers\n - ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES: Per asset reward account for fees received by makers\n - ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES: Per asset reward account for fees received by liquidity providers\n - ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS: Per asset reward account for market proposers when the market goes above some trading threshold\n - ACCOUNT_TYPE_HOLDING: Per asset account for holding in-flight unfilled orders' funds\n - ACCOUNT_TYPE_LP_LIQUIDITY_FEES: Network controlled liquidity provider's account, per market, to hold accrued liquidity fees.\n - ACCOUNT_TYPE_LIQUIDITY_FEES_BONUS_DISTRIBUTION: Network controlled liquidity fees bonus distribution account, per market.\n - ACCOUNT_TYPE_NETWORK_TREASURY: Network controlled treasury\n - ACCOUNT_TYPE_VESTING_REWARDS: Account holding user's rewards for the vesting period\n - ACCOUNT_TYPE_VESTED_REWARDS: Account holding user's rewards after the vesting period\n - ACCOUNT_TYPE_REWARD_AVERAGE_POSITION: Per asset market reward account given for average position\n - ACCOUNT_TYPE_REWARD_RELATIVE_RETURN: Per asset market reward account given for relative return\n - ACCOUNT_TYPE_REWARD_RETURN_VOLATILITY: Per asset market reward account given for return volatility\n - ACCOUNT_TYPE_REWARD_VALIDATOR_RANKING: Per asset market reward account given to validators by their ranking\n - ACCOUNT_TYPE_PENDING_FEE_REFERRAL_REWARD: Per asset account for pending fee referral reward payouts\n - ACCOUNT_TYPE_ORDER_MARGIN: Per asset market account for party in isolated margin mode"
                          },
                          "source": {
                            "type": "string",
                            "title": "If network treasury, field is empty, otherwise uses the market ID"
                          },
                          "transferType": {
                            "title": "\"All or nothing\" or \"best effort\":\nAll or nothing: Transfers the specified amount or does not transfer anything\nBest effort: Transfers the specified amount or the max allowable amount if this is less than the specified amount",
                            "type": "string",
                            "enum": [
                              "GOVERNANCE_TRANSFER_TYPE_UNSPECIFIED",
                              "GOVERNANCE_TRANSFER_TYPE_ALL_OR_NOTHING",
                              "GOVERNANCE_TRANSFER_TYPE_BEST_EFFORT"
                            ],
                            "default": "GOVERNANCE_TRANSFER_TYPE_UNSPECIFIED"
                          },
                          "amount": {
                            "type": "string",
                            "title": "Maximum amount to transfer"
                          },
                          "asset": {
                            "type": "string",
                            "title": "ID of asset to transfer"
                          },
                          "fractionOfBalance": {
                            "type": "string",
                            "title": "Maximum fraction of the source account's balance to transfer as a decimal - i.e. 0.1 = 10% of the balance"
                          },
                          "destinationType": {
                            "title": "Specifies the account type to transfer to: reward pool, party, network insurance pool, market insurance pool",
                            "type": "string",
                            "enum": [
                              "ACCOUNT_TYPE_UNSPECIFIED",
                              "ACCOUNT_TYPE_INSURANCE",
                              "ACCOUNT_TYPE_SETTLEMENT",
                              "ACCOUNT_TYPE_MARGIN",
                              "ACCOUNT_TYPE_GENERAL",
                              "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                              "ACCOUNT_TYPE_FEES_LIQUIDITY",
                              "ACCOUNT_TYPE_FEES_MAKER",
                              "ACCOUNT_TYPE_BOND",
                              "ACCOUNT_TYPE_EXTERNAL",
                              "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                              "ACCOUNT_TYPE_GLOBAL_REWARD",
                              "ACCOUNT_TYPE_PENDING_TRANSFERS",
                              "ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES",
                              "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                              "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                              "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS",
                              "ACCOUNT_TYPE_HOLDING",
                              "ACCOUNT_TYPE_LP_LIQUIDITY_FEES",
                              "ACCOUNT_TYPE_LIQUIDITY_FEES_BONUS_DISTRIBUTION",
                              "ACCOUNT_TYPE_NETWORK_TREASURY",
                              "ACCOUNT_TYPE_VESTING_REWARDS",
                              "ACCOUNT_TYPE_VESTED_REWARDS",
                              "ACCOUNT_TYPE_REWARD_AVERAGE_POSITION",
                              "ACCOUNT_TYPE_REWARD_RELATIVE_RETURN",
                              "ACCOUNT_TYPE_REWARD_RETURN_VOLATILITY",
                              "ACCOUNT_TYPE_REWARD_VALIDATOR_RANKING",
                              "ACCOUNT_TYPE_PENDING_FEE_REFERRAL_REWARD",
                              "ACCOUNT_TYPE_ORDER_MARGIN"
                            ],
                            "default": "ACCOUNT_TYPE_UNSPECIFIED",
                            "description": "- ACCOUNT_TYPE_UNSPECIFIED: Default value\n - ACCOUNT_TYPE_INSURANCE: Insurance pool accounts contain insurance pool funds for a market\n - ACCOUNT_TYPE_SETTLEMENT: Settlement accounts exist only during settlement or mark-to-market\n - ACCOUNT_TYPE_MARGIN: Margin accounts contain funds set aside for the margin needed to support a party's open positions.\nEach party will have a margin account for each market they have traded in.\nRequired initial margin is allocated to each market from user's general account.\nCollateral in the margin account can't be withdrawn or used as margin on another market until\nit is released back to the general account.\nVega protocol uses an internal accounting system to segregate funds held as\nmargin from other funds to ensure they are never lost or 'double spent'\n\nMargin account funds will vary as margin requirements on positions change\n - ACCOUNT_TYPE_GENERAL: General accounts contain the collateral for a party that is not otherwise allocated. A party will\nhave multiple general accounts, one for each asset they want\nto trade with\n\nGeneral accounts are where funds are initially deposited or withdrawn from,\nit is also the account where funds are taken to fulfil fees and initial margin requirements\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: Infrastructure accounts contain fees earned by providing infrastructure on Vega\n - ACCOUNT_TYPE_FEES_LIQUIDITY: Liquidity accounts contain fees earned by providing liquidity on Vega markets\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned by placing orders that sit on the book\nand are then matched with an incoming order to create a trade - These fees reward parties\nwho provide the best priced liquidity that actually allows trading to take place\n - ACCOUNT_TYPE_BOND: This account is created to maintain liquidity providers funds commitments\n - ACCOUNT_TYPE_EXTERNAL: External account represents an external source (deposit/withdrawal)\n - ACCOUNT_TYPE_GLOBAL_INSURANCE: Global insurance account for the asset\n - ACCOUNT_TYPE_GLOBAL_REWARD: Global reward account for the asset\n - ACCOUNT_TYPE_PENDING_TRANSFERS: Per asset account used to store pending transfers (if any)\n - ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES: Per asset reward account for fees paid to makers\n - ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES: Per asset reward account for fees received by makers\n - ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES: Per asset reward account for fees received by liquidity providers\n - ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS: Per asset reward account for market proposers when the market goes above some trading threshold\n - ACCOUNT_TYPE_HOLDING: Per asset account for holding in-flight unfilled orders' funds\n - ACCOUNT_TYPE_LP_LIQUIDITY_FEES: Network controlled liquidity provider's account, per market, to hold accrued liquidity fees.\n - ACCOUNT_TYPE_LIQUIDITY_FEES_BONUS_DISTRIBUTION: Network controlled liquidity fees bonus distribution account, per market.\n - ACCOUNT_TYPE_NETWORK_TREASURY: Network controlled treasury\n - ACCOUNT_TYPE_VESTING_REWARDS: Account holding user's rewards for the vesting period\n - ACCOUNT_TYPE_VESTED_REWARDS: Account holding user's rewards after the vesting period\n - ACCOUNT_TYPE_REWARD_AVERAGE_POSITION: Per asset market reward account given for average position\n - ACCOUNT_TYPE_REWARD_RELATIVE_RETURN: Per asset market reward account given for relative return\n - ACCOUNT_TYPE_REWARD_RETURN_VOLATILITY: Per asset market reward account given for return volatility\n - ACCOUNT_TYPE_REWARD_VALIDATOR_RANKING: Per asset market reward account given to validators by their ranking\n - ACCOUNT_TYPE_PENDING_FEE_REFERRAL_REWARD: Per asset account for pending fee referral reward payouts\n - ACCOUNT_TYPE_ORDER_MARGIN: Per asset market account for party in isolated margin mode"
                          },
                          "destination": {
                            "type": "string",
                            "title": "Specifies the account to transfer to, depending on the account type:\nNetwork treasury: leave empty\nParty: party's public key\nMarket insurance pool: market ID"
                          },
                          "oneOff": {
                            "type": "object",
                            "properties": {
                              "deliverOn": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Timestamp in Unix nanoseconds for when the transfer should be delivered into the receiver's account.",
                                "minimum": -9223372036854776000,
                                "maximum": 9223372036854776000
                              }
                            },
                            "title": "Specific details for a one off transfer"
                          },
                          "recurring": {
                            "type": "object",
                            "properties": {
                              "startEpoch": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$"
                              },
                              "endEpoch": {
                                "type": "string",
                                "pattern": "^[0-9]{0,19}$",
                                "description": "Last epoch at which this transfer shall be paid."
                              },
                              "dispatchStrategy": {
                                "description": "Optional parameter defining how a transfer is dispatched.",
                                "type": "object",
                                "properties": {
                                  "assetForMetric": {
                                    "type": "string",
                                    "description": "Asset to use for metric."
                                  },
                                  "metric": {
                                    "description": "Metric to apply.",
                                    "type": "string",
                                    "enum": [
                                      "DISPATCH_METRIC_UNSPECIFIED",
                                      "DISPATCH_METRIC_MAKER_FEES_PAID",
                                      "DISPATCH_METRIC_MAKER_FEES_RECEIVED",
                                      "DISPATCH_METRIC_LP_FEES_RECEIVED",
                                      "DISPATCH_METRIC_MARKET_VALUE",
                                      "DISPATCH_METRIC_AVERAGE_POSITION",
                                      "DISPATCH_METRIC_RELATIVE_RETURN",
                                      "DISPATCH_METRIC_RETURN_VOLATILITY",
                                      "DISPATCH_METRIC_VALIDATOR_RANKING"
                                    ],
                                    "default": "DISPATCH_METRIC_UNSPECIFIED",
                                    "title": "- DISPATCH_METRIC_MAKER_FEES_PAID: Dispatch metric that uses the total maker fees paid in the market\n - DISPATCH_METRIC_MAKER_FEES_RECEIVED: Dispatch metric that uses the total maker fees received in the market\n - DISPATCH_METRIC_LP_FEES_RECEIVED: Dispatch metric that uses the total LP fees received in the market\n - DISPATCH_METRIC_MARKET_VALUE: Dispatch metric that uses total value of the market if above the required threshold and not paid given proposer bonus yet\n - DISPATCH_METRIC_AVERAGE_POSITION: Dispatch metric that uses the time weighted average position\n - DISPATCH_METRIC_RELATIVE_RETURN: Dispatch metric that uses the relative PNL of the party in the market\n - DISPATCH_METRIC_RETURN_VOLATILITY: Dispatch metric that uses return volatility of the party in the market\n - DISPATCH_METRIC_VALIDATOR_RANKING: Dispatch metric that uses the validator ranking of the validator as metric"
                                  },
                                  "markets": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "description": "Optional markets in scope."
                                  },
                                  "entityScope": {
                                    "description": "Mandatory enum that defines the entities within scope.",
                                    "type": "string",
                                    "enum": [
                                      "ENTITY_SCOPE_UNSPECIFIED",
                                      "ENTITY_SCOPE_INDIVIDUALS",
                                      "ENTITY_SCOPE_TEAMS"
                                    ],
                                    "default": "ENTITY_SCOPE_UNSPECIFIED",
                                    "title": "- ENTITY_SCOPE_INDIVIDUALS: Rewards must be distributed directly to eligible parties.\n - ENTITY_SCOPE_TEAMS: Rewards must be distributed to directly eligible teams, and then amongst team members"
                                  },
                                  "individualScope": {
                                    "description": "Optional enum if the entity scope defined is for individuals, which determines the subset of individuals that are eligible to be rewarded.",
                                    "type": "string",
                                    "enum": [
                                      "INDIVIDUAL_SCOPE_UNSPECIFIED",
                                      "INDIVIDUAL_SCOPE_ALL",
                                      "INDIVIDUAL_SCOPE_IN_TEAM",
                                      "INDIVIDUAL_SCOPE_NOT_IN_TEAM"
                                    ],
                                    "default": "INDIVIDUAL_SCOPE_UNSPECIFIED"
                                  },
                                  "teamScope": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "title": "Optional list applicable if the reward type has a scope of teams, which allows the funder to define a list of team IDs that are eligible to be rewarded from this transfer"
                                  },
                                  "nTopPerformers": {
                                    "type": "string",
                                    "title": "The proportion of the top performers in the team for a given metric to be averaged for the metric calculation if the scope is team"
                                  },
                                  "stakingRequirement": {
                                    "type": "string",
                                    "title": "Minimum number of governance (e.g. VEGA) tokens staked for a party to be considered eligible. Defaults to 0"
                                  },
                                  "notionalTimeWeightedAveragePositionRequirement": {
                                    "type": "string",
                                    "title": "Minimum notional time-weighted averaged position required for a party to be considered eligible. Defaults to 0"
                                  },
                                  "windowLength": {
                                    "type": "string",
                                    "pattern": "^[0-9]{0,19}$",
                                    "title": "Number of epochs to evaluate the metric on"
                                  },
                                  "lockPeriod": {
                                    "type": "string",
                                    "pattern": "^[0-9]{0,19}$",
                                    "title": "Number of epochs after distribution to delay vesting of rewards by"
                                  },
                                  "distributionStrategy": {
                                    "title": "Controls how the reward is distributed between qualifying parties",
                                    "type": "string",
                                    "enum": [
                                      "DISTRIBUTION_STRATEGY_UNSPECIFIED",
                                      "DISTRIBUTION_STRATEGY_PRO_RATA",
                                      "DISTRIBUTION_STRATEGY_RANK"
                                    ],
                                    "default": "DISTRIBUTION_STRATEGY_UNSPECIFIED",
                                    "description": " - DISTRIBUTION_STRATEGY_PRO_RATA: Rewards funded using the pro-rata strategy should be distributed pro-rata by each entity's reward metric, scaled by any active multipliers that party has.\n - DISTRIBUTION_STRATEGY_RANK: Rewards funded using the party rank."
                                  },
                                  "rankTable": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "startRank": {
                                          "type": "integer",
                                          "pattern": "^[0-9]{0,19}$",
                                          "minimum": -9223372036854776000,
                                          "maximum": 9223372036854776000
                                        },
                                        "shareRatio": {
                                          "type": "integer",
                                          "pattern": "^[0-9]{0,19}$",
                                          "minimum": -9223372036854776000,
                                          "maximum": 9223372036854776000
                                        }
                                      }
                                    },
                                    "description": "Ordered list, using start rank, defining the rank bands and share ratio for each band. Mandatory for the rank distribution strategy."
                                  },
                                  "capRewardFeeMultiple": {
                                    "type": "string",
                                    "description": "If set, the actual amount of rewards transferred to each public key during distribution for this transfer will be `min(calculated_reward_in_quantum, cap_reward_fee_multiple × fees_paid_this_epoch_in_quantum)."
                                  }
                                }
                              }
                            },
                            "title": "Specific details for a recurring transfer"
                          }
                        }
                      }
                    },
                    "title": "New governance transfer"
                  },
                  "cancelTransfer": {
                    "description": "Proposal change to cancel a governance initiated transfe.",
                    "type": "object",
                    "properties": {
                      "changes": {
                        "title": "Configuration for cancellation of a governance-initiated transfer",
                        "type": "object",
                        "properties": {
                          "transferId": {
                            "type": "string",
                            "description": "ID of the governance transfer proposal."
                          }
                        }
                      }
                    }
                  },
                  "updateMarketState": {
                    "description": "Proposal change for updating the state of a market.",
                    "type": "object",
                    "properties": {
                      "changes": {
                        "title": "Configuration for governance-initiated change of a market's state",
                        "type": "object",
                        "properties": {
                          "marketId": {
                            "type": "string",
                            "title": "ID of the market"
                          },
                          "updateType": {
                            "title": "Type of the market update",
                            "type": "string",
                            "enum": [
                              "MARKET_STATE_UPDATE_TYPE_UNSPECIFIED",
                              "MARKET_STATE_UPDATE_TYPE_TERMINATE",
                              "MARKET_STATE_UPDATE_TYPE_SUSPEND",
                              "MARKET_STATE_UPDATE_TYPE_RESUME"
                            ],
                            "default": "MARKET_STATE_UPDATE_TYPE_UNSPECIFIED"
                          },
                          "price": {
                            "type": "string",
                            "title": "Settlement price, relevant only for market termination for futures markets"
                          }
                        }
                      }
                    }
                  },
                  "updateReferralProgram": {
                    "description": "Proposal change for updating the referral program.",
                    "type": "object",
                    "properties": {
                      "changes": {
                        "description": "Configuration for change to update a referral program.",
                        "type": "object",
                        "properties": {
                          "benefitTiers": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "minimumRunningNotionalTakerVolume": {
                                  "type": "string",
                                  "description": "Required running notional taker volume in quantum units for parties\nto access this tier."
                                },
                                "minimumEpochs": {
                                  "type": "string",
                                  "description": "Required number of epochs a party must have been in a referral set to\naccess this tier."
                                },
                                "referralRewardFactor": {
                                  "type": "string",
                                  "description": "Proportion of the referee's taker fees to be rewarded to the referrer."
                                },
                                "referralDiscountFactor": {
                                  "type": "string",
                                  "description": "Proportion of the referee's taker fees to be discounted."
                                }
                              }
                            },
                            "description": "Defined benefit tiers in increasing order. First element will give Tier 1,\nsecond element will give Tier 2, and so on. Determines the level of\nbenefit a party can expect based on performance criteria."
                          },
                          "endOfProgramTimestamp": {
                            "type": "string",
                            "pattern": "^[0-9]{0,19}$",
                            "description": "Timestamp as Unix time in seconds, after which when the current epoch\nends, the program will end and benefits will be disabled.",
                            "minimum": -9223372036854776000,
                            "maximum": 9223372036854776000
                          },
                          "windowLength": {
                            "type": "string",
                            "pattern": "^[0-9]{0,19}$",
                            "description": "Number of epochs over which to evaluate a referral set's running volume."
                          },
                          "stakingTiers": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "minimumStakedTokens": {
                                  "type": "string",
                                  "description": "Required number of governance tokens ($VEGA) a referrer must have staked to\nreceive the multiplier."
                                },
                                "referralRewardMultiplier": {
                                  "type": "string",
                                  "description": "Multiplier applied to the referral reward factor when calculating referral\nrewards due to the referrer."
                                }
                              }
                            },
                            "description": "Defined staking tiers in increasing order. First element will give Tier 1,\nsecond element will give Tier 2, and so on. Determines the level of\nbenefit a party can expect based on their staking."
                          }
                        }
                      }
                    }
                  },
                  "updateVolumeDiscountProgram": {
                    "description": "Proposal change for updating the volume discount program.",
                    "type": "object",
                    "properties": {
                      "changes": {
                        "title": "Configuration for a change to update a volume discount program",
                        "type": "object",
                        "properties": {
                          "benefitTiers": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "minimumRunningNotionalTakerVolume": {
                                  "type": "string",
                                  "description": "Required running notional taker volume in quantum units for parties\nto access this tier."
                                },
                                "volumeDiscountFactor": {
                                  "type": "string",
                                  "description": "Proportion of the taker fees to be discounted."
                                }
                              }
                            },
                            "description": "Defined benefit tiers in increasing order. First element will give Tier 1,\nsecond element will give Tier 2, and so on. Determines the level of\nbenefit a party can expect based on performance criteria."
                          },
                          "endOfProgramTimestamp": {
                            "type": "string",
                            "pattern": "^[0-9]{0,19}$",
                            "description": "Timestamp as Unix time in seconds, after which when the current epoch\nends, the program will end and benefits will be disabled.",
                            "minimum": -9223372036854776000,
                            "maximum": 9223372036854776000
                          },
                          "windowLength": {
                            "type": "string",
                            "pattern": "^[0-9]{0,19}$",
                            "description": "Number of epochs over which to evaluate a referral set's running volume."
                          }
                        }
                      }
                    }
                  }
                },
                "title": "Terms change for a batch governance proposal"
              },
              "description": "List of individual changes included in the batch proposal."
            }
          },
          "title": "Terms for a batch governance proposal submission"
        },
        "rationale": {
          "description": "Rationale behind a proposal.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description to show a short title / something in case the link goes offline.\nThis is to be between 0 and 20k unicode characters.\nThis is mandatory for all proposals."
            },
            "title": {
              "type": "string",
              "description": "Title to be used to give a short description of the proposal in lists.\nThis is to be between 0 and 100 unicode characters.\nThis is mandatory for all proposals."
            }
          }
        }
      },
      "description": "Command that allows a token holder to submit a batch governance proposal that can be voted on by any other token holders, and eventually enacted on the Vega network.\nFor example this command can be used to propose a new market and a network parameter change with it."
    },
    "updatePartyProfile": {
      "type": "object",
      "properties": {
        "alias": {
          "type": "string",
          "description": "Alias given to the party. It must be unique network-wide."
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string",
                "description": "Key of the metadata."
              },
              "value": {
                "type": "string",
                "description": "Value of the metadata."
              }
            },
            "description": "Generic structure holding a key/value pair."
          },
          "description": "Freeform data to associate to the party.\nSupport a maximum of 10 entries."
        }
      },
      "description": "Command to associate metadata to a public key, known as a party ID.\nPartial update is not supported, meaning previous values must be included in\nthe update, otherwise they are removed."
    }
  }
}